/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as FullscreenLayoutRouteImport } from './routes/_fullscreenLayout'
import { Route as IndexRouteImport } from './routes/index'
import { Route as windowedLayoutRouteImport } from './routes/(windowed)/_layout'
import { Route as PlayGameIdLayoutRouteImport } from './routes/play/$gameId/_layout'
import { Route as PlayGameIdLayoutIndexRouteImport } from './routes/play/$gameId/_layout/index'
import { Route as windowedLayoutGamesGameIdIndexRouteImport } from './routes/(windowed)/_layout/games/$gameId/index'

const windowedRouteImport = createFileRoute('/(windowed)')()
const PlayGameIdRouteImport = createFileRoute('/play/$gameId')()
const FullscreenLayoutFullscreenIndexLazyRouteImport = createFileRoute(
  '/_fullscreenLayout/fullscreen/',
)()
const windowedLayoutHomeLazyRouteImport = createFileRoute(
  '/(windowed)/_layout/home',
)()
const FullscreenLayoutFullscreenGamesIndexLazyRouteImport = createFileRoute(
  '/_fullscreenLayout/fullscreen/games/',
)()
const PlayGameIdLayoutFrameLazyRouteImport = createFileRoute(
  '/play/$gameId/_layout/frame',
)()
const FullscreenLayoutFullscreenGamesGameIdLazyRouteImport = createFileRoute(
  '/_fullscreenLayout/fullscreen/games/$gameId',
)()

const windowedRoute = windowedRouteImport.update({
  id: '/(windowed)',
  getParentRoute: () => rootRouteImport,
} as any)
const FullscreenLayoutRoute = FullscreenLayoutRouteImport.update({
  id: '/_fullscreenLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PlayGameIdRoute = PlayGameIdRouteImport.update({
  id: '/play/$gameId',
  path: '/play/$gameId',
  getParentRoute: () => rootRouteImport,
} as any)
const windowedLayoutRoute = windowedLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => windowedRoute,
} as any)
const FullscreenLayoutFullscreenIndexLazyRoute =
  FullscreenLayoutFullscreenIndexLazyRouteImport.update({
    id: '/fullscreen/',
    path: '/fullscreen/',
    getParentRoute: () => FullscreenLayoutRoute,
  } as any).lazy(() =>
    import('./routes/_fullscreenLayout/fullscreen/index.lazy').then(
      (d) => d.Route,
    ),
  )
const windowedLayoutHomeLazyRoute = windowedLayoutHomeLazyRouteImport
  .update({
    id: '/home',
    path: '/home',
    getParentRoute: () => windowedLayoutRoute,
  } as any)
  .lazy(() =>
    import('./routes/(windowed)/_layout/home.lazy').then((d) => d.Route),
  )
const PlayGameIdLayoutRoute = PlayGameIdLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => PlayGameIdRoute,
} as any)
const FullscreenLayoutFullscreenGamesIndexLazyRoute =
  FullscreenLayoutFullscreenGamesIndexLazyRouteImport.update({
    id: '/fullscreen/games/',
    path: '/fullscreen/games/',
    getParentRoute: () => FullscreenLayoutRoute,
  } as any).lazy(() =>
    import('./routes/_fullscreenLayout/fullscreen/games/index.lazy').then(
      (d) => d.Route,
    ),
  )
const PlayGameIdLayoutIndexRoute = PlayGameIdLayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PlayGameIdLayoutRoute,
} as any)
const PlayGameIdLayoutFrameLazyRoute =
  PlayGameIdLayoutFrameLazyRouteImport.update({
    id: '/frame',
    path: '/frame',
    getParentRoute: () => PlayGameIdLayoutRoute,
  } as any).lazy(() =>
    import('./routes/play/$gameId/_layout/frame.lazy').then((d) => d.Route),
  )
const FullscreenLayoutFullscreenGamesGameIdLazyRoute =
  FullscreenLayoutFullscreenGamesGameIdLazyRouteImport.update({
    id: '/fullscreen/games/$gameId',
    path: '/fullscreen/games/$gameId',
    getParentRoute: () => FullscreenLayoutRoute,
  } as any).lazy(() =>
    import('./routes/_fullscreenLayout/fullscreen/games/$gameId.lazy').then(
      (d) => d.Route,
    ),
  )
const windowedLayoutGamesGameIdIndexRoute =
  windowedLayoutGamesGameIdIndexRouteImport.update({
    id: '/games/$gameId/',
    path: '/games/$gameId/',
    getParentRoute: () => windowedLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof windowedLayoutRouteWithChildren
  '/play/$gameId': typeof PlayGameIdLayoutRouteWithChildren
  '/home': typeof windowedLayoutHomeLazyRoute
  '/fullscreen': typeof FullscreenLayoutFullscreenIndexLazyRoute
  '/fullscreen/games/$gameId': typeof FullscreenLayoutFullscreenGamesGameIdLazyRoute
  '/play/$gameId/frame': typeof PlayGameIdLayoutFrameLazyRoute
  '/play/$gameId/': typeof PlayGameIdLayoutIndexRoute
  '/fullscreen/games': typeof FullscreenLayoutFullscreenGamesIndexLazyRoute
  '/games/$gameId': typeof windowedLayoutGamesGameIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof windowedLayoutRouteWithChildren
  '/play/$gameId': typeof PlayGameIdLayoutIndexRoute
  '/home': typeof windowedLayoutHomeLazyRoute
  '/fullscreen': typeof FullscreenLayoutFullscreenIndexLazyRoute
  '/fullscreen/games/$gameId': typeof FullscreenLayoutFullscreenGamesGameIdLazyRoute
  '/play/$gameId/frame': typeof PlayGameIdLayoutFrameLazyRoute
  '/fullscreen/games': typeof FullscreenLayoutFullscreenGamesIndexLazyRoute
  '/games/$gameId': typeof windowedLayoutGamesGameIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_fullscreenLayout': typeof FullscreenLayoutRouteWithChildren
  '/(windowed)': typeof windowedRouteWithChildren
  '/(windowed)/_layout': typeof windowedLayoutRouteWithChildren
  '/play/$gameId': typeof PlayGameIdRouteWithChildren
  '/play/$gameId/_layout': typeof PlayGameIdLayoutRouteWithChildren
  '/(windowed)/_layout/home': typeof windowedLayoutHomeLazyRoute
  '/_fullscreenLayout/fullscreen/': typeof FullscreenLayoutFullscreenIndexLazyRoute
  '/_fullscreenLayout/fullscreen/games/$gameId': typeof FullscreenLayoutFullscreenGamesGameIdLazyRoute
  '/play/$gameId/_layout/frame': typeof PlayGameIdLayoutFrameLazyRoute
  '/play/$gameId/_layout/': typeof PlayGameIdLayoutIndexRoute
  '/_fullscreenLayout/fullscreen/games/': typeof FullscreenLayoutFullscreenGamesIndexLazyRoute
  '/(windowed)/_layout/games/$gameId/': typeof windowedLayoutGamesGameIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/play/$gameId'
    | '/home'
    | '/fullscreen'
    | '/fullscreen/games/$gameId'
    | '/play/$gameId/frame'
    | '/play/$gameId/'
    | '/fullscreen/games'
    | '/games/$gameId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/play/$gameId'
    | '/home'
    | '/fullscreen'
    | '/fullscreen/games/$gameId'
    | '/play/$gameId/frame'
    | '/fullscreen/games'
    | '/games/$gameId'
  id:
    | '__root__'
    | '/'
    | '/_fullscreenLayout'
    | '/(windowed)'
    | '/(windowed)/_layout'
    | '/play/$gameId'
    | '/play/$gameId/_layout'
    | '/(windowed)/_layout/home'
    | '/_fullscreenLayout/fullscreen/'
    | '/_fullscreenLayout/fullscreen/games/$gameId'
    | '/play/$gameId/_layout/frame'
    | '/play/$gameId/_layout/'
    | '/_fullscreenLayout/fullscreen/games/'
    | '/(windowed)/_layout/games/$gameId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FullscreenLayoutRoute: typeof FullscreenLayoutRouteWithChildren
  windowedRoute: typeof windowedRouteWithChildren
  PlayGameIdRoute: typeof PlayGameIdRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(windowed)': {
      id: '/(windowed)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof windowedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_fullscreenLayout': {
      id: '/_fullscreenLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof FullscreenLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/play/$gameId': {
      id: '/play/$gameId'
      path: '/play/$gameId'
      fullPath: '/play/$gameId'
      preLoaderRoute: typeof PlayGameIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(windowed)/_layout': {
      id: '/(windowed)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof windowedLayoutRouteImport
      parentRoute: typeof windowedRoute
    }
    '/_fullscreenLayout/fullscreen/': {
      id: '/_fullscreenLayout/fullscreen/'
      path: '/fullscreen'
      fullPath: '/fullscreen'
      preLoaderRoute: typeof FullscreenLayoutFullscreenIndexLazyRouteImport
      parentRoute: typeof FullscreenLayoutRoute
    }
    '/(windowed)/_layout/home': {
      id: '/(windowed)/_layout/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof windowedLayoutHomeLazyRouteImport
      parentRoute: typeof windowedLayoutRoute
    }
    '/play/$gameId/_layout': {
      id: '/play/$gameId/_layout'
      path: '/play/$gameId'
      fullPath: '/play/$gameId'
      preLoaderRoute: typeof PlayGameIdLayoutRouteImport
      parentRoute: typeof PlayGameIdRoute
    }
    '/_fullscreenLayout/fullscreen/games/': {
      id: '/_fullscreenLayout/fullscreen/games/'
      path: '/fullscreen/games'
      fullPath: '/fullscreen/games'
      preLoaderRoute: typeof FullscreenLayoutFullscreenGamesIndexLazyRouteImport
      parentRoute: typeof FullscreenLayoutRoute
    }
    '/play/$gameId/_layout/': {
      id: '/play/$gameId/_layout/'
      path: '/'
      fullPath: '/play/$gameId/'
      preLoaderRoute: typeof PlayGameIdLayoutIndexRouteImport
      parentRoute: typeof PlayGameIdLayoutRoute
    }
    '/play/$gameId/_layout/frame': {
      id: '/play/$gameId/_layout/frame'
      path: '/frame'
      fullPath: '/play/$gameId/frame'
      preLoaderRoute: typeof PlayGameIdLayoutFrameLazyRouteImport
      parentRoute: typeof PlayGameIdLayoutRoute
    }
    '/_fullscreenLayout/fullscreen/games/$gameId': {
      id: '/_fullscreenLayout/fullscreen/games/$gameId'
      path: '/fullscreen/games/$gameId'
      fullPath: '/fullscreen/games/$gameId'
      preLoaderRoute: typeof FullscreenLayoutFullscreenGamesGameIdLazyRouteImport
      parentRoute: typeof FullscreenLayoutRoute
    }
    '/(windowed)/_layout/games/$gameId/': {
      id: '/(windowed)/_layout/games/$gameId/'
      path: '/games/$gameId'
      fullPath: '/games/$gameId'
      preLoaderRoute: typeof windowedLayoutGamesGameIdIndexRouteImport
      parentRoute: typeof windowedLayoutRoute
    }
  }
}

interface FullscreenLayoutRouteChildren {
  FullscreenLayoutFullscreenIndexLazyRoute: typeof FullscreenLayoutFullscreenIndexLazyRoute
  FullscreenLayoutFullscreenGamesGameIdLazyRoute: typeof FullscreenLayoutFullscreenGamesGameIdLazyRoute
  FullscreenLayoutFullscreenGamesIndexLazyRoute: typeof FullscreenLayoutFullscreenGamesIndexLazyRoute
}

const FullscreenLayoutRouteChildren: FullscreenLayoutRouteChildren = {
  FullscreenLayoutFullscreenIndexLazyRoute:
    FullscreenLayoutFullscreenIndexLazyRoute,
  FullscreenLayoutFullscreenGamesGameIdLazyRoute:
    FullscreenLayoutFullscreenGamesGameIdLazyRoute,
  FullscreenLayoutFullscreenGamesIndexLazyRoute:
    FullscreenLayoutFullscreenGamesIndexLazyRoute,
}

const FullscreenLayoutRouteWithChildren =
  FullscreenLayoutRoute._addFileChildren(FullscreenLayoutRouteChildren)

interface windowedLayoutRouteChildren {
  windowedLayoutHomeLazyRoute: typeof windowedLayoutHomeLazyRoute
  windowedLayoutGamesGameIdIndexRoute: typeof windowedLayoutGamesGameIdIndexRoute
}

const windowedLayoutRouteChildren: windowedLayoutRouteChildren = {
  windowedLayoutHomeLazyRoute: windowedLayoutHomeLazyRoute,
  windowedLayoutGamesGameIdIndexRoute: windowedLayoutGamesGameIdIndexRoute,
}

const windowedLayoutRouteWithChildren = windowedLayoutRoute._addFileChildren(
  windowedLayoutRouteChildren,
)

interface windowedRouteChildren {
  windowedLayoutRoute: typeof windowedLayoutRouteWithChildren
}

const windowedRouteChildren: windowedRouteChildren = {
  windowedLayoutRoute: windowedLayoutRouteWithChildren,
}

const windowedRouteWithChildren = windowedRoute._addFileChildren(
  windowedRouteChildren,
)

interface PlayGameIdLayoutRouteChildren {
  PlayGameIdLayoutFrameLazyRoute: typeof PlayGameIdLayoutFrameLazyRoute
  PlayGameIdLayoutIndexRoute: typeof PlayGameIdLayoutIndexRoute
}

const PlayGameIdLayoutRouteChildren: PlayGameIdLayoutRouteChildren = {
  PlayGameIdLayoutFrameLazyRoute: PlayGameIdLayoutFrameLazyRoute,
  PlayGameIdLayoutIndexRoute: PlayGameIdLayoutIndexRoute,
}

const PlayGameIdLayoutRouteWithChildren =
  PlayGameIdLayoutRoute._addFileChildren(PlayGameIdLayoutRouteChildren)

interface PlayGameIdRouteChildren {
  PlayGameIdLayoutRoute: typeof PlayGameIdLayoutRouteWithChildren
}

const PlayGameIdRouteChildren: PlayGameIdRouteChildren = {
  PlayGameIdLayoutRoute: PlayGameIdLayoutRouteWithChildren,
}

const PlayGameIdRouteWithChildren = PlayGameIdRoute._addFileChildren(
  PlayGameIdRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FullscreenLayoutRoute: FullscreenLayoutRouteWithChildren,
  windowedRoute: windowedRouteWithChildren,
  PlayGameIdRoute: PlayGameIdRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
