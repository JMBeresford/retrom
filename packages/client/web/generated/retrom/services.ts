// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.27.1
// source: services.proto

/* eslint-disable */
import { type CallContext, type CallOptions } from "nice-grpc-common";
import _m0 from "protobufjs/minimal";
import {
  DefaultEmulatorProfile,
  Emulator,
  EmulatorProfile,
  NewEmulator,
  NewEmulatorProfile,
  UpdatedDefaultEmulatorProfile,
  UpdatedEmulator,
  UpdatedEmulatorProfile,
} from "./models/emulators";
import { GameFile } from "./models/game-files";
import { Game } from "./models/games";
import {
  GameGenre,
  GameMetadata,
  NewGameMetadata,
  NewPlatformMetadata,
  PlatformMetadata,
  UpdatedGameMetadata,
  UpdatedPlatformMetadata,
} from "./models/metadata";
import { Platform } from "./models/platforms";
import {
  IgdbFields,
  IgdbFilters,
  IgdbGameSearchQuery,
  IgdbPagination,
  IgdbPlatformSearchQuery,
  IgdbSearch,
} from "./providers/igdb";

export const protobufPackage = "retrom";

export interface UpdateLibraryRequest {
}

export interface UpdateLibraryResponse {
  platformsPopulated: Platform[];
  gamesPopulated: Game[];
  gameFilesPopulated: GameFile[];
}

export interface UpdateLibraryMetadataRequest {
  overwrite?: boolean | undefined;
}

export interface UpdateLibraryMetadataResponse {
  gameMetadataProgress?: UpdateLibraryMetadataResponse_GameMetadataProgress | undefined;
  platformMetadataProgress?: UpdateLibraryMetadataResponse_PlatformMetadataProgress | undefined;
}

export interface UpdateLibraryMetadataResponse_GameMetadataProgress {
  /** map of game_id to metadata */
  gameIdsUpdated: number[];
  gameIdsFailed: number[];
  totalGames: number;
}

export interface UpdateLibraryMetadataResponse_PlatformMetadataProgress {
  /** map of platform_id to metadata */
  platformIdsUpdated: number[];
  platformIdsFailed: number[];
  totalPlatforms: number;
}

export interface GetPlatformsRequest {
  ids: number[];
  withMetadata?: boolean | undefined;
}

export interface GetPlatformsResponse {
  platforms: Platform[];
  metadata: PlatformMetadata[];
}

export interface GetGamesRequest {
  platformIds: number[];
  ids: number[];
  withMetadata?: boolean | undefined;
  withFiles?: boolean | undefined;
}

export interface GetGamesResponse {
  games: Game[];
  metadata: GameMetadata[];
  gameFiles: GameFile[];
}

export interface GetGameMetadataRequest {
  gameIds: number[];
}

export interface GetGameMetadataResponse {
  metadata: GameMetadata[];
  similarGames: Map<number, GetGameMetadataResponse_SimilarGames>;
  genres: Map<number, GetGameMetadataResponse_GameGenres>;
}

export interface GetGameMetadataResponse_GameGenres {
  value: GameGenre[];
}

export interface GetGameMetadataResponse_SimilarGames {
  value: Game[];
}

export interface GetGameMetadataResponse_SimilarGamesEntry {
  key: number;
  value?: GetGameMetadataResponse_SimilarGames | undefined;
}

export interface GetGameMetadataResponse_GenresEntry {
  key: number;
  value?: GetGameMetadataResponse_GameGenres | undefined;
}

export interface GetPlatformMetadataRequest {
  platformIds: number[];
}

export interface GetPlatformMetadataResponse {
  metadata: PlatformMetadata[];
}

export interface GetIgdbGameSearchResultsRequest {
  query?: IgdbGameSearchQuery | undefined;
}

export interface GetIgdbGameSearchResultsResponse {
  metadata: NewGameMetadata[];
}

export interface UpdateGameMetadataRequest {
  metadata: UpdatedGameMetadata[];
}

export interface UpdateGameMetadataResponse {
  metadataUpdated: GameMetadata[];
}

export interface GetIgdbPlatformSearchResultsRequest {
  query?: IgdbPlatformSearchQuery | undefined;
}

export interface GetIgdbPlatformSearchResultsResponse {
  metadata: NewPlatformMetadata[];
}

export interface UpdatePlatformMetadataRequest {
  metadata: UpdatedPlatformMetadata[];
}

export interface UpdatePlatformMetadataResponse {
  metadataUpdated: PlatformMetadata[];
}

/** Arbitrary search query for IGDB */
export interface GetIgdbSearchRequest {
  searchType: GetIgdbSearchRequest_IgdbSearchType;
  search?: IgdbSearch | undefined;
  pagination?: IgdbPagination | undefined;
  filters?: IgdbFilters | undefined;
  fields?: IgdbFields | undefined;
}

export const GetIgdbSearchRequest_IgdbSearchType = { GAME: 0, PLATFORM: 1, UNRECOGNIZED: -1 } as const;

export type GetIgdbSearchRequest_IgdbSearchType =
  typeof GetIgdbSearchRequest_IgdbSearchType[keyof typeof GetIgdbSearchRequest_IgdbSearchType];

export namespace GetIgdbSearchRequest_IgdbSearchType {
  export type GAME = typeof GetIgdbSearchRequest_IgdbSearchType.GAME;
  export type PLATFORM = typeof GetIgdbSearchRequest_IgdbSearchType.PLATFORM;
  export type UNRECOGNIZED = typeof GetIgdbSearchRequest_IgdbSearchType.UNRECOGNIZED;
}

export interface IgdbSearchGameResponse {
  games: NewGameMetadata[];
}

export interface IgdbSearchPlatformResponse {
  platforms: NewPlatformMetadata[];
}

export interface GetIgdbSearchResponse {
  searchResults?: { $case: "gameMatches"; gameMatches: IgdbSearchGameResponse } | {
    $case: "platformMatches";
    platformMatches: IgdbSearchPlatformResponse;
  } | undefined;
}

export interface DeleteLibraryRequest {
}

export interface DeleteLibraryResponse {
}

export interface DeletePlatformsRequest {
  ids: number[];
}

export interface DeletePlatformsResponse {
}

export interface DeleteGamesRequest {
  ids: number[];
}

export interface DeleteGamesResponse {
}

export interface CreateEmulatorsRequest {
  emulators: NewEmulator[];
}

export interface CreateEmulatorsResponse {
  emulatorsCreated: Emulator[];
}

export interface GetEmulatorsRequest {
  ids: number[];
  supportedPlatformIds: number[];
}

export interface GetEmulatorsResponse {
  emulators: Emulator[];
}

export interface UpdateEmulatorsRequest {
  emulators: UpdatedEmulator[];
}

export interface UpdateEmulatorsResponse {
  emulatorsUpdated: Emulator[];
}

export interface DeleteEmulatorsRequest {
  ids: number[];
}

export interface DeleteEmulatorsResponse {
  emulatorsDeleted: Emulator[];
}

export interface CreateEmulatorProfilesRequest {
  profiles: NewEmulatorProfile[];
}

export interface CreateEmulatorProfilesResponse {
  profilesCreated: EmulatorProfile[];
}

export interface GetEmulatorProfilesRequest {
  ids: number[];
  emulatorIds: number[];
}

export interface GetEmulatorProfilesResponse {
  profiles: EmulatorProfile[];
}

export interface UpdateEmulatorProfilesRequest {
  profiles: UpdatedEmulatorProfile[];
}

export interface UpdateEmulatorProfilesResponse {
  profilesUpdated: EmulatorProfile[];
}

export interface DeleteEmulatorProfilesRequest {
  ids: number[];
}

export interface DeleteEmulatorProfilesResponse {
  profilesDeleted: EmulatorProfile[];
}

export interface GetDefaultEmulatorProfilesRequest {
  platformIds: number[];
}

export interface GetDefaultEmulatorProfilesResponse {
  defaultProfiles: DefaultEmulatorProfile[];
}

export interface UpdateDefaultEmulatorProfilesRequest {
  defaultProfiles: UpdatedDefaultEmulatorProfile[];
}

export interface UpdateDefaultEmulatorProfilesResponse {
  defaultProfilesUpdated: DefaultEmulatorProfile[];
}

export interface DeleteDefaultEmulatorProfilesRequest {
  platformIds: number[];
}

export interface DeleteDefaultEmulatorProfilesResponse {
  defaultProfilesDeleted: DefaultEmulatorProfile[];
}

function createBaseUpdateLibraryRequest(): UpdateLibraryRequest {
  return {};
}

export const UpdateLibraryRequest = {
  encode(_: UpdateLibraryRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateLibraryRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLibraryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateLibraryRequest>): UpdateLibraryRequest {
    return UpdateLibraryRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<UpdateLibraryRequest>): UpdateLibraryRequest {
    const message = createBaseUpdateLibraryRequest();
    return message;
  },
};

function createBaseUpdateLibraryResponse(): UpdateLibraryResponse {
  return { platformsPopulated: [], gamesPopulated: [], gameFilesPopulated: [] };
}

export const UpdateLibraryResponse = {
  encode(message: UpdateLibraryResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.platformsPopulated) {
      Platform.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.gamesPopulated) {
      Game.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.gameFilesPopulated) {
      GameFile.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateLibraryResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLibraryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.platformsPopulated.push(Platform.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gamesPopulated.push(Game.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.gameFilesPopulated.push(GameFile.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateLibraryResponse>): UpdateLibraryResponse {
    return UpdateLibraryResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateLibraryResponse>): UpdateLibraryResponse {
    const message = createBaseUpdateLibraryResponse();
    message.platformsPopulated = object.platformsPopulated?.map((e) => Platform.fromPartial(e)) || [];
    message.gamesPopulated = object.gamesPopulated?.map((e) => Game.fromPartial(e)) || [];
    message.gameFilesPopulated = object.gameFilesPopulated?.map((e) => GameFile.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateLibraryMetadataRequest(): UpdateLibraryMetadataRequest {
  return { overwrite: undefined };
}

export const UpdateLibraryMetadataRequest = {
  encode(message: UpdateLibraryMetadataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.overwrite !== undefined) {
      writer.uint32(8).bool(message.overwrite);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateLibraryMetadataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLibraryMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.overwrite = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateLibraryMetadataRequest>): UpdateLibraryMetadataRequest {
    return UpdateLibraryMetadataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateLibraryMetadataRequest>): UpdateLibraryMetadataRequest {
    const message = createBaseUpdateLibraryMetadataRequest();
    message.overwrite = object.overwrite ?? undefined;
    return message;
  },
};

function createBaseUpdateLibraryMetadataResponse(): UpdateLibraryMetadataResponse {
  return { gameMetadataProgress: undefined, platformMetadataProgress: undefined };
}

export const UpdateLibraryMetadataResponse = {
  encode(message: UpdateLibraryMetadataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.gameMetadataProgress !== undefined) {
      UpdateLibraryMetadataResponse_GameMetadataProgress.encode(message.gameMetadataProgress, writer.uint32(10).fork())
        .ldelim();
    }
    if (message.platformMetadataProgress !== undefined) {
      UpdateLibraryMetadataResponse_PlatformMetadataProgress.encode(
        message.platformMetadataProgress,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateLibraryMetadataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLibraryMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gameMetadataProgress = UpdateLibraryMetadataResponse_GameMetadataProgress.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.platformMetadataProgress = UpdateLibraryMetadataResponse_PlatformMetadataProgress.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateLibraryMetadataResponse>): UpdateLibraryMetadataResponse {
    return UpdateLibraryMetadataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateLibraryMetadataResponse>): UpdateLibraryMetadataResponse {
    const message = createBaseUpdateLibraryMetadataResponse();
    message.gameMetadataProgress = (object.gameMetadataProgress !== undefined && object.gameMetadataProgress !== null)
      ? UpdateLibraryMetadataResponse_GameMetadataProgress.fromPartial(object.gameMetadataProgress)
      : undefined;
    message.platformMetadataProgress =
      (object.platformMetadataProgress !== undefined && object.platformMetadataProgress !== null)
        ? UpdateLibraryMetadataResponse_PlatformMetadataProgress.fromPartial(object.platformMetadataProgress)
        : undefined;
    return message;
  },
};

function createBaseUpdateLibraryMetadataResponse_GameMetadataProgress(): UpdateLibraryMetadataResponse_GameMetadataProgress {
  return { gameIdsUpdated: [], gameIdsFailed: [], totalGames: 0 };
}

export const UpdateLibraryMetadataResponse_GameMetadataProgress = {
  encode(
    message: UpdateLibraryMetadataResponse_GameMetadataProgress,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.gameIdsUpdated) {
      writer.int32(v);
    }
    writer.ldelim();
    writer.uint32(18).fork();
    for (const v of message.gameIdsFailed) {
      writer.int32(v);
    }
    writer.ldelim();
    if (message.totalGames !== 0) {
      writer.uint32(24).uint32(message.totalGames);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateLibraryMetadataResponse_GameMetadataProgress {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLibraryMetadataResponse_GameMetadataProgress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.gameIdsUpdated.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.gameIdsUpdated.push(reader.int32());
            }

            continue;
          }

          break;
        case 2:
          if (tag === 16) {
            message.gameIdsFailed.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.gameIdsFailed.push(reader.int32());
            }

            continue;
          }

          break;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.totalGames = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<UpdateLibraryMetadataResponse_GameMetadataProgress>,
  ): UpdateLibraryMetadataResponse_GameMetadataProgress {
    return UpdateLibraryMetadataResponse_GameMetadataProgress.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<UpdateLibraryMetadataResponse_GameMetadataProgress>,
  ): UpdateLibraryMetadataResponse_GameMetadataProgress {
    const message = createBaseUpdateLibraryMetadataResponse_GameMetadataProgress();
    message.gameIdsUpdated = object.gameIdsUpdated?.map((e) => e) || [];
    message.gameIdsFailed = object.gameIdsFailed?.map((e) => e) || [];
    message.totalGames = object.totalGames ?? 0;
    return message;
  },
};

function createBaseUpdateLibraryMetadataResponse_PlatformMetadataProgress(): UpdateLibraryMetadataResponse_PlatformMetadataProgress {
  return { platformIdsUpdated: [], platformIdsFailed: [], totalPlatforms: 0 };
}

export const UpdateLibraryMetadataResponse_PlatformMetadataProgress = {
  encode(
    message: UpdateLibraryMetadataResponse_PlatformMetadataProgress,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.platformIdsUpdated) {
      writer.int32(v);
    }
    writer.ldelim();
    writer.uint32(18).fork();
    for (const v of message.platformIdsFailed) {
      writer.int32(v);
    }
    writer.ldelim();
    if (message.totalPlatforms !== 0) {
      writer.uint32(24).uint32(message.totalPlatforms);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateLibraryMetadataResponse_PlatformMetadataProgress {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLibraryMetadataResponse_PlatformMetadataProgress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.platformIdsUpdated.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.platformIdsUpdated.push(reader.int32());
            }

            continue;
          }

          break;
        case 2:
          if (tag === 16) {
            message.platformIdsFailed.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.platformIdsFailed.push(reader.int32());
            }

            continue;
          }

          break;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.totalPlatforms = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<UpdateLibraryMetadataResponse_PlatformMetadataProgress>,
  ): UpdateLibraryMetadataResponse_PlatformMetadataProgress {
    return UpdateLibraryMetadataResponse_PlatformMetadataProgress.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<UpdateLibraryMetadataResponse_PlatformMetadataProgress>,
  ): UpdateLibraryMetadataResponse_PlatformMetadataProgress {
    const message = createBaseUpdateLibraryMetadataResponse_PlatformMetadataProgress();
    message.platformIdsUpdated = object.platformIdsUpdated?.map((e) => e) || [];
    message.platformIdsFailed = object.platformIdsFailed?.map((e) => e) || [];
    message.totalPlatforms = object.totalPlatforms ?? 0;
    return message;
  },
};

function createBaseGetPlatformsRequest(): GetPlatformsRequest {
  return { ids: [], withMetadata: undefined };
}

export const GetPlatformsRequest = {
  encode(message: GetPlatformsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.ids) {
      writer.int32(v);
    }
    writer.ldelim();
    if (message.withMetadata !== undefined) {
      writer.uint32(16).bool(message.withMetadata);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPlatformsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPlatformsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.ids.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ids.push(reader.int32());
            }

            continue;
          }

          break;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.withMetadata = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetPlatformsRequest>): GetPlatformsRequest {
    return GetPlatformsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPlatformsRequest>): GetPlatformsRequest {
    const message = createBaseGetPlatformsRequest();
    message.ids = object.ids?.map((e) => e) || [];
    message.withMetadata = object.withMetadata ?? undefined;
    return message;
  },
};

function createBaseGetPlatformsResponse(): GetPlatformsResponse {
  return { platforms: [], metadata: [] };
}

export const GetPlatformsResponse = {
  encode(message: GetPlatformsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.platforms) {
      Platform.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.metadata) {
      PlatformMetadata.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPlatformsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPlatformsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.platforms.push(Platform.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.metadata.push(PlatformMetadata.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetPlatformsResponse>): GetPlatformsResponse {
    return GetPlatformsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPlatformsResponse>): GetPlatformsResponse {
    const message = createBaseGetPlatformsResponse();
    message.platforms = object.platforms?.map((e) => Platform.fromPartial(e)) || [];
    message.metadata = object.metadata?.map((e) => PlatformMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetGamesRequest(): GetGamesRequest {
  return { platformIds: [], ids: [], withMetadata: undefined, withFiles: undefined };
}

export const GetGamesRequest = {
  encode(message: GetGamesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.platformIds) {
      writer.int32(v);
    }
    writer.ldelim();
    writer.uint32(18).fork();
    for (const v of message.ids) {
      writer.int32(v);
    }
    writer.ldelim();
    if (message.withMetadata !== undefined) {
      writer.uint32(24).bool(message.withMetadata);
    }
    if (message.withFiles !== undefined) {
      writer.uint32(32).bool(message.withFiles);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetGamesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGamesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.platformIds.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.platformIds.push(reader.int32());
            }

            continue;
          }

          break;
        case 2:
          if (tag === 16) {
            message.ids.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ids.push(reader.int32());
            }

            continue;
          }

          break;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.withMetadata = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.withFiles = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetGamesRequest>): GetGamesRequest {
    return GetGamesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGamesRequest>): GetGamesRequest {
    const message = createBaseGetGamesRequest();
    message.platformIds = object.platformIds?.map((e) => e) || [];
    message.ids = object.ids?.map((e) => e) || [];
    message.withMetadata = object.withMetadata ?? undefined;
    message.withFiles = object.withFiles ?? undefined;
    return message;
  },
};

function createBaseGetGamesResponse(): GetGamesResponse {
  return { games: [], metadata: [], gameFiles: [] };
}

export const GetGamesResponse = {
  encode(message: GetGamesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.games) {
      Game.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.metadata) {
      GameMetadata.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.gameFiles) {
      GameFile.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetGamesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGamesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.games.push(Game.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.metadata.push(GameMetadata.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.gameFiles.push(GameFile.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetGamesResponse>): GetGamesResponse {
    return GetGamesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGamesResponse>): GetGamesResponse {
    const message = createBaseGetGamesResponse();
    message.games = object.games?.map((e) => Game.fromPartial(e)) || [];
    message.metadata = object.metadata?.map((e) => GameMetadata.fromPartial(e)) || [];
    message.gameFiles = object.gameFiles?.map((e) => GameFile.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetGameMetadataRequest(): GetGameMetadataRequest {
  return { gameIds: [] };
}

export const GetGameMetadataRequest = {
  encode(message: GetGameMetadataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.gameIds) {
      writer.int32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetGameMetadataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGameMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.gameIds.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.gameIds.push(reader.int32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetGameMetadataRequest>): GetGameMetadataRequest {
    return GetGameMetadataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGameMetadataRequest>): GetGameMetadataRequest {
    const message = createBaseGetGameMetadataRequest();
    message.gameIds = object.gameIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetGameMetadataResponse(): GetGameMetadataResponse {
  return { metadata: [], similarGames: new Map(), genres: new Map() };
}

export const GetGameMetadataResponse = {
  encode(message: GetGameMetadataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.metadata) {
      GameMetadata.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    message.similarGames.forEach((value, key) => {
      GetGameMetadataResponse_SimilarGamesEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).ldelim();
    });
    message.genres.forEach((value, key) => {
      GetGameMetadataResponse_GenresEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetGameMetadataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGameMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.metadata.push(GameMetadata.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = GetGameMetadataResponse_SimilarGamesEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.similarGames.set(entry2.key, entry2.value);
          }
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = GetGameMetadataResponse_GenresEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.genres.set(entry3.key, entry3.value);
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetGameMetadataResponse>): GetGameMetadataResponse {
    return GetGameMetadataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGameMetadataResponse>): GetGameMetadataResponse {
    const message = createBaseGetGameMetadataResponse();
    message.metadata = object.metadata?.map((e) => GameMetadata.fromPartial(e)) || [];
    message.similarGames = (() => {
      const m = new Map();
      (object.similarGames as Map<number, GetGameMetadataResponse_SimilarGames> ?? new Map()).forEach((value, key) => {
        if (value !== undefined) {
          m.set(key, GetGameMetadataResponse_SimilarGames.fromPartial(value));
        }
      });
      return m;
    })();
    message.genres = (() => {
      const m = new Map();
      (object.genres as Map<number, GetGameMetadataResponse_GameGenres> ?? new Map()).forEach((value, key) => {
        if (value !== undefined) {
          m.set(key, GetGameMetadataResponse_GameGenres.fromPartial(value));
        }
      });
      return m;
    })();
    return message;
  },
};

function createBaseGetGameMetadataResponse_GameGenres(): GetGameMetadataResponse_GameGenres {
  return { value: [] };
}

export const GetGameMetadataResponse_GameGenres = {
  encode(message: GetGameMetadataResponse_GameGenres, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.value) {
      GameGenre.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetGameMetadataResponse_GameGenres {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGameMetadataResponse_GameGenres();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value.push(GameGenre.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetGameMetadataResponse_GameGenres>): GetGameMetadataResponse_GameGenres {
    return GetGameMetadataResponse_GameGenres.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGameMetadataResponse_GameGenres>): GetGameMetadataResponse_GameGenres {
    const message = createBaseGetGameMetadataResponse_GameGenres();
    message.value = object.value?.map((e) => GameGenre.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetGameMetadataResponse_SimilarGames(): GetGameMetadataResponse_SimilarGames {
  return { value: [] };
}

export const GetGameMetadataResponse_SimilarGames = {
  encode(message: GetGameMetadataResponse_SimilarGames, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.value) {
      Game.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetGameMetadataResponse_SimilarGames {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGameMetadataResponse_SimilarGames();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value.push(Game.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetGameMetadataResponse_SimilarGames>): GetGameMetadataResponse_SimilarGames {
    return GetGameMetadataResponse_SimilarGames.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGameMetadataResponse_SimilarGames>): GetGameMetadataResponse_SimilarGames {
    const message = createBaseGetGameMetadataResponse_SimilarGames();
    message.value = object.value?.map((e) => Game.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetGameMetadataResponse_SimilarGamesEntry(): GetGameMetadataResponse_SimilarGamesEntry {
  return { key: 0, value: undefined };
}

export const GetGameMetadataResponse_SimilarGamesEntry = {
  encode(message: GetGameMetadataResponse_SimilarGamesEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== 0) {
      writer.uint32(8).int32(message.key);
    }
    if (message.value !== undefined) {
      GetGameMetadataResponse_SimilarGames.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetGameMetadataResponse_SimilarGamesEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGameMetadataResponse_SimilarGamesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.key = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = GetGameMetadataResponse_SimilarGames.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetGameMetadataResponse_SimilarGamesEntry>): GetGameMetadataResponse_SimilarGamesEntry {
    return GetGameMetadataResponse_SimilarGamesEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetGameMetadataResponse_SimilarGamesEntry>,
  ): GetGameMetadataResponse_SimilarGamesEntry {
    const message = createBaseGetGameMetadataResponse_SimilarGamesEntry();
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null)
      ? GetGameMetadataResponse_SimilarGames.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseGetGameMetadataResponse_GenresEntry(): GetGameMetadataResponse_GenresEntry {
  return { key: 0, value: undefined };
}

export const GetGameMetadataResponse_GenresEntry = {
  encode(message: GetGameMetadataResponse_GenresEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== 0) {
      writer.uint32(8).int32(message.key);
    }
    if (message.value !== undefined) {
      GetGameMetadataResponse_GameGenres.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetGameMetadataResponse_GenresEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGameMetadataResponse_GenresEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.key = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = GetGameMetadataResponse_GameGenres.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetGameMetadataResponse_GenresEntry>): GetGameMetadataResponse_GenresEntry {
    return GetGameMetadataResponse_GenresEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGameMetadataResponse_GenresEntry>): GetGameMetadataResponse_GenresEntry {
    const message = createBaseGetGameMetadataResponse_GenresEntry();
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null)
      ? GetGameMetadataResponse_GameGenres.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseGetPlatformMetadataRequest(): GetPlatformMetadataRequest {
  return { platformIds: [] };
}

export const GetPlatformMetadataRequest = {
  encode(message: GetPlatformMetadataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.platformIds) {
      writer.int32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPlatformMetadataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPlatformMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.platformIds.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.platformIds.push(reader.int32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetPlatformMetadataRequest>): GetPlatformMetadataRequest {
    return GetPlatformMetadataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPlatformMetadataRequest>): GetPlatformMetadataRequest {
    const message = createBaseGetPlatformMetadataRequest();
    message.platformIds = object.platformIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetPlatformMetadataResponse(): GetPlatformMetadataResponse {
  return { metadata: [] };
}

export const GetPlatformMetadataResponse = {
  encode(message: GetPlatformMetadataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.metadata) {
      PlatformMetadata.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPlatformMetadataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPlatformMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.metadata.push(PlatformMetadata.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetPlatformMetadataResponse>): GetPlatformMetadataResponse {
    return GetPlatformMetadataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPlatformMetadataResponse>): GetPlatformMetadataResponse {
    const message = createBaseGetPlatformMetadataResponse();
    message.metadata = object.metadata?.map((e) => PlatformMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetIgdbGameSearchResultsRequest(): GetIgdbGameSearchResultsRequest {
  return { query: undefined };
}

export const GetIgdbGameSearchResultsRequest = {
  encode(message: GetIgdbGameSearchResultsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      IgdbGameSearchQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetIgdbGameSearchResultsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIgdbGameSearchResultsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = IgdbGameSearchQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetIgdbGameSearchResultsRequest>): GetIgdbGameSearchResultsRequest {
    return GetIgdbGameSearchResultsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetIgdbGameSearchResultsRequest>): GetIgdbGameSearchResultsRequest {
    const message = createBaseGetIgdbGameSearchResultsRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? IgdbGameSearchQuery.fromPartial(object.query)
      : undefined;
    return message;
  },
};

function createBaseGetIgdbGameSearchResultsResponse(): GetIgdbGameSearchResultsResponse {
  return { metadata: [] };
}

export const GetIgdbGameSearchResultsResponse = {
  encode(message: GetIgdbGameSearchResultsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.metadata) {
      NewGameMetadata.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetIgdbGameSearchResultsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIgdbGameSearchResultsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.metadata.push(NewGameMetadata.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetIgdbGameSearchResultsResponse>): GetIgdbGameSearchResultsResponse {
    return GetIgdbGameSearchResultsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetIgdbGameSearchResultsResponse>): GetIgdbGameSearchResultsResponse {
    const message = createBaseGetIgdbGameSearchResultsResponse();
    message.metadata = object.metadata?.map((e) => NewGameMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateGameMetadataRequest(): UpdateGameMetadataRequest {
  return { metadata: [] };
}

export const UpdateGameMetadataRequest = {
  encode(message: UpdateGameMetadataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.metadata) {
      UpdatedGameMetadata.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGameMetadataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGameMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.metadata.push(UpdatedGameMetadata.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateGameMetadataRequest>): UpdateGameMetadataRequest {
    return UpdateGameMetadataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGameMetadataRequest>): UpdateGameMetadataRequest {
    const message = createBaseUpdateGameMetadataRequest();
    message.metadata = object.metadata?.map((e) => UpdatedGameMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateGameMetadataResponse(): UpdateGameMetadataResponse {
  return { metadataUpdated: [] };
}

export const UpdateGameMetadataResponse = {
  encode(message: UpdateGameMetadataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.metadataUpdated) {
      GameMetadata.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGameMetadataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGameMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.metadataUpdated.push(GameMetadata.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateGameMetadataResponse>): UpdateGameMetadataResponse {
    return UpdateGameMetadataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGameMetadataResponse>): UpdateGameMetadataResponse {
    const message = createBaseUpdateGameMetadataResponse();
    message.metadataUpdated = object.metadataUpdated?.map((e) => GameMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetIgdbPlatformSearchResultsRequest(): GetIgdbPlatformSearchResultsRequest {
  return { query: undefined };
}

export const GetIgdbPlatformSearchResultsRequest = {
  encode(message: GetIgdbPlatformSearchResultsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      IgdbPlatformSearchQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetIgdbPlatformSearchResultsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIgdbPlatformSearchResultsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = IgdbPlatformSearchQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetIgdbPlatformSearchResultsRequest>): GetIgdbPlatformSearchResultsRequest {
    return GetIgdbPlatformSearchResultsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetIgdbPlatformSearchResultsRequest>): GetIgdbPlatformSearchResultsRequest {
    const message = createBaseGetIgdbPlatformSearchResultsRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? IgdbPlatformSearchQuery.fromPartial(object.query)
      : undefined;
    return message;
  },
};

function createBaseGetIgdbPlatformSearchResultsResponse(): GetIgdbPlatformSearchResultsResponse {
  return { metadata: [] };
}

export const GetIgdbPlatformSearchResultsResponse = {
  encode(message: GetIgdbPlatformSearchResultsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.metadata) {
      NewPlatformMetadata.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetIgdbPlatformSearchResultsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIgdbPlatformSearchResultsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.metadata.push(NewPlatformMetadata.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetIgdbPlatformSearchResultsResponse>): GetIgdbPlatformSearchResultsResponse {
    return GetIgdbPlatformSearchResultsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetIgdbPlatformSearchResultsResponse>): GetIgdbPlatformSearchResultsResponse {
    const message = createBaseGetIgdbPlatformSearchResultsResponse();
    message.metadata = object.metadata?.map((e) => NewPlatformMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdatePlatformMetadataRequest(): UpdatePlatformMetadataRequest {
  return { metadata: [] };
}

export const UpdatePlatformMetadataRequest = {
  encode(message: UpdatePlatformMetadataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.metadata) {
      UpdatedPlatformMetadata.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdatePlatformMetadataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePlatformMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.metadata.push(UpdatedPlatformMetadata.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdatePlatformMetadataRequest>): UpdatePlatformMetadataRequest {
    return UpdatePlatformMetadataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatePlatformMetadataRequest>): UpdatePlatformMetadataRequest {
    const message = createBaseUpdatePlatformMetadataRequest();
    message.metadata = object.metadata?.map((e) => UpdatedPlatformMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdatePlatformMetadataResponse(): UpdatePlatformMetadataResponse {
  return { metadataUpdated: [] };
}

export const UpdatePlatformMetadataResponse = {
  encode(message: UpdatePlatformMetadataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.metadataUpdated) {
      PlatformMetadata.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdatePlatformMetadataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePlatformMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.metadataUpdated.push(PlatformMetadata.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdatePlatformMetadataResponse>): UpdatePlatformMetadataResponse {
    return UpdatePlatformMetadataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatePlatformMetadataResponse>): UpdatePlatformMetadataResponse {
    const message = createBaseUpdatePlatformMetadataResponse();
    message.metadataUpdated = object.metadataUpdated?.map((e) => PlatformMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetIgdbSearchRequest(): GetIgdbSearchRequest {
  return { searchType: 0, search: undefined, pagination: undefined, filters: undefined, fields: undefined };
}

export const GetIgdbSearchRequest = {
  encode(message: GetIgdbSearchRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.searchType !== 0) {
      writer.uint32(8).int32(message.searchType);
    }
    if (message.search !== undefined) {
      IgdbSearch.encode(message.search, writer.uint32(18).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      IgdbPagination.encode(message.pagination, writer.uint32(26).fork()).ldelim();
    }
    if (message.filters !== undefined) {
      IgdbFilters.encode(message.filters, writer.uint32(34).fork()).ldelim();
    }
    if (message.fields !== undefined) {
      IgdbFields.encode(message.fields, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetIgdbSearchRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIgdbSearchRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.searchType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.search = IgdbSearch.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pagination = IgdbPagination.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filters = IgdbFilters.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.fields = IgdbFields.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetIgdbSearchRequest>): GetIgdbSearchRequest {
    return GetIgdbSearchRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetIgdbSearchRequest>): GetIgdbSearchRequest {
    const message = createBaseGetIgdbSearchRequest();
    message.searchType = object.searchType ?? 0;
    message.search = (object.search !== undefined && object.search !== null)
      ? IgdbSearch.fromPartial(object.search)
      : undefined;
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? IgdbPagination.fromPartial(object.pagination)
      : undefined;
    message.filters = (object.filters !== undefined && object.filters !== null)
      ? IgdbFilters.fromPartial(object.filters)
      : undefined;
    message.fields = (object.fields !== undefined && object.fields !== null)
      ? IgdbFields.fromPartial(object.fields)
      : undefined;
    return message;
  },
};

function createBaseIgdbSearchGameResponse(): IgdbSearchGameResponse {
  return { games: [] };
}

export const IgdbSearchGameResponse = {
  encode(message: IgdbSearchGameResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.games) {
      NewGameMetadata.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IgdbSearchGameResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIgdbSearchGameResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.games.push(NewGameMetadata.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<IgdbSearchGameResponse>): IgdbSearchGameResponse {
    return IgdbSearchGameResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IgdbSearchGameResponse>): IgdbSearchGameResponse {
    const message = createBaseIgdbSearchGameResponse();
    message.games = object.games?.map((e) => NewGameMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseIgdbSearchPlatformResponse(): IgdbSearchPlatformResponse {
  return { platforms: [] };
}

export const IgdbSearchPlatformResponse = {
  encode(message: IgdbSearchPlatformResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.platforms) {
      NewPlatformMetadata.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IgdbSearchPlatformResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIgdbSearchPlatformResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.platforms.push(NewPlatformMetadata.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<IgdbSearchPlatformResponse>): IgdbSearchPlatformResponse {
    return IgdbSearchPlatformResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IgdbSearchPlatformResponse>): IgdbSearchPlatformResponse {
    const message = createBaseIgdbSearchPlatformResponse();
    message.platforms = object.platforms?.map((e) => NewPlatformMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetIgdbSearchResponse(): GetIgdbSearchResponse {
  return { searchResults: undefined };
}

export const GetIgdbSearchResponse = {
  encode(message: GetIgdbSearchResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    switch (message.searchResults?.$case) {
      case "gameMatches":
        IgdbSearchGameResponse.encode(message.searchResults.gameMatches, writer.uint32(10).fork()).ldelim();
        break;
      case "platformMatches":
        IgdbSearchPlatformResponse.encode(message.searchResults.platformMatches, writer.uint32(18).fork()).ldelim();
        break;
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetIgdbSearchResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIgdbSearchResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.searchResults = {
            $case: "gameMatches",
            gameMatches: IgdbSearchGameResponse.decode(reader, reader.uint32()),
          };
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.searchResults = {
            $case: "platformMatches",
            platformMatches: IgdbSearchPlatformResponse.decode(reader, reader.uint32()),
          };
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetIgdbSearchResponse>): GetIgdbSearchResponse {
    return GetIgdbSearchResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetIgdbSearchResponse>): GetIgdbSearchResponse {
    const message = createBaseGetIgdbSearchResponse();
    if (
      object.searchResults?.$case === "gameMatches" &&
      object.searchResults?.gameMatches !== undefined &&
      object.searchResults?.gameMatches !== null
    ) {
      message.searchResults = {
        $case: "gameMatches",
        gameMatches: IgdbSearchGameResponse.fromPartial(object.searchResults.gameMatches),
      };
    }
    if (
      object.searchResults?.$case === "platformMatches" &&
      object.searchResults?.platformMatches !== undefined &&
      object.searchResults?.platformMatches !== null
    ) {
      message.searchResults = {
        $case: "platformMatches",
        platformMatches: IgdbSearchPlatformResponse.fromPartial(object.searchResults.platformMatches),
      };
    }
    return message;
  },
};

function createBaseDeleteLibraryRequest(): DeleteLibraryRequest {
  return {};
}

export const DeleteLibraryRequest = {
  encode(_: DeleteLibraryRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteLibraryRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteLibraryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeleteLibraryRequest>): DeleteLibraryRequest {
    return DeleteLibraryRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeleteLibraryRequest>): DeleteLibraryRequest {
    const message = createBaseDeleteLibraryRequest();
    return message;
  },
};

function createBaseDeleteLibraryResponse(): DeleteLibraryResponse {
  return {};
}

export const DeleteLibraryResponse = {
  encode(_: DeleteLibraryResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteLibraryResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteLibraryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeleteLibraryResponse>): DeleteLibraryResponse {
    return DeleteLibraryResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeleteLibraryResponse>): DeleteLibraryResponse {
    const message = createBaseDeleteLibraryResponse();
    return message;
  },
};

function createBaseDeletePlatformsRequest(): DeletePlatformsRequest {
  return { ids: [] };
}

export const DeletePlatformsRequest = {
  encode(message: DeletePlatformsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.ids) {
      writer.int32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeletePlatformsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePlatformsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.ids.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ids.push(reader.int32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeletePlatformsRequest>): DeletePlatformsRequest {
    return DeletePlatformsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeletePlatformsRequest>): DeletePlatformsRequest {
    const message = createBaseDeletePlatformsRequest();
    message.ids = object.ids?.map((e) => e) || [];
    return message;
  },
};

function createBaseDeletePlatformsResponse(): DeletePlatformsResponse {
  return {};
}

export const DeletePlatformsResponse = {
  encode(_: DeletePlatformsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeletePlatformsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePlatformsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeletePlatformsResponse>): DeletePlatformsResponse {
    return DeletePlatformsResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeletePlatformsResponse>): DeletePlatformsResponse {
    const message = createBaseDeletePlatformsResponse();
    return message;
  },
};

function createBaseDeleteGamesRequest(): DeleteGamesRequest {
  return { ids: [] };
}

export const DeleteGamesRequest = {
  encode(message: DeleteGamesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.ids) {
      writer.int32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteGamesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteGamesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.ids.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ids.push(reader.int32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeleteGamesRequest>): DeleteGamesRequest {
    return DeleteGamesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteGamesRequest>): DeleteGamesRequest {
    const message = createBaseDeleteGamesRequest();
    message.ids = object.ids?.map((e) => e) || [];
    return message;
  },
};

function createBaseDeleteGamesResponse(): DeleteGamesResponse {
  return {};
}

export const DeleteGamesResponse = {
  encode(_: DeleteGamesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteGamesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteGamesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeleteGamesResponse>): DeleteGamesResponse {
    return DeleteGamesResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeleteGamesResponse>): DeleteGamesResponse {
    const message = createBaseDeleteGamesResponse();
    return message;
  },
};

function createBaseCreateEmulatorsRequest(): CreateEmulatorsRequest {
  return { emulators: [] };
}

export const CreateEmulatorsRequest = {
  encode(message: CreateEmulatorsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.emulators) {
      NewEmulator.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateEmulatorsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEmulatorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.emulators.push(NewEmulator.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CreateEmulatorsRequest>): CreateEmulatorsRequest {
    return CreateEmulatorsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEmulatorsRequest>): CreateEmulatorsRequest {
    const message = createBaseCreateEmulatorsRequest();
    message.emulators = object.emulators?.map((e) => NewEmulator.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateEmulatorsResponse(): CreateEmulatorsResponse {
  return { emulatorsCreated: [] };
}

export const CreateEmulatorsResponse = {
  encode(message: CreateEmulatorsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.emulatorsCreated) {
      Emulator.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateEmulatorsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEmulatorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.emulatorsCreated.push(Emulator.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CreateEmulatorsResponse>): CreateEmulatorsResponse {
    return CreateEmulatorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEmulatorsResponse>): CreateEmulatorsResponse {
    const message = createBaseCreateEmulatorsResponse();
    message.emulatorsCreated = object.emulatorsCreated?.map((e) => Emulator.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetEmulatorsRequest(): GetEmulatorsRequest {
  return { ids: [], supportedPlatformIds: [] };
}

export const GetEmulatorsRequest = {
  encode(message: GetEmulatorsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.ids) {
      writer.int32(v);
    }
    writer.ldelim();
    writer.uint32(18).fork();
    for (const v of message.supportedPlatformIds) {
      writer.int32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetEmulatorsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEmulatorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.ids.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ids.push(reader.int32());
            }

            continue;
          }

          break;
        case 2:
          if (tag === 16) {
            message.supportedPlatformIds.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.supportedPlatformIds.push(reader.int32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetEmulatorsRequest>): GetEmulatorsRequest {
    return GetEmulatorsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEmulatorsRequest>): GetEmulatorsRequest {
    const message = createBaseGetEmulatorsRequest();
    message.ids = object.ids?.map((e) => e) || [];
    message.supportedPlatformIds = object.supportedPlatformIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetEmulatorsResponse(): GetEmulatorsResponse {
  return { emulators: [] };
}

export const GetEmulatorsResponse = {
  encode(message: GetEmulatorsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.emulators) {
      Emulator.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetEmulatorsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEmulatorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.emulators.push(Emulator.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetEmulatorsResponse>): GetEmulatorsResponse {
    return GetEmulatorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEmulatorsResponse>): GetEmulatorsResponse {
    const message = createBaseGetEmulatorsResponse();
    message.emulators = object.emulators?.map((e) => Emulator.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateEmulatorsRequest(): UpdateEmulatorsRequest {
  return { emulators: [] };
}

export const UpdateEmulatorsRequest = {
  encode(message: UpdateEmulatorsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.emulators) {
      UpdatedEmulator.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateEmulatorsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEmulatorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.emulators.push(UpdatedEmulator.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateEmulatorsRequest>): UpdateEmulatorsRequest {
    return UpdateEmulatorsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateEmulatorsRequest>): UpdateEmulatorsRequest {
    const message = createBaseUpdateEmulatorsRequest();
    message.emulators = object.emulators?.map((e) => UpdatedEmulator.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateEmulatorsResponse(): UpdateEmulatorsResponse {
  return { emulatorsUpdated: [] };
}

export const UpdateEmulatorsResponse = {
  encode(message: UpdateEmulatorsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.emulatorsUpdated) {
      Emulator.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateEmulatorsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEmulatorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.emulatorsUpdated.push(Emulator.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateEmulatorsResponse>): UpdateEmulatorsResponse {
    return UpdateEmulatorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateEmulatorsResponse>): UpdateEmulatorsResponse {
    const message = createBaseUpdateEmulatorsResponse();
    message.emulatorsUpdated = object.emulatorsUpdated?.map((e) => Emulator.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDeleteEmulatorsRequest(): DeleteEmulatorsRequest {
  return { ids: [] };
}

export const DeleteEmulatorsRequest = {
  encode(message: DeleteEmulatorsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.ids) {
      writer.int32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteEmulatorsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteEmulatorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.ids.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ids.push(reader.int32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeleteEmulatorsRequest>): DeleteEmulatorsRequest {
    return DeleteEmulatorsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteEmulatorsRequest>): DeleteEmulatorsRequest {
    const message = createBaseDeleteEmulatorsRequest();
    message.ids = object.ids?.map((e) => e) || [];
    return message;
  },
};

function createBaseDeleteEmulatorsResponse(): DeleteEmulatorsResponse {
  return { emulatorsDeleted: [] };
}

export const DeleteEmulatorsResponse = {
  encode(message: DeleteEmulatorsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.emulatorsDeleted) {
      Emulator.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteEmulatorsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteEmulatorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.emulatorsDeleted.push(Emulator.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeleteEmulatorsResponse>): DeleteEmulatorsResponse {
    return DeleteEmulatorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteEmulatorsResponse>): DeleteEmulatorsResponse {
    const message = createBaseDeleteEmulatorsResponse();
    message.emulatorsDeleted = object.emulatorsDeleted?.map((e) => Emulator.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateEmulatorProfilesRequest(): CreateEmulatorProfilesRequest {
  return { profiles: [] };
}

export const CreateEmulatorProfilesRequest = {
  encode(message: CreateEmulatorProfilesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.profiles) {
      NewEmulatorProfile.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateEmulatorProfilesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEmulatorProfilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.profiles.push(NewEmulatorProfile.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CreateEmulatorProfilesRequest>): CreateEmulatorProfilesRequest {
    return CreateEmulatorProfilesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEmulatorProfilesRequest>): CreateEmulatorProfilesRequest {
    const message = createBaseCreateEmulatorProfilesRequest();
    message.profiles = object.profiles?.map((e) => NewEmulatorProfile.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateEmulatorProfilesResponse(): CreateEmulatorProfilesResponse {
  return { profilesCreated: [] };
}

export const CreateEmulatorProfilesResponse = {
  encode(message: CreateEmulatorProfilesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.profilesCreated) {
      EmulatorProfile.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateEmulatorProfilesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEmulatorProfilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.profilesCreated.push(EmulatorProfile.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CreateEmulatorProfilesResponse>): CreateEmulatorProfilesResponse {
    return CreateEmulatorProfilesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEmulatorProfilesResponse>): CreateEmulatorProfilesResponse {
    const message = createBaseCreateEmulatorProfilesResponse();
    message.profilesCreated = object.profilesCreated?.map((e) => EmulatorProfile.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetEmulatorProfilesRequest(): GetEmulatorProfilesRequest {
  return { ids: [], emulatorIds: [] };
}

export const GetEmulatorProfilesRequest = {
  encode(message: GetEmulatorProfilesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.ids) {
      writer.int32(v);
    }
    writer.ldelim();
    writer.uint32(18).fork();
    for (const v of message.emulatorIds) {
      writer.int32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetEmulatorProfilesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEmulatorProfilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.ids.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ids.push(reader.int32());
            }

            continue;
          }

          break;
        case 2:
          if (tag === 16) {
            message.emulatorIds.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.emulatorIds.push(reader.int32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetEmulatorProfilesRequest>): GetEmulatorProfilesRequest {
    return GetEmulatorProfilesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEmulatorProfilesRequest>): GetEmulatorProfilesRequest {
    const message = createBaseGetEmulatorProfilesRequest();
    message.ids = object.ids?.map((e) => e) || [];
    message.emulatorIds = object.emulatorIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetEmulatorProfilesResponse(): GetEmulatorProfilesResponse {
  return { profiles: [] };
}

export const GetEmulatorProfilesResponse = {
  encode(message: GetEmulatorProfilesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.profiles) {
      EmulatorProfile.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetEmulatorProfilesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEmulatorProfilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.profiles.push(EmulatorProfile.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetEmulatorProfilesResponse>): GetEmulatorProfilesResponse {
    return GetEmulatorProfilesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEmulatorProfilesResponse>): GetEmulatorProfilesResponse {
    const message = createBaseGetEmulatorProfilesResponse();
    message.profiles = object.profiles?.map((e) => EmulatorProfile.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateEmulatorProfilesRequest(): UpdateEmulatorProfilesRequest {
  return { profiles: [] };
}

export const UpdateEmulatorProfilesRequest = {
  encode(message: UpdateEmulatorProfilesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.profiles) {
      UpdatedEmulatorProfile.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateEmulatorProfilesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEmulatorProfilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.profiles.push(UpdatedEmulatorProfile.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateEmulatorProfilesRequest>): UpdateEmulatorProfilesRequest {
    return UpdateEmulatorProfilesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateEmulatorProfilesRequest>): UpdateEmulatorProfilesRequest {
    const message = createBaseUpdateEmulatorProfilesRequest();
    message.profiles = object.profiles?.map((e) => UpdatedEmulatorProfile.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateEmulatorProfilesResponse(): UpdateEmulatorProfilesResponse {
  return { profilesUpdated: [] };
}

export const UpdateEmulatorProfilesResponse = {
  encode(message: UpdateEmulatorProfilesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.profilesUpdated) {
      EmulatorProfile.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateEmulatorProfilesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEmulatorProfilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.profilesUpdated.push(EmulatorProfile.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateEmulatorProfilesResponse>): UpdateEmulatorProfilesResponse {
    return UpdateEmulatorProfilesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateEmulatorProfilesResponse>): UpdateEmulatorProfilesResponse {
    const message = createBaseUpdateEmulatorProfilesResponse();
    message.profilesUpdated = object.profilesUpdated?.map((e) => EmulatorProfile.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDeleteEmulatorProfilesRequest(): DeleteEmulatorProfilesRequest {
  return { ids: [] };
}

export const DeleteEmulatorProfilesRequest = {
  encode(message: DeleteEmulatorProfilesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.ids) {
      writer.int32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteEmulatorProfilesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteEmulatorProfilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.ids.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ids.push(reader.int32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeleteEmulatorProfilesRequest>): DeleteEmulatorProfilesRequest {
    return DeleteEmulatorProfilesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteEmulatorProfilesRequest>): DeleteEmulatorProfilesRequest {
    const message = createBaseDeleteEmulatorProfilesRequest();
    message.ids = object.ids?.map((e) => e) || [];
    return message;
  },
};

function createBaseDeleteEmulatorProfilesResponse(): DeleteEmulatorProfilesResponse {
  return { profilesDeleted: [] };
}

export const DeleteEmulatorProfilesResponse = {
  encode(message: DeleteEmulatorProfilesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.profilesDeleted) {
      EmulatorProfile.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteEmulatorProfilesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteEmulatorProfilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.profilesDeleted.push(EmulatorProfile.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeleteEmulatorProfilesResponse>): DeleteEmulatorProfilesResponse {
    return DeleteEmulatorProfilesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteEmulatorProfilesResponse>): DeleteEmulatorProfilesResponse {
    const message = createBaseDeleteEmulatorProfilesResponse();
    message.profilesDeleted = object.profilesDeleted?.map((e) => EmulatorProfile.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetDefaultEmulatorProfilesRequest(): GetDefaultEmulatorProfilesRequest {
  return { platformIds: [] };
}

export const GetDefaultEmulatorProfilesRequest = {
  encode(message: GetDefaultEmulatorProfilesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.platformIds) {
      writer.int32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultEmulatorProfilesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultEmulatorProfilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.platformIds.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.platformIds.push(reader.int32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultEmulatorProfilesRequest>): GetDefaultEmulatorProfilesRequest {
    return GetDefaultEmulatorProfilesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultEmulatorProfilesRequest>): GetDefaultEmulatorProfilesRequest {
    const message = createBaseGetDefaultEmulatorProfilesRequest();
    message.platformIds = object.platformIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetDefaultEmulatorProfilesResponse(): GetDefaultEmulatorProfilesResponse {
  return { defaultProfiles: [] };
}

export const GetDefaultEmulatorProfilesResponse = {
  encode(message: GetDefaultEmulatorProfilesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.defaultProfiles) {
      DefaultEmulatorProfile.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultEmulatorProfilesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultEmulatorProfilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.defaultProfiles.push(DefaultEmulatorProfile.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultEmulatorProfilesResponse>): GetDefaultEmulatorProfilesResponse {
    return GetDefaultEmulatorProfilesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultEmulatorProfilesResponse>): GetDefaultEmulatorProfilesResponse {
    const message = createBaseGetDefaultEmulatorProfilesResponse();
    message.defaultProfiles = object.defaultProfiles?.map((e) => DefaultEmulatorProfile.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateDefaultEmulatorProfilesRequest(): UpdateDefaultEmulatorProfilesRequest {
  return { defaultProfiles: [] };
}

export const UpdateDefaultEmulatorProfilesRequest = {
  encode(message: UpdateDefaultEmulatorProfilesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.defaultProfiles) {
      UpdatedDefaultEmulatorProfile.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateDefaultEmulatorProfilesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDefaultEmulatorProfilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.defaultProfiles.push(UpdatedDefaultEmulatorProfile.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateDefaultEmulatorProfilesRequest>): UpdateDefaultEmulatorProfilesRequest {
    return UpdateDefaultEmulatorProfilesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDefaultEmulatorProfilesRequest>): UpdateDefaultEmulatorProfilesRequest {
    const message = createBaseUpdateDefaultEmulatorProfilesRequest();
    message.defaultProfiles = object.defaultProfiles?.map((e) => UpdatedDefaultEmulatorProfile.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateDefaultEmulatorProfilesResponse(): UpdateDefaultEmulatorProfilesResponse {
  return { defaultProfilesUpdated: [] };
}

export const UpdateDefaultEmulatorProfilesResponse = {
  encode(message: UpdateDefaultEmulatorProfilesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.defaultProfilesUpdated) {
      DefaultEmulatorProfile.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateDefaultEmulatorProfilesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDefaultEmulatorProfilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.defaultProfilesUpdated.push(DefaultEmulatorProfile.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateDefaultEmulatorProfilesResponse>): UpdateDefaultEmulatorProfilesResponse {
    return UpdateDefaultEmulatorProfilesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDefaultEmulatorProfilesResponse>): UpdateDefaultEmulatorProfilesResponse {
    const message = createBaseUpdateDefaultEmulatorProfilesResponse();
    message.defaultProfilesUpdated = object.defaultProfilesUpdated?.map((e) => DefaultEmulatorProfile.fromPartial(e)) ||
      [];
    return message;
  },
};

function createBaseDeleteDefaultEmulatorProfilesRequest(): DeleteDefaultEmulatorProfilesRequest {
  return { platformIds: [] };
}

export const DeleteDefaultEmulatorProfilesRequest = {
  encode(message: DeleteDefaultEmulatorProfilesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.platformIds) {
      writer.int32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteDefaultEmulatorProfilesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDefaultEmulatorProfilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.platformIds.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.platformIds.push(reader.int32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeleteDefaultEmulatorProfilesRequest>): DeleteDefaultEmulatorProfilesRequest {
    return DeleteDefaultEmulatorProfilesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDefaultEmulatorProfilesRequest>): DeleteDefaultEmulatorProfilesRequest {
    const message = createBaseDeleteDefaultEmulatorProfilesRequest();
    message.platformIds = object.platformIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseDeleteDefaultEmulatorProfilesResponse(): DeleteDefaultEmulatorProfilesResponse {
  return { defaultProfilesDeleted: [] };
}

export const DeleteDefaultEmulatorProfilesResponse = {
  encode(message: DeleteDefaultEmulatorProfilesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.defaultProfilesDeleted) {
      DefaultEmulatorProfile.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteDefaultEmulatorProfilesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDefaultEmulatorProfilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.defaultProfilesDeleted.push(DefaultEmulatorProfile.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeleteDefaultEmulatorProfilesResponse>): DeleteDefaultEmulatorProfilesResponse {
    return DeleteDefaultEmulatorProfilesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDefaultEmulatorProfilesResponse>): DeleteDefaultEmulatorProfilesResponse {
    const message = createBaseDeleteDefaultEmulatorProfilesResponse();
    message.defaultProfilesDeleted = object.defaultProfilesDeleted?.map((e) => DefaultEmulatorProfile.fromPartial(e)) ||
      [];
    return message;
  },
};

export type LibraryServiceDefinition = typeof LibraryServiceDefinition;
export const LibraryServiceDefinition = {
  name: "LibraryService",
  fullName: "retrom.LibraryService",
  methods: {
    updateLibrary: {
      name: "UpdateLibrary",
      requestType: UpdateLibraryRequest,
      requestStream: false,
      responseType: UpdateLibraryResponse,
      responseStream: false,
      options: {},
    },
    updateLibraryMetadata: {
      name: "UpdateLibraryMetadata",
      requestType: UpdateLibraryMetadataRequest,
      requestStream: false,
      responseType: UpdateLibraryMetadataResponse,
      responseStream: true,
      options: {},
    },
    deleteLibrary: {
      name: "DeleteLibrary",
      requestType: DeleteLibraryRequest,
      requestStream: false,
      responseType: DeleteLibraryResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface LibraryServiceImplementation<CallContextExt = {}> {
  updateLibrary(
    request: UpdateLibraryRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateLibraryResponse>>;
  updateLibraryMetadata(
    request: UpdateLibraryMetadataRequest,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<UpdateLibraryMetadataResponse>>;
  deleteLibrary(
    request: DeleteLibraryRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeleteLibraryResponse>>;
}

export interface LibraryServiceClient<CallOptionsExt = {}> {
  updateLibrary(
    request: DeepPartial<UpdateLibraryRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateLibraryResponse>;
  updateLibraryMetadata(
    request: DeepPartial<UpdateLibraryMetadataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<UpdateLibraryMetadataResponse>;
  deleteLibrary(
    request: DeepPartial<DeleteLibraryRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeleteLibraryResponse>;
}

export type PlatformServiceDefinition = typeof PlatformServiceDefinition;
export const PlatformServiceDefinition = {
  name: "PlatformService",
  fullName: "retrom.PlatformService",
  methods: {
    getPlatforms: {
      name: "GetPlatforms",
      requestType: GetPlatformsRequest,
      requestStream: false,
      responseType: GetPlatformsResponse,
      responseStream: false,
      options: {},
    },
    deletePlatforms: {
      name: "DeletePlatforms",
      requestType: DeletePlatformsRequest,
      requestStream: false,
      responseType: DeletePlatformsResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface PlatformServiceImplementation<CallContextExt = {}> {
  getPlatforms(
    request: GetPlatformsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetPlatformsResponse>>;
  deletePlatforms(
    request: DeletePlatformsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeletePlatformsResponse>>;
}

export interface PlatformServiceClient<CallOptionsExt = {}> {
  getPlatforms(
    request: DeepPartial<GetPlatformsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetPlatformsResponse>;
  deletePlatforms(
    request: DeepPartial<DeletePlatformsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeletePlatformsResponse>;
}

export type GameServiceDefinition = typeof GameServiceDefinition;
export const GameServiceDefinition = {
  name: "GameService",
  fullName: "retrom.GameService",
  methods: {
    getGames: {
      name: "GetGames",
      requestType: GetGamesRequest,
      requestStream: false,
      responseType: GetGamesResponse,
      responseStream: false,
      options: {},
    },
    deleteGames: {
      name: "DeleteGames",
      requestType: DeleteGamesRequest,
      requestStream: false,
      responseType: DeleteGamesResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface GameServiceImplementation<CallContextExt = {}> {
  getGames(request: GetGamesRequest, context: CallContext & CallContextExt): Promise<DeepPartial<GetGamesResponse>>;
  deleteGames(
    request: DeleteGamesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeleteGamesResponse>>;
}

export interface GameServiceClient<CallOptionsExt = {}> {
  getGames(request: DeepPartial<GetGamesRequest>, options?: CallOptions & CallOptionsExt): Promise<GetGamesResponse>;
  deleteGames(
    request: DeepPartial<DeleteGamesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeleteGamesResponse>;
}

export type MetadataServiceDefinition = typeof MetadataServiceDefinition;
export const MetadataServiceDefinition = {
  name: "MetadataService",
  fullName: "retrom.MetadataService",
  methods: {
    getGameMetadata: {
      name: "GetGameMetadata",
      requestType: GetGameMetadataRequest,
      requestStream: false,
      responseType: GetGameMetadataResponse,
      responseStream: false,
      options: {},
    },
    updateGameMetadata: {
      name: "UpdateGameMetadata",
      requestType: UpdateGameMetadataRequest,
      requestStream: false,
      responseType: UpdateGameMetadataResponse,
      responseStream: false,
      options: {},
    },
    getPlatformMetadata: {
      name: "GetPlatformMetadata",
      requestType: GetPlatformMetadataRequest,
      requestStream: false,
      responseType: GetPlatformMetadataResponse,
      responseStream: false,
      options: {},
    },
    updatePlatformMetadata: {
      name: "UpdatePlatformMetadata",
      requestType: UpdatePlatformMetadataRequest,
      requestStream: false,
      responseType: UpdatePlatformMetadataResponse,
      responseStream: false,
      options: {},
    },
    getIgdbSearch: {
      name: "GetIgdbSearch",
      requestType: GetIgdbSearchRequest,
      requestStream: false,
      responseType: GetIgdbSearchResponse,
      responseStream: false,
      options: {},
    },
    getIgdbGameSearchResults: {
      name: "GetIgdbGameSearchResults",
      requestType: GetIgdbGameSearchResultsRequest,
      requestStream: false,
      responseType: GetIgdbGameSearchResultsResponse,
      responseStream: false,
      options: {},
    },
    getIgdbPlatformSearchResults: {
      name: "GetIgdbPlatformSearchResults",
      requestType: GetIgdbPlatformSearchResultsRequest,
      requestStream: false,
      responseType: GetIgdbPlatformSearchResultsResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface MetadataServiceImplementation<CallContextExt = {}> {
  getGameMetadata(
    request: GetGameMetadataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetGameMetadataResponse>>;
  updateGameMetadata(
    request: UpdateGameMetadataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateGameMetadataResponse>>;
  getPlatformMetadata(
    request: GetPlatformMetadataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetPlatformMetadataResponse>>;
  updatePlatformMetadata(
    request: UpdatePlatformMetadataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdatePlatformMetadataResponse>>;
  getIgdbSearch(
    request: GetIgdbSearchRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetIgdbSearchResponse>>;
  getIgdbGameSearchResults(
    request: GetIgdbGameSearchResultsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetIgdbGameSearchResultsResponse>>;
  getIgdbPlatformSearchResults(
    request: GetIgdbPlatformSearchResultsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetIgdbPlatformSearchResultsResponse>>;
}

export interface MetadataServiceClient<CallOptionsExt = {}> {
  getGameMetadata(
    request: DeepPartial<GetGameMetadataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetGameMetadataResponse>;
  updateGameMetadata(
    request: DeepPartial<UpdateGameMetadataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateGameMetadataResponse>;
  getPlatformMetadata(
    request: DeepPartial<GetPlatformMetadataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetPlatformMetadataResponse>;
  updatePlatformMetadata(
    request: DeepPartial<UpdatePlatformMetadataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdatePlatformMetadataResponse>;
  getIgdbSearch(
    request: DeepPartial<GetIgdbSearchRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetIgdbSearchResponse>;
  getIgdbGameSearchResults(
    request: DeepPartial<GetIgdbGameSearchResultsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetIgdbGameSearchResultsResponse>;
  getIgdbPlatformSearchResults(
    request: DeepPartial<GetIgdbPlatformSearchResultsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetIgdbPlatformSearchResultsResponse>;
}

export type EmulatorServiceDefinition = typeof EmulatorServiceDefinition;
export const EmulatorServiceDefinition = {
  name: "EmulatorService",
  fullName: "retrom.EmulatorService",
  methods: {
    createEmulators: {
      name: "CreateEmulators",
      requestType: CreateEmulatorsRequest,
      requestStream: false,
      responseType: CreateEmulatorsResponse,
      responseStream: false,
      options: {},
    },
    getEmulators: {
      name: "GetEmulators",
      requestType: GetEmulatorsRequest,
      requestStream: false,
      responseType: GetEmulatorsResponse,
      responseStream: false,
      options: {},
    },
    updateEmulators: {
      name: "UpdateEmulators",
      requestType: UpdateEmulatorsRequest,
      requestStream: false,
      responseType: UpdateEmulatorsResponse,
      responseStream: false,
      options: {},
    },
    deleteEmulators: {
      name: "DeleteEmulators",
      requestType: DeleteEmulatorsRequest,
      requestStream: false,
      responseType: DeleteEmulatorsResponse,
      responseStream: false,
      options: {},
    },
    createEmulatorProfiles: {
      name: "CreateEmulatorProfiles",
      requestType: CreateEmulatorProfilesRequest,
      requestStream: false,
      responseType: CreateEmulatorProfilesResponse,
      responseStream: false,
      options: {},
    },
    getEmulatorProfiles: {
      name: "GetEmulatorProfiles",
      requestType: GetEmulatorProfilesRequest,
      requestStream: false,
      responseType: GetEmulatorProfilesResponse,
      responseStream: false,
      options: {},
    },
    updateEmulatorProfiles: {
      name: "UpdateEmulatorProfiles",
      requestType: UpdateEmulatorProfilesRequest,
      requestStream: false,
      responseType: UpdateEmulatorProfilesResponse,
      responseStream: false,
      options: {},
    },
    deleteEmulatorProfiles: {
      name: "DeleteEmulatorProfiles",
      requestType: DeleteEmulatorProfilesRequest,
      requestStream: false,
      responseType: DeleteEmulatorProfilesResponse,
      responseStream: false,
      options: {},
    },
    getDefaultEmulatorProfiles: {
      name: "GetDefaultEmulatorProfiles",
      requestType: GetDefaultEmulatorProfilesRequest,
      requestStream: false,
      responseType: GetDefaultEmulatorProfilesResponse,
      responseStream: false,
      options: {},
    },
    updateDefaultEmulatorProfiles: {
      name: "UpdateDefaultEmulatorProfiles",
      requestType: UpdateDefaultEmulatorProfilesRequest,
      requestStream: false,
      responseType: UpdateDefaultEmulatorProfilesResponse,
      responseStream: false,
      options: {},
    },
    deleteDefaultEmulatorProfiles: {
      name: "DeleteDefaultEmulatorProfiles",
      requestType: DeleteDefaultEmulatorProfilesRequest,
      requestStream: false,
      responseType: DeleteDefaultEmulatorProfilesResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface EmulatorServiceImplementation<CallContextExt = {}> {
  createEmulators(
    request: CreateEmulatorsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CreateEmulatorsResponse>>;
  getEmulators(
    request: GetEmulatorsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetEmulatorsResponse>>;
  updateEmulators(
    request: UpdateEmulatorsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateEmulatorsResponse>>;
  deleteEmulators(
    request: DeleteEmulatorsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeleteEmulatorsResponse>>;
  createEmulatorProfiles(
    request: CreateEmulatorProfilesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CreateEmulatorProfilesResponse>>;
  getEmulatorProfiles(
    request: GetEmulatorProfilesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetEmulatorProfilesResponse>>;
  updateEmulatorProfiles(
    request: UpdateEmulatorProfilesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateEmulatorProfilesResponse>>;
  deleteEmulatorProfiles(
    request: DeleteEmulatorProfilesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeleteEmulatorProfilesResponse>>;
  getDefaultEmulatorProfiles(
    request: GetDefaultEmulatorProfilesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultEmulatorProfilesResponse>>;
  updateDefaultEmulatorProfiles(
    request: UpdateDefaultEmulatorProfilesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateDefaultEmulatorProfilesResponse>>;
  deleteDefaultEmulatorProfiles(
    request: DeleteDefaultEmulatorProfilesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeleteDefaultEmulatorProfilesResponse>>;
}

export interface EmulatorServiceClient<CallOptionsExt = {}> {
  createEmulators(
    request: DeepPartial<CreateEmulatorsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreateEmulatorsResponse>;
  getEmulators(
    request: DeepPartial<GetEmulatorsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetEmulatorsResponse>;
  updateEmulators(
    request: DeepPartial<UpdateEmulatorsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateEmulatorsResponse>;
  deleteEmulators(
    request: DeepPartial<DeleteEmulatorsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeleteEmulatorsResponse>;
  createEmulatorProfiles(
    request: DeepPartial<CreateEmulatorProfilesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreateEmulatorProfilesResponse>;
  getEmulatorProfiles(
    request: DeepPartial<GetEmulatorProfilesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetEmulatorProfilesResponse>;
  updateEmulatorProfiles(
    request: DeepPartial<UpdateEmulatorProfilesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateEmulatorProfilesResponse>;
  deleteEmulatorProfiles(
    request: DeepPartial<DeleteEmulatorProfilesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeleteEmulatorProfilesResponse>;
  getDefaultEmulatorProfiles(
    request: DeepPartial<GetDefaultEmulatorProfilesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultEmulatorProfilesResponse>;
  updateDefaultEmulatorProfiles(
    request: DeepPartial<UpdateDefaultEmulatorProfilesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateDefaultEmulatorProfilesResponse>;
  deleteDefaultEmulatorProfiles(
    request: DeepPartial<DeleteDefaultEmulatorProfilesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeleteDefaultEmulatorProfilesResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };
