// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: retrom/models/game-files.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "retrom";

export interface GameFile {
  id: number;
  byteSize: number;
  path: string;
  gameId: number;
  createdAt?: Timestamp | undefined;
  updatedAt?: Timestamp | undefined;
  deletedAt?: Timestamp | undefined;
  isDeleted: boolean;
}

export interface NewGameFile {
  byteSize: number;
  path: string;
  gameId?: number | undefined;
  createdAt?: Timestamp | undefined;
  updatedAt?: Timestamp | undefined;
  deletedAt?: Timestamp | undefined;
  isDeleted: boolean;
}

export interface UpdatedGameFile {
  id: number;
  byteSize?: number | undefined;
  path?: string | undefined;
  gameId?: number | undefined;
  createdAt?: Timestamp | undefined;
  updatedAt?: Timestamp | undefined;
  deletedAt?: Timestamp | undefined;
  isDeleted?: boolean | undefined;
}

function createBaseGameFile(): GameFile {
  return {
    id: 0,
    byteSize: 0,
    path: "",
    gameId: 0,
    createdAt: undefined,
    updatedAt: undefined,
    deletedAt: undefined,
    isDeleted: false,
  };
}

export const GameFile: MessageFns<GameFile> = {
  encode(message: GameFile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.byteSize !== 0) {
      writer.uint32(24).int64(message.byteSize);
    }
    if (message.path !== "") {
      writer.uint32(34).string(message.path);
    }
    if (message.gameId !== 0) {
      writer.uint32(48).int32(message.gameId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(message.createdAt, writer.uint32(58).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(message.updatedAt, writer.uint32(66).fork()).join();
    }
    if (message.deletedAt !== undefined) {
      Timestamp.encode(message.deletedAt, writer.uint32(74).fork()).join();
    }
    if (message.isDeleted !== false) {
      writer.uint32(80).bool(message.isDeleted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameFile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameFile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.byteSize = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.gameId = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.createdAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.updatedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.deletedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.isDeleted = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameFile {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      byteSize: isSet(object.byteSize) ? globalThis.Number(object.byteSize) : 0,
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      gameId: isSet(object.gameId) ? globalThis.Number(object.gameId) : 0,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      deletedAt: isSet(object.deletedAt) ? fromJsonTimestamp(object.deletedAt) : undefined,
      isDeleted: isSet(object.isDeleted) ? globalThis.Boolean(object.isDeleted) : false,
    };
  },

  toJSON(message: GameFile): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.byteSize !== 0) {
      obj.byteSize = Math.round(message.byteSize);
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.gameId !== 0) {
      obj.gameId = Math.round(message.gameId);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = fromTimestamp(message.createdAt).toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
    }
    if (message.deletedAt !== undefined) {
      obj.deletedAt = fromTimestamp(message.deletedAt).toISOString();
    }
    if (message.isDeleted !== false) {
      obj.isDeleted = message.isDeleted;
    }
    return obj;
  },

  create(base?: DeepPartial<GameFile>): GameFile {
    return GameFile.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GameFile>): GameFile {
    const message = createBaseGameFile();
    message.id = object.id ?? 0;
    message.byteSize = object.byteSize ?? 0;
    message.path = object.path ?? "";
    message.gameId = object.gameId ?? 0;
    message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
      ? Timestamp.fromPartial(object.createdAt)
      : undefined;
    message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
      ? Timestamp.fromPartial(object.updatedAt)
      : undefined;
    message.deletedAt = (object.deletedAt !== undefined && object.deletedAt !== null)
      ? Timestamp.fromPartial(object.deletedAt)
      : undefined;
    message.isDeleted = object.isDeleted ?? false;
    return message;
  },
};

function createBaseNewGameFile(): NewGameFile {
  return {
    byteSize: 0,
    path: "",
    gameId: undefined,
    createdAt: undefined,
    updatedAt: undefined,
    deletedAt: undefined,
    isDeleted: false,
  };
}

export const NewGameFile: MessageFns<NewGameFile> = {
  encode(message: NewGameFile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.byteSize !== 0) {
      writer.uint32(8).int64(message.byteSize);
    }
    if (message.path !== "") {
      writer.uint32(18).string(message.path);
    }
    if (message.gameId !== undefined) {
      writer.uint32(24).int32(message.gameId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(message.createdAt, writer.uint32(34).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(message.updatedAt, writer.uint32(42).fork()).join();
    }
    if (message.deletedAt !== undefined) {
      Timestamp.encode(message.deletedAt, writer.uint32(50).fork()).join();
    }
    if (message.isDeleted !== false) {
      writer.uint32(56).bool(message.isDeleted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NewGameFile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNewGameFile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.byteSize = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.gameId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updatedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.deletedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isDeleted = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NewGameFile {
    return {
      byteSize: isSet(object.byteSize) ? globalThis.Number(object.byteSize) : 0,
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      gameId: isSet(object.gameId) ? globalThis.Number(object.gameId) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      deletedAt: isSet(object.deletedAt) ? fromJsonTimestamp(object.deletedAt) : undefined,
      isDeleted: isSet(object.isDeleted) ? globalThis.Boolean(object.isDeleted) : false,
    };
  },

  toJSON(message: NewGameFile): unknown {
    const obj: any = {};
    if (message.byteSize !== 0) {
      obj.byteSize = Math.round(message.byteSize);
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.gameId !== undefined) {
      obj.gameId = Math.round(message.gameId);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = fromTimestamp(message.createdAt).toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
    }
    if (message.deletedAt !== undefined) {
      obj.deletedAt = fromTimestamp(message.deletedAt).toISOString();
    }
    if (message.isDeleted !== false) {
      obj.isDeleted = message.isDeleted;
    }
    return obj;
  },

  create(base?: DeepPartial<NewGameFile>): NewGameFile {
    return NewGameFile.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NewGameFile>): NewGameFile {
    const message = createBaseNewGameFile();
    message.byteSize = object.byteSize ?? 0;
    message.path = object.path ?? "";
    message.gameId = object.gameId ?? undefined;
    message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
      ? Timestamp.fromPartial(object.createdAt)
      : undefined;
    message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
      ? Timestamp.fromPartial(object.updatedAt)
      : undefined;
    message.deletedAt = (object.deletedAt !== undefined && object.deletedAt !== null)
      ? Timestamp.fromPartial(object.deletedAt)
      : undefined;
    message.isDeleted = object.isDeleted ?? false;
    return message;
  },
};

function createBaseUpdatedGameFile(): UpdatedGameFile {
  return {
    id: 0,
    byteSize: undefined,
    path: undefined,
    gameId: undefined,
    createdAt: undefined,
    updatedAt: undefined,
    deletedAt: undefined,
    isDeleted: undefined,
  };
}

export const UpdatedGameFile: MessageFns<UpdatedGameFile> = {
  encode(message: UpdatedGameFile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.byteSize !== undefined) {
      writer.uint32(16).int64(message.byteSize);
    }
    if (message.path !== undefined) {
      writer.uint32(26).string(message.path);
    }
    if (message.gameId !== undefined) {
      writer.uint32(32).int32(message.gameId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(message.createdAt, writer.uint32(42).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(message.updatedAt, writer.uint32(50).fork()).join();
    }
    if (message.deletedAt !== undefined) {
      Timestamp.encode(message.deletedAt, writer.uint32(58).fork()).join();
    }
    if (message.isDeleted !== undefined) {
      writer.uint32(64).bool(message.isDeleted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatedGameFile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatedGameFile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.byteSize = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.gameId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.updatedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.deletedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.isDeleted = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatedGameFile {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      byteSize: isSet(object.byteSize) ? globalThis.Number(object.byteSize) : undefined,
      path: isSet(object.path) ? globalThis.String(object.path) : undefined,
      gameId: isSet(object.gameId) ? globalThis.Number(object.gameId) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      deletedAt: isSet(object.deletedAt) ? fromJsonTimestamp(object.deletedAt) : undefined,
      isDeleted: isSet(object.isDeleted) ? globalThis.Boolean(object.isDeleted) : undefined,
    };
  },

  toJSON(message: UpdatedGameFile): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.byteSize !== undefined) {
      obj.byteSize = Math.round(message.byteSize);
    }
    if (message.path !== undefined) {
      obj.path = message.path;
    }
    if (message.gameId !== undefined) {
      obj.gameId = Math.round(message.gameId);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = fromTimestamp(message.createdAt).toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
    }
    if (message.deletedAt !== undefined) {
      obj.deletedAt = fromTimestamp(message.deletedAt).toISOString();
    }
    if (message.isDeleted !== undefined) {
      obj.isDeleted = message.isDeleted;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatedGameFile>): UpdatedGameFile {
    return UpdatedGameFile.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatedGameFile>): UpdatedGameFile {
    const message = createBaseUpdatedGameFile();
    message.id = object.id ?? 0;
    message.byteSize = object.byteSize ?? undefined;
    message.path = object.path ?? undefined;
    message.gameId = object.gameId ?? undefined;
    message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
      ? Timestamp.fromPartial(object.createdAt)
      : undefined;
    message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
      ? Timestamp.fromPartial(object.updatedAt)
      : undefined;
    message.deletedAt = (object.deletedAt !== undefined && object.deletedAt !== null)
      ? Timestamp.fromPartial(object.deletedAt)
      : undefined;
    message.isDeleted = object.isDeleted ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Timestamp {
  if (o instanceof globalThis.Date) {
    return toTimestamp(o);
  } else if (typeof o === "string") {
    return toTimestamp(new globalThis.Date(o));
  } else {
    return Timestamp.fromJSON(o);
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
