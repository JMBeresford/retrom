// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: retrom/models/metadata.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "retrom";

export interface GameMetadata {
  gameId: number;
  name?: string | undefined;
  description?: string | undefined;
  coverUrl?: string | undefined;
  backgroundUrl?: string | undefined;
  iconUrl?: string | undefined;
  igdbId?: number | undefined;
  createdAt?: Timestamp | undefined;
  updatedAt?: Timestamp | undefined;
  links: string[];
  videoUrls: string[];
  screenshotUrls: string[];
  artworkUrls: string[];
  releaseDate?: Timestamp | undefined;
  lastPlayed?: Timestamp | undefined;
  minutesPlayed?: number | undefined;
}

export interface NewGameMetadata {
  gameId?: number | undefined;
  name?: string | undefined;
  description?: string | undefined;
  coverUrl?: string | undefined;
  backgroundUrl?: string | undefined;
  iconUrl?: string | undefined;
  igdbId?: number | undefined;
  createdAt?: Timestamp | undefined;
  updatedAt?: Timestamp | undefined;
  links: string[];
  videoUrls: string[];
  screenshotUrls: string[];
  artworkUrls: string[];
  releaseDate?: Timestamp | undefined;
  lastPlayed?: Timestamp | undefined;
  minutesPlayed?: number | undefined;
}

export interface UpdatedGameMetadata {
  gameId: number;
  name?: string | undefined;
  description?: string | undefined;
  coverUrl?: string | undefined;
  backgroundUrl?: string | undefined;
  iconUrl?: string | undefined;
  igdbId?: number | undefined;
  createdAt?: Timestamp | undefined;
  updatedAt?: Timestamp | undefined;
  links: string[];
  videoUrls: string[];
  screenshotUrls: string[];
  artworkUrls: string[];
  releaseDate?: Timestamp | undefined;
  lastPlayed?: Timestamp | undefined;
  minutesPlayed?: number | undefined;
}

export interface PlatformMetadata {
  platformId: number;
  name?: string | undefined;
  description?: string | undefined;
  backgroundUrl?: string | undefined;
  logoUrl?: string | undefined;
  igdbId?: number | undefined;
  createdAt?: Timestamp | undefined;
  updatedAt?: Timestamp | undefined;
}

export interface NewPlatformMetadata {
  platformId?: number | undefined;
  name?: string | undefined;
  description?: string | undefined;
  backgroundUrl?: string | undefined;
  logoUrl?: string | undefined;
  igdbId?: number | undefined;
  createdAt?: Timestamp | undefined;
  updatedAt?: Timestamp | undefined;
}

export interface UpdatedPlatformMetadata {
  platformId: number;
  name?: string | undefined;
  description?: string | undefined;
  backgroundUrl?: string | undefined;
  logoUrl?: string | undefined;
  igdbId?: number | undefined;
  createdAt?: Timestamp | undefined;
  updatedAt?: Timestamp | undefined;
}

export interface GameGenre {
  id: number;
  slug: string;
  name: string;
  createdAt?: Timestamp | undefined;
  updatedAt?: Timestamp | undefined;
}

export interface NewGameGenre {
  id?: number | undefined;
  slug: string;
  name: string;
  createdAt?: Timestamp | undefined;
  updatedAt?: Timestamp | undefined;
}

export interface UpdatedGameGenre {
  id: number;
  slug?: string | undefined;
  name?: string | undefined;
  createdAt?: Timestamp | undefined;
  updatedAt?: Timestamp | undefined;
}

export interface GameGenreMap {
  gameId: number;
  genreId: number;
  createdAt?: Timestamp | undefined;
  updatedAt?: Timestamp | undefined;
}

export interface NewGameGenreMap {
  gameId: number;
  genreId: number;
  createdAt?: Timestamp | undefined;
  updatedAt?: Timestamp | undefined;
}

export interface UpdatedGameGenreMap {
  gameId?: number | undefined;
  genreId?: number | undefined;
  createdAt?: Timestamp | undefined;
  updatedAt?: Timestamp | undefined;
}

export interface SimilarGameMap {
  gameId: number;
  similarGameId: number;
  createdAt?: Timestamp | undefined;
  updatedAt?: Timestamp | undefined;
}

export interface NewSimilarGameMap {
  gameId: number;
  similarGameId: number;
  createdAt?: Timestamp | undefined;
  updatedAt?: Timestamp | undefined;
}

export interface UpdatedSimilarGameMap {
  gameId: number;
  similarGameId: number;
  createdAt?: Timestamp | undefined;
  updatedAt?: Timestamp | undefined;
}

function createBaseGameMetadata(): GameMetadata {
  return {
    gameId: 0,
    name: undefined,
    description: undefined,
    coverUrl: undefined,
    backgroundUrl: undefined,
    iconUrl: undefined,
    igdbId: undefined,
    createdAt: undefined,
    updatedAt: undefined,
    links: [],
    videoUrls: [],
    screenshotUrls: [],
    artworkUrls: [],
    releaseDate: undefined,
    lastPlayed: undefined,
    minutesPlayed: undefined,
  };
}

export const GameMetadata: MessageFns<GameMetadata> = {
  encode(message: GameMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameId !== 0) {
      writer.uint32(8).int32(message.gameId);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(26).string(message.description);
    }
    if (message.coverUrl !== undefined) {
      writer.uint32(34).string(message.coverUrl);
    }
    if (message.backgroundUrl !== undefined) {
      writer.uint32(42).string(message.backgroundUrl);
    }
    if (message.iconUrl !== undefined) {
      writer.uint32(50).string(message.iconUrl);
    }
    if (message.igdbId !== undefined) {
      writer.uint32(56).int64(message.igdbId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(message.createdAt, writer.uint32(66).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(message.updatedAt, writer.uint32(74).fork()).join();
    }
    for (const v of message.links) {
      writer.uint32(82).string(v!);
    }
    for (const v of message.videoUrls) {
      writer.uint32(90).string(v!);
    }
    for (const v of message.screenshotUrls) {
      writer.uint32(98).string(v!);
    }
    for (const v of message.artworkUrls) {
      writer.uint32(106).string(v!);
    }
    if (message.releaseDate !== undefined) {
      Timestamp.encode(message.releaseDate, writer.uint32(114).fork()).join();
    }
    if (message.lastPlayed !== undefined) {
      Timestamp.encode(message.lastPlayed, writer.uint32(122).fork()).join();
    }
    if (message.minutesPlayed !== undefined) {
      writer.uint32(128).int32(message.minutesPlayed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.gameId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.coverUrl = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.backgroundUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.iconUrl = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.igdbId = longToNumber(reader.int64());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.createdAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.updatedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.links.push(reader.string());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.videoUrls.push(reader.string());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.screenshotUrls.push(reader.string());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.artworkUrls.push(reader.string());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.releaseDate = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.lastPlayed = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.minutesPlayed = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameMetadata {
    return {
      gameId: isSet(object.gameId) ? globalThis.Number(object.gameId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      coverUrl: isSet(object.coverUrl) ? globalThis.String(object.coverUrl) : undefined,
      backgroundUrl: isSet(object.backgroundUrl) ? globalThis.String(object.backgroundUrl) : undefined,
      iconUrl: isSet(object.iconUrl) ? globalThis.String(object.iconUrl) : undefined,
      igdbId: isSet(object.igdbId) ? globalThis.Number(object.igdbId) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      links: globalThis.Array.isArray(object?.links) ? object.links.map((e: any) => globalThis.String(e)) : [],
      videoUrls: globalThis.Array.isArray(object?.videoUrls)
        ? object.videoUrls.map((e: any) => globalThis.String(e))
        : [],
      screenshotUrls: globalThis.Array.isArray(object?.screenshotUrls)
        ? object.screenshotUrls.map((e: any) => globalThis.String(e))
        : [],
      artworkUrls: globalThis.Array.isArray(object?.artworkUrls)
        ? object.artworkUrls.map((e: any) => globalThis.String(e))
        : [],
      releaseDate: isSet(object.releaseDate) ? fromJsonTimestamp(object.releaseDate) : undefined,
      lastPlayed: isSet(object.lastPlayed) ? fromJsonTimestamp(object.lastPlayed) : undefined,
      minutesPlayed: isSet(object.minutesPlayed) ? globalThis.Number(object.minutesPlayed) : undefined,
    };
  },

  toJSON(message: GameMetadata): unknown {
    const obj: any = {};
    if (message.gameId !== 0) {
      obj.gameId = Math.round(message.gameId);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.coverUrl !== undefined) {
      obj.coverUrl = message.coverUrl;
    }
    if (message.backgroundUrl !== undefined) {
      obj.backgroundUrl = message.backgroundUrl;
    }
    if (message.iconUrl !== undefined) {
      obj.iconUrl = message.iconUrl;
    }
    if (message.igdbId !== undefined) {
      obj.igdbId = Math.round(message.igdbId);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = fromTimestamp(message.createdAt).toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
    }
    if (message.links?.length) {
      obj.links = message.links;
    }
    if (message.videoUrls?.length) {
      obj.videoUrls = message.videoUrls;
    }
    if (message.screenshotUrls?.length) {
      obj.screenshotUrls = message.screenshotUrls;
    }
    if (message.artworkUrls?.length) {
      obj.artworkUrls = message.artworkUrls;
    }
    if (message.releaseDate !== undefined) {
      obj.releaseDate = fromTimestamp(message.releaseDate).toISOString();
    }
    if (message.lastPlayed !== undefined) {
      obj.lastPlayed = fromTimestamp(message.lastPlayed).toISOString();
    }
    if (message.minutesPlayed !== undefined) {
      obj.minutesPlayed = Math.round(message.minutesPlayed);
    }
    return obj;
  },

  create(base?: DeepPartial<GameMetadata>): GameMetadata {
    return GameMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GameMetadata>): GameMetadata {
    const message = createBaseGameMetadata();
    message.gameId = object.gameId ?? 0;
    message.name = object.name ?? undefined;
    message.description = object.description ?? undefined;
    message.coverUrl = object.coverUrl ?? undefined;
    message.backgroundUrl = object.backgroundUrl ?? undefined;
    message.iconUrl = object.iconUrl ?? undefined;
    message.igdbId = object.igdbId ?? undefined;
    message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
      ? Timestamp.fromPartial(object.createdAt)
      : undefined;
    message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
      ? Timestamp.fromPartial(object.updatedAt)
      : undefined;
    message.links = object.links?.map((e) => e) || [];
    message.videoUrls = object.videoUrls?.map((e) => e) || [];
    message.screenshotUrls = object.screenshotUrls?.map((e) => e) || [];
    message.artworkUrls = object.artworkUrls?.map((e) => e) || [];
    message.releaseDate = (object.releaseDate !== undefined && object.releaseDate !== null)
      ? Timestamp.fromPartial(object.releaseDate)
      : undefined;
    message.lastPlayed = (object.lastPlayed !== undefined && object.lastPlayed !== null)
      ? Timestamp.fromPartial(object.lastPlayed)
      : undefined;
    message.minutesPlayed = object.minutesPlayed ?? undefined;
    return message;
  },
};

function createBaseNewGameMetadata(): NewGameMetadata {
  return {
    gameId: undefined,
    name: undefined,
    description: undefined,
    coverUrl: undefined,
    backgroundUrl: undefined,
    iconUrl: undefined,
    igdbId: undefined,
    createdAt: undefined,
    updatedAt: undefined,
    links: [],
    videoUrls: [],
    screenshotUrls: [],
    artworkUrls: [],
    releaseDate: undefined,
    lastPlayed: undefined,
    minutesPlayed: undefined,
  };
}

export const NewGameMetadata: MessageFns<NewGameMetadata> = {
  encode(message: NewGameMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameId !== undefined) {
      writer.uint32(8).int32(message.gameId);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(26).string(message.description);
    }
    if (message.coverUrl !== undefined) {
      writer.uint32(34).string(message.coverUrl);
    }
    if (message.backgroundUrl !== undefined) {
      writer.uint32(42).string(message.backgroundUrl);
    }
    if (message.iconUrl !== undefined) {
      writer.uint32(50).string(message.iconUrl);
    }
    if (message.igdbId !== undefined) {
      writer.uint32(56).int64(message.igdbId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(message.createdAt, writer.uint32(66).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(message.updatedAt, writer.uint32(74).fork()).join();
    }
    for (const v of message.links) {
      writer.uint32(82).string(v!);
    }
    for (const v of message.videoUrls) {
      writer.uint32(90).string(v!);
    }
    for (const v of message.screenshotUrls) {
      writer.uint32(98).string(v!);
    }
    for (const v of message.artworkUrls) {
      writer.uint32(106).string(v!);
    }
    if (message.releaseDate !== undefined) {
      Timestamp.encode(message.releaseDate, writer.uint32(114).fork()).join();
    }
    if (message.lastPlayed !== undefined) {
      Timestamp.encode(message.lastPlayed, writer.uint32(122).fork()).join();
    }
    if (message.minutesPlayed !== undefined) {
      writer.uint32(128).int32(message.minutesPlayed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NewGameMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNewGameMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.gameId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.coverUrl = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.backgroundUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.iconUrl = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.igdbId = longToNumber(reader.int64());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.createdAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.updatedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.links.push(reader.string());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.videoUrls.push(reader.string());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.screenshotUrls.push(reader.string());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.artworkUrls.push(reader.string());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.releaseDate = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.lastPlayed = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.minutesPlayed = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NewGameMetadata {
    return {
      gameId: isSet(object.gameId) ? globalThis.Number(object.gameId) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      coverUrl: isSet(object.coverUrl) ? globalThis.String(object.coverUrl) : undefined,
      backgroundUrl: isSet(object.backgroundUrl) ? globalThis.String(object.backgroundUrl) : undefined,
      iconUrl: isSet(object.iconUrl) ? globalThis.String(object.iconUrl) : undefined,
      igdbId: isSet(object.igdbId) ? globalThis.Number(object.igdbId) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      links: globalThis.Array.isArray(object?.links) ? object.links.map((e: any) => globalThis.String(e)) : [],
      videoUrls: globalThis.Array.isArray(object?.videoUrls)
        ? object.videoUrls.map((e: any) => globalThis.String(e))
        : [],
      screenshotUrls: globalThis.Array.isArray(object?.screenshotUrls)
        ? object.screenshotUrls.map((e: any) => globalThis.String(e))
        : [],
      artworkUrls: globalThis.Array.isArray(object?.artworkUrls)
        ? object.artworkUrls.map((e: any) => globalThis.String(e))
        : [],
      releaseDate: isSet(object.releaseDate) ? fromJsonTimestamp(object.releaseDate) : undefined,
      lastPlayed: isSet(object.lastPlayed) ? fromJsonTimestamp(object.lastPlayed) : undefined,
      minutesPlayed: isSet(object.minutesPlayed) ? globalThis.Number(object.minutesPlayed) : undefined,
    };
  },

  toJSON(message: NewGameMetadata): unknown {
    const obj: any = {};
    if (message.gameId !== undefined) {
      obj.gameId = Math.round(message.gameId);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.coverUrl !== undefined) {
      obj.coverUrl = message.coverUrl;
    }
    if (message.backgroundUrl !== undefined) {
      obj.backgroundUrl = message.backgroundUrl;
    }
    if (message.iconUrl !== undefined) {
      obj.iconUrl = message.iconUrl;
    }
    if (message.igdbId !== undefined) {
      obj.igdbId = Math.round(message.igdbId);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = fromTimestamp(message.createdAt).toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
    }
    if (message.links?.length) {
      obj.links = message.links;
    }
    if (message.videoUrls?.length) {
      obj.videoUrls = message.videoUrls;
    }
    if (message.screenshotUrls?.length) {
      obj.screenshotUrls = message.screenshotUrls;
    }
    if (message.artworkUrls?.length) {
      obj.artworkUrls = message.artworkUrls;
    }
    if (message.releaseDate !== undefined) {
      obj.releaseDate = fromTimestamp(message.releaseDate).toISOString();
    }
    if (message.lastPlayed !== undefined) {
      obj.lastPlayed = fromTimestamp(message.lastPlayed).toISOString();
    }
    if (message.minutesPlayed !== undefined) {
      obj.minutesPlayed = Math.round(message.minutesPlayed);
    }
    return obj;
  },

  create(base?: DeepPartial<NewGameMetadata>): NewGameMetadata {
    return NewGameMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NewGameMetadata>): NewGameMetadata {
    const message = createBaseNewGameMetadata();
    message.gameId = object.gameId ?? undefined;
    message.name = object.name ?? undefined;
    message.description = object.description ?? undefined;
    message.coverUrl = object.coverUrl ?? undefined;
    message.backgroundUrl = object.backgroundUrl ?? undefined;
    message.iconUrl = object.iconUrl ?? undefined;
    message.igdbId = object.igdbId ?? undefined;
    message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
      ? Timestamp.fromPartial(object.createdAt)
      : undefined;
    message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
      ? Timestamp.fromPartial(object.updatedAt)
      : undefined;
    message.links = object.links?.map((e) => e) || [];
    message.videoUrls = object.videoUrls?.map((e) => e) || [];
    message.screenshotUrls = object.screenshotUrls?.map((e) => e) || [];
    message.artworkUrls = object.artworkUrls?.map((e) => e) || [];
    message.releaseDate = (object.releaseDate !== undefined && object.releaseDate !== null)
      ? Timestamp.fromPartial(object.releaseDate)
      : undefined;
    message.lastPlayed = (object.lastPlayed !== undefined && object.lastPlayed !== null)
      ? Timestamp.fromPartial(object.lastPlayed)
      : undefined;
    message.minutesPlayed = object.minutesPlayed ?? undefined;
    return message;
  },
};

function createBaseUpdatedGameMetadata(): UpdatedGameMetadata {
  return {
    gameId: 0,
    name: undefined,
    description: undefined,
    coverUrl: undefined,
    backgroundUrl: undefined,
    iconUrl: undefined,
    igdbId: undefined,
    createdAt: undefined,
    updatedAt: undefined,
    links: [],
    videoUrls: [],
    screenshotUrls: [],
    artworkUrls: [],
    releaseDate: undefined,
    lastPlayed: undefined,
    minutesPlayed: undefined,
  };
}

export const UpdatedGameMetadata: MessageFns<UpdatedGameMetadata> = {
  encode(message: UpdatedGameMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameId !== 0) {
      writer.uint32(8).int32(message.gameId);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(26).string(message.description);
    }
    if (message.coverUrl !== undefined) {
      writer.uint32(34).string(message.coverUrl);
    }
    if (message.backgroundUrl !== undefined) {
      writer.uint32(42).string(message.backgroundUrl);
    }
    if (message.iconUrl !== undefined) {
      writer.uint32(50).string(message.iconUrl);
    }
    if (message.igdbId !== undefined) {
      writer.uint32(56).int64(message.igdbId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(message.createdAt, writer.uint32(66).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(message.updatedAt, writer.uint32(74).fork()).join();
    }
    for (const v of message.links) {
      writer.uint32(82).string(v!);
    }
    for (const v of message.videoUrls) {
      writer.uint32(90).string(v!);
    }
    for (const v of message.screenshotUrls) {
      writer.uint32(98).string(v!);
    }
    for (const v of message.artworkUrls) {
      writer.uint32(106).string(v!);
    }
    if (message.releaseDate !== undefined) {
      Timestamp.encode(message.releaseDate, writer.uint32(114).fork()).join();
    }
    if (message.lastPlayed !== undefined) {
      Timestamp.encode(message.lastPlayed, writer.uint32(122).fork()).join();
    }
    if (message.minutesPlayed !== undefined) {
      writer.uint32(128).int32(message.minutesPlayed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatedGameMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatedGameMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.gameId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.coverUrl = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.backgroundUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.iconUrl = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.igdbId = longToNumber(reader.int64());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.createdAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.updatedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.links.push(reader.string());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.videoUrls.push(reader.string());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.screenshotUrls.push(reader.string());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.artworkUrls.push(reader.string());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.releaseDate = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.lastPlayed = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.minutesPlayed = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatedGameMetadata {
    return {
      gameId: isSet(object.gameId) ? globalThis.Number(object.gameId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      coverUrl: isSet(object.coverUrl) ? globalThis.String(object.coverUrl) : undefined,
      backgroundUrl: isSet(object.backgroundUrl) ? globalThis.String(object.backgroundUrl) : undefined,
      iconUrl: isSet(object.iconUrl) ? globalThis.String(object.iconUrl) : undefined,
      igdbId: isSet(object.igdbId) ? globalThis.Number(object.igdbId) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      links: globalThis.Array.isArray(object?.links) ? object.links.map((e: any) => globalThis.String(e)) : [],
      videoUrls: globalThis.Array.isArray(object?.videoUrls)
        ? object.videoUrls.map((e: any) => globalThis.String(e))
        : [],
      screenshotUrls: globalThis.Array.isArray(object?.screenshotUrls)
        ? object.screenshotUrls.map((e: any) => globalThis.String(e))
        : [],
      artworkUrls: globalThis.Array.isArray(object?.artworkUrls)
        ? object.artworkUrls.map((e: any) => globalThis.String(e))
        : [],
      releaseDate: isSet(object.releaseDate) ? fromJsonTimestamp(object.releaseDate) : undefined,
      lastPlayed: isSet(object.lastPlayed) ? fromJsonTimestamp(object.lastPlayed) : undefined,
      minutesPlayed: isSet(object.minutesPlayed) ? globalThis.Number(object.minutesPlayed) : undefined,
    };
  },

  toJSON(message: UpdatedGameMetadata): unknown {
    const obj: any = {};
    if (message.gameId !== 0) {
      obj.gameId = Math.round(message.gameId);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.coverUrl !== undefined) {
      obj.coverUrl = message.coverUrl;
    }
    if (message.backgroundUrl !== undefined) {
      obj.backgroundUrl = message.backgroundUrl;
    }
    if (message.iconUrl !== undefined) {
      obj.iconUrl = message.iconUrl;
    }
    if (message.igdbId !== undefined) {
      obj.igdbId = Math.round(message.igdbId);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = fromTimestamp(message.createdAt).toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
    }
    if (message.links?.length) {
      obj.links = message.links;
    }
    if (message.videoUrls?.length) {
      obj.videoUrls = message.videoUrls;
    }
    if (message.screenshotUrls?.length) {
      obj.screenshotUrls = message.screenshotUrls;
    }
    if (message.artworkUrls?.length) {
      obj.artworkUrls = message.artworkUrls;
    }
    if (message.releaseDate !== undefined) {
      obj.releaseDate = fromTimestamp(message.releaseDate).toISOString();
    }
    if (message.lastPlayed !== undefined) {
      obj.lastPlayed = fromTimestamp(message.lastPlayed).toISOString();
    }
    if (message.minutesPlayed !== undefined) {
      obj.minutesPlayed = Math.round(message.minutesPlayed);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatedGameMetadata>): UpdatedGameMetadata {
    return UpdatedGameMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatedGameMetadata>): UpdatedGameMetadata {
    const message = createBaseUpdatedGameMetadata();
    message.gameId = object.gameId ?? 0;
    message.name = object.name ?? undefined;
    message.description = object.description ?? undefined;
    message.coverUrl = object.coverUrl ?? undefined;
    message.backgroundUrl = object.backgroundUrl ?? undefined;
    message.iconUrl = object.iconUrl ?? undefined;
    message.igdbId = object.igdbId ?? undefined;
    message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
      ? Timestamp.fromPartial(object.createdAt)
      : undefined;
    message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
      ? Timestamp.fromPartial(object.updatedAt)
      : undefined;
    message.links = object.links?.map((e) => e) || [];
    message.videoUrls = object.videoUrls?.map((e) => e) || [];
    message.screenshotUrls = object.screenshotUrls?.map((e) => e) || [];
    message.artworkUrls = object.artworkUrls?.map((e) => e) || [];
    message.releaseDate = (object.releaseDate !== undefined && object.releaseDate !== null)
      ? Timestamp.fromPartial(object.releaseDate)
      : undefined;
    message.lastPlayed = (object.lastPlayed !== undefined && object.lastPlayed !== null)
      ? Timestamp.fromPartial(object.lastPlayed)
      : undefined;
    message.minutesPlayed = object.minutesPlayed ?? undefined;
    return message;
  },
};

function createBasePlatformMetadata(): PlatformMetadata {
  return {
    platformId: 0,
    name: undefined,
    description: undefined,
    backgroundUrl: undefined,
    logoUrl: undefined,
    igdbId: undefined,
    createdAt: undefined,
    updatedAt: undefined,
  };
}

export const PlatformMetadata: MessageFns<PlatformMetadata> = {
  encode(message: PlatformMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.platformId !== 0) {
      writer.uint32(8).int32(message.platformId);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(26).string(message.description);
    }
    if (message.backgroundUrl !== undefined) {
      writer.uint32(34).string(message.backgroundUrl);
    }
    if (message.logoUrl !== undefined) {
      writer.uint32(42).string(message.logoUrl);
    }
    if (message.igdbId !== undefined) {
      writer.uint32(48).int64(message.igdbId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(message.createdAt, writer.uint32(58).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(message.updatedAt, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlatformMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlatformMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.platformId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.backgroundUrl = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.logoUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.igdbId = longToNumber(reader.int64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.createdAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.updatedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlatformMetadata {
    return {
      platformId: isSet(object.platformId) ? globalThis.Number(object.platformId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      backgroundUrl: isSet(object.backgroundUrl) ? globalThis.String(object.backgroundUrl) : undefined,
      logoUrl: isSet(object.logoUrl) ? globalThis.String(object.logoUrl) : undefined,
      igdbId: isSet(object.igdbId) ? globalThis.Number(object.igdbId) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: PlatformMetadata): unknown {
    const obj: any = {};
    if (message.platformId !== 0) {
      obj.platformId = Math.round(message.platformId);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.backgroundUrl !== undefined) {
      obj.backgroundUrl = message.backgroundUrl;
    }
    if (message.logoUrl !== undefined) {
      obj.logoUrl = message.logoUrl;
    }
    if (message.igdbId !== undefined) {
      obj.igdbId = Math.round(message.igdbId);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = fromTimestamp(message.createdAt).toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<PlatformMetadata>): PlatformMetadata {
    return PlatformMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PlatformMetadata>): PlatformMetadata {
    const message = createBasePlatformMetadata();
    message.platformId = object.platformId ?? 0;
    message.name = object.name ?? undefined;
    message.description = object.description ?? undefined;
    message.backgroundUrl = object.backgroundUrl ?? undefined;
    message.logoUrl = object.logoUrl ?? undefined;
    message.igdbId = object.igdbId ?? undefined;
    message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
      ? Timestamp.fromPartial(object.createdAt)
      : undefined;
    message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
      ? Timestamp.fromPartial(object.updatedAt)
      : undefined;
    return message;
  },
};

function createBaseNewPlatformMetadata(): NewPlatformMetadata {
  return {
    platformId: undefined,
    name: undefined,
    description: undefined,
    backgroundUrl: undefined,
    logoUrl: undefined,
    igdbId: undefined,
    createdAt: undefined,
    updatedAt: undefined,
  };
}

export const NewPlatformMetadata: MessageFns<NewPlatformMetadata> = {
  encode(message: NewPlatformMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.platformId !== undefined) {
      writer.uint32(8).int32(message.platformId);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(26).string(message.description);
    }
    if (message.backgroundUrl !== undefined) {
      writer.uint32(34).string(message.backgroundUrl);
    }
    if (message.logoUrl !== undefined) {
      writer.uint32(42).string(message.logoUrl);
    }
    if (message.igdbId !== undefined) {
      writer.uint32(48).int64(message.igdbId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(message.createdAt, writer.uint32(58).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(message.updatedAt, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NewPlatformMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNewPlatformMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.platformId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.backgroundUrl = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.logoUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.igdbId = longToNumber(reader.int64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.createdAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.updatedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NewPlatformMetadata {
    return {
      platformId: isSet(object.platformId) ? globalThis.Number(object.platformId) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      backgroundUrl: isSet(object.backgroundUrl) ? globalThis.String(object.backgroundUrl) : undefined,
      logoUrl: isSet(object.logoUrl) ? globalThis.String(object.logoUrl) : undefined,
      igdbId: isSet(object.igdbId) ? globalThis.Number(object.igdbId) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: NewPlatformMetadata): unknown {
    const obj: any = {};
    if (message.platformId !== undefined) {
      obj.platformId = Math.round(message.platformId);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.backgroundUrl !== undefined) {
      obj.backgroundUrl = message.backgroundUrl;
    }
    if (message.logoUrl !== undefined) {
      obj.logoUrl = message.logoUrl;
    }
    if (message.igdbId !== undefined) {
      obj.igdbId = Math.round(message.igdbId);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = fromTimestamp(message.createdAt).toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<NewPlatformMetadata>): NewPlatformMetadata {
    return NewPlatformMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NewPlatformMetadata>): NewPlatformMetadata {
    const message = createBaseNewPlatformMetadata();
    message.platformId = object.platformId ?? undefined;
    message.name = object.name ?? undefined;
    message.description = object.description ?? undefined;
    message.backgroundUrl = object.backgroundUrl ?? undefined;
    message.logoUrl = object.logoUrl ?? undefined;
    message.igdbId = object.igdbId ?? undefined;
    message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
      ? Timestamp.fromPartial(object.createdAt)
      : undefined;
    message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
      ? Timestamp.fromPartial(object.updatedAt)
      : undefined;
    return message;
  },
};

function createBaseUpdatedPlatformMetadata(): UpdatedPlatformMetadata {
  return {
    platformId: 0,
    name: undefined,
    description: undefined,
    backgroundUrl: undefined,
    logoUrl: undefined,
    igdbId: undefined,
    createdAt: undefined,
    updatedAt: undefined,
  };
}

export const UpdatedPlatformMetadata: MessageFns<UpdatedPlatformMetadata> = {
  encode(message: UpdatedPlatformMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.platformId !== 0) {
      writer.uint32(8).int32(message.platformId);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(26).string(message.description);
    }
    if (message.backgroundUrl !== undefined) {
      writer.uint32(34).string(message.backgroundUrl);
    }
    if (message.logoUrl !== undefined) {
      writer.uint32(42).string(message.logoUrl);
    }
    if (message.igdbId !== undefined) {
      writer.uint32(48).int64(message.igdbId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(message.createdAt, writer.uint32(58).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(message.updatedAt, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatedPlatformMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatedPlatformMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.platformId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.backgroundUrl = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.logoUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.igdbId = longToNumber(reader.int64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.createdAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.updatedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatedPlatformMetadata {
    return {
      platformId: isSet(object.platformId) ? globalThis.Number(object.platformId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      backgroundUrl: isSet(object.backgroundUrl) ? globalThis.String(object.backgroundUrl) : undefined,
      logoUrl: isSet(object.logoUrl) ? globalThis.String(object.logoUrl) : undefined,
      igdbId: isSet(object.igdbId) ? globalThis.Number(object.igdbId) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: UpdatedPlatformMetadata): unknown {
    const obj: any = {};
    if (message.platformId !== 0) {
      obj.platformId = Math.round(message.platformId);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.backgroundUrl !== undefined) {
      obj.backgroundUrl = message.backgroundUrl;
    }
    if (message.logoUrl !== undefined) {
      obj.logoUrl = message.logoUrl;
    }
    if (message.igdbId !== undefined) {
      obj.igdbId = Math.round(message.igdbId);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = fromTimestamp(message.createdAt).toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatedPlatformMetadata>): UpdatedPlatformMetadata {
    return UpdatedPlatformMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatedPlatformMetadata>): UpdatedPlatformMetadata {
    const message = createBaseUpdatedPlatformMetadata();
    message.platformId = object.platformId ?? 0;
    message.name = object.name ?? undefined;
    message.description = object.description ?? undefined;
    message.backgroundUrl = object.backgroundUrl ?? undefined;
    message.logoUrl = object.logoUrl ?? undefined;
    message.igdbId = object.igdbId ?? undefined;
    message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
      ? Timestamp.fromPartial(object.createdAt)
      : undefined;
    message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
      ? Timestamp.fromPartial(object.updatedAt)
      : undefined;
    return message;
  },
};

function createBaseGameGenre(): GameGenre {
  return { id: 0, slug: "", name: "", createdAt: undefined, updatedAt: undefined };
}

export const GameGenre: MessageFns<GameGenre> = {
  encode(message: GameGenre, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.slug !== "") {
      writer.uint32(18).string(message.slug);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(message.createdAt, writer.uint32(34).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(message.updatedAt, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameGenre {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameGenre();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updatedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameGenre {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: GameGenre): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = fromTimestamp(message.createdAt).toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<GameGenre>): GameGenre {
    return GameGenre.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GameGenre>): GameGenre {
    const message = createBaseGameGenre();
    message.id = object.id ?? 0;
    message.slug = object.slug ?? "";
    message.name = object.name ?? "";
    message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
      ? Timestamp.fromPartial(object.createdAt)
      : undefined;
    message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
      ? Timestamp.fromPartial(object.updatedAt)
      : undefined;
    return message;
  },
};

function createBaseNewGameGenre(): NewGameGenre {
  return { id: undefined, slug: "", name: "", createdAt: undefined, updatedAt: undefined };
}

export const NewGameGenre: MessageFns<NewGameGenre> = {
  encode(message: NewGameGenre, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(8).int32(message.id);
    }
    if (message.slug !== "") {
      writer.uint32(18).string(message.slug);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(message.createdAt, writer.uint32(34).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(message.updatedAt, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NewGameGenre {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNewGameGenre();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updatedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NewGameGenre {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : undefined,
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: NewGameGenre): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = Math.round(message.id);
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = fromTimestamp(message.createdAt).toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<NewGameGenre>): NewGameGenre {
    return NewGameGenre.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NewGameGenre>): NewGameGenre {
    const message = createBaseNewGameGenre();
    message.id = object.id ?? undefined;
    message.slug = object.slug ?? "";
    message.name = object.name ?? "";
    message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
      ? Timestamp.fromPartial(object.createdAt)
      : undefined;
    message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
      ? Timestamp.fromPartial(object.updatedAt)
      : undefined;
    return message;
  },
};

function createBaseUpdatedGameGenre(): UpdatedGameGenre {
  return { id: 0, slug: undefined, name: undefined, createdAt: undefined, updatedAt: undefined };
}

export const UpdatedGameGenre: MessageFns<UpdatedGameGenre> = {
  encode(message: UpdatedGameGenre, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.slug !== undefined) {
      writer.uint32(18).string(message.slug);
    }
    if (message.name !== undefined) {
      writer.uint32(26).string(message.name);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(message.createdAt, writer.uint32(34).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(message.updatedAt, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatedGameGenre {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatedGameGenre();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updatedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatedGameGenre {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      slug: isSet(object.slug) ? globalThis.String(object.slug) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: UpdatedGameGenre): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.slug !== undefined) {
      obj.slug = message.slug;
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = fromTimestamp(message.createdAt).toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatedGameGenre>): UpdatedGameGenre {
    return UpdatedGameGenre.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatedGameGenre>): UpdatedGameGenre {
    const message = createBaseUpdatedGameGenre();
    message.id = object.id ?? 0;
    message.slug = object.slug ?? undefined;
    message.name = object.name ?? undefined;
    message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
      ? Timestamp.fromPartial(object.createdAt)
      : undefined;
    message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
      ? Timestamp.fromPartial(object.updatedAt)
      : undefined;
    return message;
  },
};

function createBaseGameGenreMap(): GameGenreMap {
  return { gameId: 0, genreId: 0, createdAt: undefined, updatedAt: undefined };
}

export const GameGenreMap: MessageFns<GameGenreMap> = {
  encode(message: GameGenreMap, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameId !== 0) {
      writer.uint32(8).int32(message.gameId);
    }
    if (message.genreId !== 0) {
      writer.uint32(16).int32(message.genreId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(message.createdAt, writer.uint32(26).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(message.updatedAt, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameGenreMap {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameGenreMap();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.gameId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.genreId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createdAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.updatedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameGenreMap {
    return {
      gameId: isSet(object.gameId) ? globalThis.Number(object.gameId) : 0,
      genreId: isSet(object.genreId) ? globalThis.Number(object.genreId) : 0,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: GameGenreMap): unknown {
    const obj: any = {};
    if (message.gameId !== 0) {
      obj.gameId = Math.round(message.gameId);
    }
    if (message.genreId !== 0) {
      obj.genreId = Math.round(message.genreId);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = fromTimestamp(message.createdAt).toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<GameGenreMap>): GameGenreMap {
    return GameGenreMap.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GameGenreMap>): GameGenreMap {
    const message = createBaseGameGenreMap();
    message.gameId = object.gameId ?? 0;
    message.genreId = object.genreId ?? 0;
    message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
      ? Timestamp.fromPartial(object.createdAt)
      : undefined;
    message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
      ? Timestamp.fromPartial(object.updatedAt)
      : undefined;
    return message;
  },
};

function createBaseNewGameGenreMap(): NewGameGenreMap {
  return { gameId: 0, genreId: 0, createdAt: undefined, updatedAt: undefined };
}

export const NewGameGenreMap: MessageFns<NewGameGenreMap> = {
  encode(message: NewGameGenreMap, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameId !== 0) {
      writer.uint32(8).int32(message.gameId);
    }
    if (message.genreId !== 0) {
      writer.uint32(16).int32(message.genreId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(message.createdAt, writer.uint32(26).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(message.updatedAt, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NewGameGenreMap {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNewGameGenreMap();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.gameId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.genreId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createdAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.updatedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NewGameGenreMap {
    return {
      gameId: isSet(object.gameId) ? globalThis.Number(object.gameId) : 0,
      genreId: isSet(object.genreId) ? globalThis.Number(object.genreId) : 0,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: NewGameGenreMap): unknown {
    const obj: any = {};
    if (message.gameId !== 0) {
      obj.gameId = Math.round(message.gameId);
    }
    if (message.genreId !== 0) {
      obj.genreId = Math.round(message.genreId);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = fromTimestamp(message.createdAt).toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<NewGameGenreMap>): NewGameGenreMap {
    return NewGameGenreMap.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NewGameGenreMap>): NewGameGenreMap {
    const message = createBaseNewGameGenreMap();
    message.gameId = object.gameId ?? 0;
    message.genreId = object.genreId ?? 0;
    message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
      ? Timestamp.fromPartial(object.createdAt)
      : undefined;
    message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
      ? Timestamp.fromPartial(object.updatedAt)
      : undefined;
    return message;
  },
};

function createBaseUpdatedGameGenreMap(): UpdatedGameGenreMap {
  return { gameId: undefined, genreId: undefined, createdAt: undefined, updatedAt: undefined };
}

export const UpdatedGameGenreMap: MessageFns<UpdatedGameGenreMap> = {
  encode(message: UpdatedGameGenreMap, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameId !== undefined) {
      writer.uint32(8).int32(message.gameId);
    }
    if (message.genreId !== undefined) {
      writer.uint32(16).int32(message.genreId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(message.createdAt, writer.uint32(26).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(message.updatedAt, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatedGameGenreMap {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatedGameGenreMap();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.gameId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.genreId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createdAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.updatedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatedGameGenreMap {
    return {
      gameId: isSet(object.gameId) ? globalThis.Number(object.gameId) : undefined,
      genreId: isSet(object.genreId) ? globalThis.Number(object.genreId) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: UpdatedGameGenreMap): unknown {
    const obj: any = {};
    if (message.gameId !== undefined) {
      obj.gameId = Math.round(message.gameId);
    }
    if (message.genreId !== undefined) {
      obj.genreId = Math.round(message.genreId);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = fromTimestamp(message.createdAt).toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatedGameGenreMap>): UpdatedGameGenreMap {
    return UpdatedGameGenreMap.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatedGameGenreMap>): UpdatedGameGenreMap {
    const message = createBaseUpdatedGameGenreMap();
    message.gameId = object.gameId ?? undefined;
    message.genreId = object.genreId ?? undefined;
    message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
      ? Timestamp.fromPartial(object.createdAt)
      : undefined;
    message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
      ? Timestamp.fromPartial(object.updatedAt)
      : undefined;
    return message;
  },
};

function createBaseSimilarGameMap(): SimilarGameMap {
  return { gameId: 0, similarGameId: 0, createdAt: undefined, updatedAt: undefined };
}

export const SimilarGameMap: MessageFns<SimilarGameMap> = {
  encode(message: SimilarGameMap, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameId !== 0) {
      writer.uint32(8).int32(message.gameId);
    }
    if (message.similarGameId !== 0) {
      writer.uint32(16).int32(message.similarGameId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(message.createdAt, writer.uint32(26).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(message.updatedAt, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SimilarGameMap {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSimilarGameMap();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.gameId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.similarGameId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createdAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.updatedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SimilarGameMap {
    return {
      gameId: isSet(object.gameId) ? globalThis.Number(object.gameId) : 0,
      similarGameId: isSet(object.similarGameId) ? globalThis.Number(object.similarGameId) : 0,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: SimilarGameMap): unknown {
    const obj: any = {};
    if (message.gameId !== 0) {
      obj.gameId = Math.round(message.gameId);
    }
    if (message.similarGameId !== 0) {
      obj.similarGameId = Math.round(message.similarGameId);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = fromTimestamp(message.createdAt).toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<SimilarGameMap>): SimilarGameMap {
    return SimilarGameMap.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SimilarGameMap>): SimilarGameMap {
    const message = createBaseSimilarGameMap();
    message.gameId = object.gameId ?? 0;
    message.similarGameId = object.similarGameId ?? 0;
    message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
      ? Timestamp.fromPartial(object.createdAt)
      : undefined;
    message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
      ? Timestamp.fromPartial(object.updatedAt)
      : undefined;
    return message;
  },
};

function createBaseNewSimilarGameMap(): NewSimilarGameMap {
  return { gameId: 0, similarGameId: 0, createdAt: undefined, updatedAt: undefined };
}

export const NewSimilarGameMap: MessageFns<NewSimilarGameMap> = {
  encode(message: NewSimilarGameMap, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameId !== 0) {
      writer.uint32(8).int32(message.gameId);
    }
    if (message.similarGameId !== 0) {
      writer.uint32(16).int32(message.similarGameId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(message.createdAt, writer.uint32(26).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(message.updatedAt, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NewSimilarGameMap {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNewSimilarGameMap();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.gameId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.similarGameId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createdAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.updatedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NewSimilarGameMap {
    return {
      gameId: isSet(object.gameId) ? globalThis.Number(object.gameId) : 0,
      similarGameId: isSet(object.similarGameId) ? globalThis.Number(object.similarGameId) : 0,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: NewSimilarGameMap): unknown {
    const obj: any = {};
    if (message.gameId !== 0) {
      obj.gameId = Math.round(message.gameId);
    }
    if (message.similarGameId !== 0) {
      obj.similarGameId = Math.round(message.similarGameId);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = fromTimestamp(message.createdAt).toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<NewSimilarGameMap>): NewSimilarGameMap {
    return NewSimilarGameMap.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NewSimilarGameMap>): NewSimilarGameMap {
    const message = createBaseNewSimilarGameMap();
    message.gameId = object.gameId ?? 0;
    message.similarGameId = object.similarGameId ?? 0;
    message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
      ? Timestamp.fromPartial(object.createdAt)
      : undefined;
    message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
      ? Timestamp.fromPartial(object.updatedAt)
      : undefined;
    return message;
  },
};

function createBaseUpdatedSimilarGameMap(): UpdatedSimilarGameMap {
  return { gameId: 0, similarGameId: 0, createdAt: undefined, updatedAt: undefined };
}

export const UpdatedSimilarGameMap: MessageFns<UpdatedSimilarGameMap> = {
  encode(message: UpdatedSimilarGameMap, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameId !== 0) {
      writer.uint32(8).int32(message.gameId);
    }
    if (message.similarGameId !== 0) {
      writer.uint32(16).int32(message.similarGameId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(message.createdAt, writer.uint32(26).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(message.updatedAt, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatedSimilarGameMap {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatedSimilarGameMap();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.gameId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.similarGameId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createdAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.updatedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatedSimilarGameMap {
    return {
      gameId: isSet(object.gameId) ? globalThis.Number(object.gameId) : 0,
      similarGameId: isSet(object.similarGameId) ? globalThis.Number(object.similarGameId) : 0,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: UpdatedSimilarGameMap): unknown {
    const obj: any = {};
    if (message.gameId !== 0) {
      obj.gameId = Math.round(message.gameId);
    }
    if (message.similarGameId !== 0) {
      obj.similarGameId = Math.round(message.similarGameId);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = fromTimestamp(message.createdAt).toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatedSimilarGameMap>): UpdatedSimilarGameMap {
    return UpdatedSimilarGameMap.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatedSimilarGameMap>): UpdatedSimilarGameMap {
    const message = createBaseUpdatedSimilarGameMap();
    message.gameId = object.gameId ?? 0;
    message.similarGameId = object.similarGameId ?? 0;
    message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
      ? Timestamp.fromPartial(object.createdAt)
      : undefined;
    message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
      ? Timestamp.fromPartial(object.updatedAt)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Timestamp {
  if (o instanceof globalThis.Date) {
    return toTimestamp(o);
  } else if (typeof o === "string") {
    return toTimestamp(new globalThis.Date(o));
  } else {
    return Timestamp.fromJSON(o);
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
