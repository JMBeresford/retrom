// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: retrom/models/games.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../google/protobuf/timestamp";
import { StorageType, storageTypeFromJSON, storageTypeToJSON } from "../server/config";

export const protobufPackage = "retrom";

export interface Game {
  id: number;
  path: string;
  platformId?: number | undefined;
  createdAt?: Timestamp | undefined;
  updatedAt?: Timestamp | undefined;
  deletedAt?: Timestamp | undefined;
  isDeleted: boolean;
  defaultFileId?: number | undefined;
  storageType: StorageType;
  thirdParty: boolean;
  steamAppId?: number | undefined;
}

export interface NewGame {
  path: string;
  platformId?: number | undefined;
  createdAt?: Timestamp | undefined;
  updatedAt?: Timestamp | undefined;
  deletedAt?: Timestamp | undefined;
  isDeleted: boolean;
  defaultFileId?: number | undefined;
  storageType?: StorageType | undefined;
  thirdParty?: boolean | undefined;
  steamAppId?: number | undefined;
}

export interface UpdatedGame {
  id: number;
  path?: string | undefined;
  platformId?: number | undefined;
  createdAt?: Timestamp | undefined;
  updatedAt?: Timestamp | undefined;
  deletedAt?: Timestamp | undefined;
  isDeleted?: boolean | undefined;
  defaultFileId?: number | undefined;
  storageType?: StorageType | undefined;
  thirdParty?: boolean | undefined;
  steamAppId?: number | undefined;
}

function createBaseGame(): Game {
  return {
    id: 0,
    path: "",
    platformId: undefined,
    createdAt: undefined,
    updatedAt: undefined,
    deletedAt: undefined,
    isDeleted: false,
    defaultFileId: undefined,
    storageType: 0,
    thirdParty: false,
    steamAppId: undefined,
  };
}

export const Game: MessageFns<Game> = {
  encode(message: Game, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.path !== "") {
      writer.uint32(26).string(message.path);
    }
    if (message.platformId !== undefined) {
      writer.uint32(32).int32(message.platformId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(message.createdAt, writer.uint32(42).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(message.updatedAt, writer.uint32(50).fork()).join();
    }
    if (message.deletedAt !== undefined) {
      Timestamp.encode(message.deletedAt, writer.uint32(58).fork()).join();
    }
    if (message.isDeleted !== false) {
      writer.uint32(64).bool(message.isDeleted);
    }
    if (message.defaultFileId !== undefined) {
      writer.uint32(72).int32(message.defaultFileId);
    }
    if (message.storageType !== 0) {
      writer.uint32(80).int32(message.storageType);
    }
    if (message.thirdParty !== false) {
      writer.uint32(88).bool(message.thirdParty);
    }
    if (message.steamAppId !== undefined) {
      writer.uint32(96).int64(message.steamAppId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Game {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.platformId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.updatedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.deletedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.isDeleted = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.defaultFileId = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.storageType = reader.int32() as any;
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.thirdParty = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.steamAppId = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Game {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      platformId: isSet(object.platformId) ? globalThis.Number(object.platformId) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      deletedAt: isSet(object.deletedAt) ? fromJsonTimestamp(object.deletedAt) : undefined,
      isDeleted: isSet(object.isDeleted) ? globalThis.Boolean(object.isDeleted) : false,
      defaultFileId: isSet(object.defaultFileId) ? globalThis.Number(object.defaultFileId) : undefined,
      storageType: isSet(object.storageType) ? storageTypeFromJSON(object.storageType) : 0,
      thirdParty: isSet(object.thirdParty) ? globalThis.Boolean(object.thirdParty) : false,
      steamAppId: isSet(object.steamAppId) ? globalThis.Number(object.steamAppId) : undefined,
    };
  },

  toJSON(message: Game): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.platformId !== undefined) {
      obj.platformId = Math.round(message.platformId);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = fromTimestamp(message.createdAt).toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
    }
    if (message.deletedAt !== undefined) {
      obj.deletedAt = fromTimestamp(message.deletedAt).toISOString();
    }
    if (message.isDeleted !== false) {
      obj.isDeleted = message.isDeleted;
    }
    if (message.defaultFileId !== undefined) {
      obj.defaultFileId = Math.round(message.defaultFileId);
    }
    if (message.storageType !== 0) {
      obj.storageType = storageTypeToJSON(message.storageType);
    }
    if (message.thirdParty !== false) {
      obj.thirdParty = message.thirdParty;
    }
    if (message.steamAppId !== undefined) {
      obj.steamAppId = Math.round(message.steamAppId);
    }
    return obj;
  },

  create(base?: DeepPartial<Game>): Game {
    return Game.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Game>): Game {
    const message = createBaseGame();
    message.id = object.id ?? 0;
    message.path = object.path ?? "";
    message.platformId = object.platformId ?? undefined;
    message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
      ? Timestamp.fromPartial(object.createdAt)
      : undefined;
    message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
      ? Timestamp.fromPartial(object.updatedAt)
      : undefined;
    message.deletedAt = (object.deletedAt !== undefined && object.deletedAt !== null)
      ? Timestamp.fromPartial(object.deletedAt)
      : undefined;
    message.isDeleted = object.isDeleted ?? false;
    message.defaultFileId = object.defaultFileId ?? undefined;
    message.storageType = object.storageType ?? 0;
    message.thirdParty = object.thirdParty ?? false;
    message.steamAppId = object.steamAppId ?? undefined;
    return message;
  },
};

function createBaseNewGame(): NewGame {
  return {
    path: "",
    platformId: undefined,
    createdAt: undefined,
    updatedAt: undefined,
    deletedAt: undefined,
    isDeleted: false,
    defaultFileId: undefined,
    storageType: undefined,
    thirdParty: undefined,
    steamAppId: undefined,
  };
}

export const NewGame: MessageFns<NewGame> = {
  encode(message: NewGame, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    if (message.platformId !== undefined) {
      writer.uint32(16).int32(message.platformId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(message.createdAt, writer.uint32(26).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(message.updatedAt, writer.uint32(34).fork()).join();
    }
    if (message.deletedAt !== undefined) {
      Timestamp.encode(message.deletedAt, writer.uint32(42).fork()).join();
    }
    if (message.isDeleted !== false) {
      writer.uint32(48).bool(message.isDeleted);
    }
    if (message.defaultFileId !== undefined) {
      writer.uint32(56).int32(message.defaultFileId);
    }
    if (message.storageType !== undefined) {
      writer.uint32(64).int32(message.storageType);
    }
    if (message.thirdParty !== undefined) {
      writer.uint32(72).bool(message.thirdParty);
    }
    if (message.steamAppId !== undefined) {
      writer.uint32(80).int64(message.steamAppId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NewGame {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNewGame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.platformId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createdAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.updatedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.deletedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isDeleted = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.defaultFileId = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.storageType = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.thirdParty = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.steamAppId = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NewGame {
    return {
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      platformId: isSet(object.platformId) ? globalThis.Number(object.platformId) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      deletedAt: isSet(object.deletedAt) ? fromJsonTimestamp(object.deletedAt) : undefined,
      isDeleted: isSet(object.isDeleted) ? globalThis.Boolean(object.isDeleted) : false,
      defaultFileId: isSet(object.defaultFileId) ? globalThis.Number(object.defaultFileId) : undefined,
      storageType: isSet(object.storageType) ? storageTypeFromJSON(object.storageType) : undefined,
      thirdParty: isSet(object.thirdParty) ? globalThis.Boolean(object.thirdParty) : undefined,
      steamAppId: isSet(object.steamAppId) ? globalThis.Number(object.steamAppId) : undefined,
    };
  },

  toJSON(message: NewGame): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.platformId !== undefined) {
      obj.platformId = Math.round(message.platformId);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = fromTimestamp(message.createdAt).toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
    }
    if (message.deletedAt !== undefined) {
      obj.deletedAt = fromTimestamp(message.deletedAt).toISOString();
    }
    if (message.isDeleted !== false) {
      obj.isDeleted = message.isDeleted;
    }
    if (message.defaultFileId !== undefined) {
      obj.defaultFileId = Math.round(message.defaultFileId);
    }
    if (message.storageType !== undefined) {
      obj.storageType = storageTypeToJSON(message.storageType);
    }
    if (message.thirdParty !== undefined) {
      obj.thirdParty = message.thirdParty;
    }
    if (message.steamAppId !== undefined) {
      obj.steamAppId = Math.round(message.steamAppId);
    }
    return obj;
  },

  create(base?: DeepPartial<NewGame>): NewGame {
    return NewGame.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NewGame>): NewGame {
    const message = createBaseNewGame();
    message.path = object.path ?? "";
    message.platformId = object.platformId ?? undefined;
    message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
      ? Timestamp.fromPartial(object.createdAt)
      : undefined;
    message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
      ? Timestamp.fromPartial(object.updatedAt)
      : undefined;
    message.deletedAt = (object.deletedAt !== undefined && object.deletedAt !== null)
      ? Timestamp.fromPartial(object.deletedAt)
      : undefined;
    message.isDeleted = object.isDeleted ?? false;
    message.defaultFileId = object.defaultFileId ?? undefined;
    message.storageType = object.storageType ?? undefined;
    message.thirdParty = object.thirdParty ?? undefined;
    message.steamAppId = object.steamAppId ?? undefined;
    return message;
  },
};

function createBaseUpdatedGame(): UpdatedGame {
  return {
    id: 0,
    path: undefined,
    platformId: undefined,
    createdAt: undefined,
    updatedAt: undefined,
    deletedAt: undefined,
    isDeleted: undefined,
    defaultFileId: undefined,
    storageType: undefined,
    thirdParty: undefined,
    steamAppId: undefined,
  };
}

export const UpdatedGame: MessageFns<UpdatedGame> = {
  encode(message: UpdatedGame, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.path !== undefined) {
      writer.uint32(18).string(message.path);
    }
    if (message.platformId !== undefined) {
      writer.uint32(24).int32(message.platformId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(message.createdAt, writer.uint32(34).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(message.updatedAt, writer.uint32(42).fork()).join();
    }
    if (message.deletedAt !== undefined) {
      Timestamp.encode(message.deletedAt, writer.uint32(50).fork()).join();
    }
    if (message.isDeleted !== undefined) {
      writer.uint32(56).bool(message.isDeleted);
    }
    if (message.defaultFileId !== undefined) {
      writer.uint32(64).int32(message.defaultFileId);
    }
    if (message.storageType !== undefined) {
      writer.uint32(72).int32(message.storageType);
    }
    if (message.thirdParty !== undefined) {
      writer.uint32(80).bool(message.thirdParty);
    }
    if (message.steamAppId !== undefined) {
      writer.uint32(88).int64(message.steamAppId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatedGame {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatedGame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.platformId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updatedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.deletedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isDeleted = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.defaultFileId = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.storageType = reader.int32() as any;
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.thirdParty = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.steamAppId = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatedGame {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      path: isSet(object.path) ? globalThis.String(object.path) : undefined,
      platformId: isSet(object.platformId) ? globalThis.Number(object.platformId) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      deletedAt: isSet(object.deletedAt) ? fromJsonTimestamp(object.deletedAt) : undefined,
      isDeleted: isSet(object.isDeleted) ? globalThis.Boolean(object.isDeleted) : undefined,
      defaultFileId: isSet(object.defaultFileId) ? globalThis.Number(object.defaultFileId) : undefined,
      storageType: isSet(object.storageType) ? storageTypeFromJSON(object.storageType) : undefined,
      thirdParty: isSet(object.thirdParty) ? globalThis.Boolean(object.thirdParty) : undefined,
      steamAppId: isSet(object.steamAppId) ? globalThis.Number(object.steamAppId) : undefined,
    };
  },

  toJSON(message: UpdatedGame): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.path !== undefined) {
      obj.path = message.path;
    }
    if (message.platformId !== undefined) {
      obj.platformId = Math.round(message.platformId);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = fromTimestamp(message.createdAt).toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
    }
    if (message.deletedAt !== undefined) {
      obj.deletedAt = fromTimestamp(message.deletedAt).toISOString();
    }
    if (message.isDeleted !== undefined) {
      obj.isDeleted = message.isDeleted;
    }
    if (message.defaultFileId !== undefined) {
      obj.defaultFileId = Math.round(message.defaultFileId);
    }
    if (message.storageType !== undefined) {
      obj.storageType = storageTypeToJSON(message.storageType);
    }
    if (message.thirdParty !== undefined) {
      obj.thirdParty = message.thirdParty;
    }
    if (message.steamAppId !== undefined) {
      obj.steamAppId = Math.round(message.steamAppId);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatedGame>): UpdatedGame {
    return UpdatedGame.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatedGame>): UpdatedGame {
    const message = createBaseUpdatedGame();
    message.id = object.id ?? 0;
    message.path = object.path ?? undefined;
    message.platformId = object.platformId ?? undefined;
    message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
      ? Timestamp.fromPartial(object.createdAt)
      : undefined;
    message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
      ? Timestamp.fromPartial(object.updatedAt)
      : undefined;
    message.deletedAt = (object.deletedAt !== undefined && object.deletedAt !== null)
      ? Timestamp.fromPartial(object.deletedAt)
      : undefined;
    message.isDeleted = object.isDeleted ?? undefined;
    message.defaultFileId = object.defaultFileId ?? undefined;
    message.storageType = object.storageType ?? undefined;
    message.thirdParty = object.thirdParty ?? undefined;
    message.steamAppId = object.steamAppId ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Timestamp {
  if (o instanceof globalThis.Date) {
    return toTimestamp(o);
  } else if (typeof o === "string") {
    return toTimestamp(new globalThis.Date(o));
  } else {
    return Timestamp.fromJSON(o);
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
