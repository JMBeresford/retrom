// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: retrom/file-explorer.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "retrom";

export const FilesystemNodeType = { DIRECTORY: 0, FILE: 1, UNRECOGNIZED: -1 } as const;

export type FilesystemNodeType = typeof FilesystemNodeType[keyof typeof FilesystemNodeType];

export namespace FilesystemNodeType {
  export type DIRECTORY = typeof FilesystemNodeType.DIRECTORY;
  export type FILE = typeof FilesystemNodeType.FILE;
  export type UNRECOGNIZED = typeof FilesystemNodeType.UNRECOGNIZED;
}

export function filesystemNodeTypeFromJSON(object: any): FilesystemNodeType {
  switch (object) {
    case 0:
    case "DIRECTORY":
      return FilesystemNodeType.DIRECTORY;
    case 1:
    case "FILE":
      return FilesystemNodeType.FILE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FilesystemNodeType.UNRECOGNIZED;
  }
}

export function filesystemNodeTypeToJSON(object: FilesystemNodeType): string {
  switch (object) {
    case FilesystemNodeType.DIRECTORY:
      return "DIRECTORY";
    case FilesystemNodeType.FILE:
      return "FILE";
    case FilesystemNodeType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface FilesystemNode {
  path: string;
  name: string;
  nodeType: FilesystemNodeType;
}

function createBaseFilesystemNode(): FilesystemNode {
  return { path: "", name: "", nodeType: 0 };
}

export const FilesystemNode: MessageFns<FilesystemNode> = {
  encode(message: FilesystemNode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.nodeType !== 0) {
      writer.uint32(24).int32(message.nodeType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FilesystemNode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilesystemNode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.nodeType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FilesystemNode {
    return {
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      nodeType: isSet(object.nodeType) ? filesystemNodeTypeFromJSON(object.nodeType) : 0,
    };
  },

  toJSON(message: FilesystemNode): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.nodeType !== 0) {
      obj.nodeType = filesystemNodeTypeToJSON(message.nodeType);
    }
    return obj;
  },

  create(base?: DeepPartial<FilesystemNode>): FilesystemNode {
    return FilesystemNode.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FilesystemNode>): FilesystemNode {
    const message = createBaseFilesystemNode();
    message.path = object.path ?? "";
    message.name = object.name ?? "";
    message.nodeType = object.nodeType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
