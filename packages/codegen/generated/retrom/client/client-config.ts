// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: retrom/client/client-config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Client } from "../models/clients";

export const protobufPackage = "retrom";

export interface InterfaceConfig {
  fullscreenByDefault: boolean;
  fullscreenConfig?: InterfaceConfig_FullscreenConfig | undefined;
}

export const InterfaceConfig_GameListEntryImage = { COVER: 0, BACKGROUND: 1, UNRECOGNIZED: -1 } as const;

export type InterfaceConfig_GameListEntryImage =
  typeof InterfaceConfig_GameListEntryImage[keyof typeof InterfaceConfig_GameListEntryImage];

export namespace InterfaceConfig_GameListEntryImage {
  export type COVER = typeof InterfaceConfig_GameListEntryImage.COVER;
  export type BACKGROUND = typeof InterfaceConfig_GameListEntryImage.BACKGROUND;
  export type UNRECOGNIZED = typeof InterfaceConfig_GameListEntryImage.UNRECOGNIZED;
}

export function interfaceConfig_GameListEntryImageFromJSON(object: any): InterfaceConfig_GameListEntryImage {
  switch (object) {
    case 0:
    case "COVER":
      return InterfaceConfig_GameListEntryImage.COVER;
    case 1:
    case "BACKGROUND":
      return InterfaceConfig_GameListEntryImage.BACKGROUND;
    case -1:
    case "UNRECOGNIZED":
    default:
      return InterfaceConfig_GameListEntryImage.UNRECOGNIZED;
  }
}

export function interfaceConfig_GameListEntryImageToJSON(object: InterfaceConfig_GameListEntryImage): string {
  switch (object) {
    case InterfaceConfig_GameListEntryImage.COVER:
      return "COVER";
    case InterfaceConfig_GameListEntryImage.BACKGROUND:
      return "BACKGROUND";
    case InterfaceConfig_GameListEntryImage.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface InterfaceConfig_GridListConfig {
  columns: number;
  gap: number;
  imageType: InterfaceConfig_GameListEntryImage;
}

export interface InterfaceConfig_FullscreenConfig {
  gridList?: InterfaceConfig_GridListConfig | undefined;
}

export interface RetromClientConfig {
  server?: RetromClientConfig_Server | undefined;
  config?: RetromClientConfig_Config | undefined;
  flowCompletions?: RetromClientConfig_FlowCompletions | undefined;
}

export interface RetromClientConfig_Server {
  hostname: string;
  port?: number | undefined;
  standalone?: boolean | undefined;
}

export interface RetromClientConfig_Config {
  clientInfo?: Client | undefined;
  interface?: InterfaceConfig | undefined;
  installationDir?: string | undefined;
}

export interface RetromClientConfig_FlowCompletions {
  setupComplete: boolean;
}

function createBaseInterfaceConfig(): InterfaceConfig {
  return { fullscreenByDefault: false, fullscreenConfig: undefined };
}

export const InterfaceConfig: MessageFns<InterfaceConfig> = {
  encode(message: InterfaceConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fullscreenByDefault !== false) {
      writer.uint32(8).bool(message.fullscreenByDefault);
    }
    if (message.fullscreenConfig !== undefined) {
      InterfaceConfig_FullscreenConfig.encode(message.fullscreenConfig, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InterfaceConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInterfaceConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.fullscreenByDefault = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fullscreenConfig = InterfaceConfig_FullscreenConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InterfaceConfig {
    return {
      fullscreenByDefault: isSet(object.fullscreenByDefault) ? globalThis.Boolean(object.fullscreenByDefault) : false,
      fullscreenConfig: isSet(object.fullscreenConfig)
        ? InterfaceConfig_FullscreenConfig.fromJSON(object.fullscreenConfig)
        : undefined,
    };
  },

  toJSON(message: InterfaceConfig): unknown {
    const obj: any = {};
    if (message.fullscreenByDefault !== false) {
      obj.fullscreenByDefault = message.fullscreenByDefault;
    }
    if (message.fullscreenConfig !== undefined) {
      obj.fullscreenConfig = InterfaceConfig_FullscreenConfig.toJSON(message.fullscreenConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<InterfaceConfig>): InterfaceConfig {
    return InterfaceConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InterfaceConfig>): InterfaceConfig {
    const message = createBaseInterfaceConfig();
    message.fullscreenByDefault = object.fullscreenByDefault ?? false;
    message.fullscreenConfig = (object.fullscreenConfig !== undefined && object.fullscreenConfig !== null)
      ? InterfaceConfig_FullscreenConfig.fromPartial(object.fullscreenConfig)
      : undefined;
    return message;
  },
};

function createBaseInterfaceConfig_GridListConfig(): InterfaceConfig_GridListConfig {
  return { columns: 0, gap: 0, imageType: 0 };
}

export const InterfaceConfig_GridListConfig: MessageFns<InterfaceConfig_GridListConfig> = {
  encode(message: InterfaceConfig_GridListConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.columns !== 0) {
      writer.uint32(8).int32(message.columns);
    }
    if (message.gap !== 0) {
      writer.uint32(16).int32(message.gap);
    }
    if (message.imageType !== 0) {
      writer.uint32(24).int32(message.imageType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InterfaceConfig_GridListConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInterfaceConfig_GridListConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.columns = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.gap = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.imageType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InterfaceConfig_GridListConfig {
    return {
      columns: isSet(object.columns) ? globalThis.Number(object.columns) : 0,
      gap: isSet(object.gap) ? globalThis.Number(object.gap) : 0,
      imageType: isSet(object.imageType) ? interfaceConfig_GameListEntryImageFromJSON(object.imageType) : 0,
    };
  },

  toJSON(message: InterfaceConfig_GridListConfig): unknown {
    const obj: any = {};
    if (message.columns !== 0) {
      obj.columns = Math.round(message.columns);
    }
    if (message.gap !== 0) {
      obj.gap = Math.round(message.gap);
    }
    if (message.imageType !== 0) {
      obj.imageType = interfaceConfig_GameListEntryImageToJSON(message.imageType);
    }
    return obj;
  },

  create(base?: DeepPartial<InterfaceConfig_GridListConfig>): InterfaceConfig_GridListConfig {
    return InterfaceConfig_GridListConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InterfaceConfig_GridListConfig>): InterfaceConfig_GridListConfig {
    const message = createBaseInterfaceConfig_GridListConfig();
    message.columns = object.columns ?? 0;
    message.gap = object.gap ?? 0;
    message.imageType = object.imageType ?? 0;
    return message;
  },
};

function createBaseInterfaceConfig_FullscreenConfig(): InterfaceConfig_FullscreenConfig {
  return { gridList: undefined };
}

export const InterfaceConfig_FullscreenConfig: MessageFns<InterfaceConfig_FullscreenConfig> = {
  encode(message: InterfaceConfig_FullscreenConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gridList !== undefined) {
      InterfaceConfig_GridListConfig.encode(message.gridList, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InterfaceConfig_FullscreenConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInterfaceConfig_FullscreenConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gridList = InterfaceConfig_GridListConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InterfaceConfig_FullscreenConfig {
    return { gridList: isSet(object.gridList) ? InterfaceConfig_GridListConfig.fromJSON(object.gridList) : undefined };
  },

  toJSON(message: InterfaceConfig_FullscreenConfig): unknown {
    const obj: any = {};
    if (message.gridList !== undefined) {
      obj.gridList = InterfaceConfig_GridListConfig.toJSON(message.gridList);
    }
    return obj;
  },

  create(base?: DeepPartial<InterfaceConfig_FullscreenConfig>): InterfaceConfig_FullscreenConfig {
    return InterfaceConfig_FullscreenConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InterfaceConfig_FullscreenConfig>): InterfaceConfig_FullscreenConfig {
    const message = createBaseInterfaceConfig_FullscreenConfig();
    message.gridList = (object.gridList !== undefined && object.gridList !== null)
      ? InterfaceConfig_GridListConfig.fromPartial(object.gridList)
      : undefined;
    return message;
  },
};

function createBaseRetromClientConfig(): RetromClientConfig {
  return { server: undefined, config: undefined, flowCompletions: undefined };
}

export const RetromClientConfig: MessageFns<RetromClientConfig> = {
  encode(message: RetromClientConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.server !== undefined) {
      RetromClientConfig_Server.encode(message.server, writer.uint32(10).fork()).join();
    }
    if (message.config !== undefined) {
      RetromClientConfig_Config.encode(message.config, writer.uint32(18).fork()).join();
    }
    if (message.flowCompletions !== undefined) {
      RetromClientConfig_FlowCompletions.encode(message.flowCompletions, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RetromClientConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRetromClientConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.server = RetromClientConfig_Server.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.config = RetromClientConfig_Config.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.flowCompletions = RetromClientConfig_FlowCompletions.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RetromClientConfig {
    return {
      server: isSet(object.server) ? RetromClientConfig_Server.fromJSON(object.server) : undefined,
      config: isSet(object.config) ? RetromClientConfig_Config.fromJSON(object.config) : undefined,
      flowCompletions: isSet(object.flowCompletions)
        ? RetromClientConfig_FlowCompletions.fromJSON(object.flowCompletions)
        : undefined,
    };
  },

  toJSON(message: RetromClientConfig): unknown {
    const obj: any = {};
    if (message.server !== undefined) {
      obj.server = RetromClientConfig_Server.toJSON(message.server);
    }
    if (message.config !== undefined) {
      obj.config = RetromClientConfig_Config.toJSON(message.config);
    }
    if (message.flowCompletions !== undefined) {
      obj.flowCompletions = RetromClientConfig_FlowCompletions.toJSON(message.flowCompletions);
    }
    return obj;
  },

  create(base?: DeepPartial<RetromClientConfig>): RetromClientConfig {
    return RetromClientConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RetromClientConfig>): RetromClientConfig {
    const message = createBaseRetromClientConfig();
    message.server = (object.server !== undefined && object.server !== null)
      ? RetromClientConfig_Server.fromPartial(object.server)
      : undefined;
    message.config = (object.config !== undefined && object.config !== null)
      ? RetromClientConfig_Config.fromPartial(object.config)
      : undefined;
    message.flowCompletions = (object.flowCompletions !== undefined && object.flowCompletions !== null)
      ? RetromClientConfig_FlowCompletions.fromPartial(object.flowCompletions)
      : undefined;
    return message;
  },
};

function createBaseRetromClientConfig_Server(): RetromClientConfig_Server {
  return { hostname: "", port: undefined, standalone: undefined };
}

export const RetromClientConfig_Server: MessageFns<RetromClientConfig_Server> = {
  encode(message: RetromClientConfig_Server, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.hostname !== "") {
      writer.uint32(10).string(message.hostname);
    }
    if (message.port !== undefined) {
      writer.uint32(16).int32(message.port);
    }
    if (message.standalone !== undefined) {
      writer.uint32(24).bool(message.standalone);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RetromClientConfig_Server {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRetromClientConfig_Server();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.hostname = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.port = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.standalone = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RetromClientConfig_Server {
    return {
      hostname: isSet(object.hostname) ? globalThis.String(object.hostname) : "",
      port: isSet(object.port) ? globalThis.Number(object.port) : undefined,
      standalone: isSet(object.standalone) ? globalThis.Boolean(object.standalone) : undefined,
    };
  },

  toJSON(message: RetromClientConfig_Server): unknown {
    const obj: any = {};
    if (message.hostname !== "") {
      obj.hostname = message.hostname;
    }
    if (message.port !== undefined) {
      obj.port = Math.round(message.port);
    }
    if (message.standalone !== undefined) {
      obj.standalone = message.standalone;
    }
    return obj;
  },

  create(base?: DeepPartial<RetromClientConfig_Server>): RetromClientConfig_Server {
    return RetromClientConfig_Server.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RetromClientConfig_Server>): RetromClientConfig_Server {
    const message = createBaseRetromClientConfig_Server();
    message.hostname = object.hostname ?? "";
    message.port = object.port ?? undefined;
    message.standalone = object.standalone ?? undefined;
    return message;
  },
};

function createBaseRetromClientConfig_Config(): RetromClientConfig_Config {
  return { clientInfo: undefined, interface: undefined, installationDir: undefined };
}

export const RetromClientConfig_Config: MessageFns<RetromClientConfig_Config> = {
  encode(message: RetromClientConfig_Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientInfo !== undefined) {
      Client.encode(message.clientInfo, writer.uint32(10).fork()).join();
    }
    if (message.interface !== undefined) {
      InterfaceConfig.encode(message.interface, writer.uint32(18).fork()).join();
    }
    if (message.installationDir !== undefined) {
      writer.uint32(26).string(message.installationDir);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RetromClientConfig_Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRetromClientConfig_Config();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clientInfo = Client.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.interface = InterfaceConfig.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.installationDir = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RetromClientConfig_Config {
    return {
      clientInfo: isSet(object.clientInfo) ? Client.fromJSON(object.clientInfo) : undefined,
      interface: isSet(object.interface) ? InterfaceConfig.fromJSON(object.interface) : undefined,
      installationDir: isSet(object.installationDir) ? globalThis.String(object.installationDir) : undefined,
    };
  },

  toJSON(message: RetromClientConfig_Config): unknown {
    const obj: any = {};
    if (message.clientInfo !== undefined) {
      obj.clientInfo = Client.toJSON(message.clientInfo);
    }
    if (message.interface !== undefined) {
      obj.interface = InterfaceConfig.toJSON(message.interface);
    }
    if (message.installationDir !== undefined) {
      obj.installationDir = message.installationDir;
    }
    return obj;
  },

  create(base?: DeepPartial<RetromClientConfig_Config>): RetromClientConfig_Config {
    return RetromClientConfig_Config.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RetromClientConfig_Config>): RetromClientConfig_Config {
    const message = createBaseRetromClientConfig_Config();
    message.clientInfo = (object.clientInfo !== undefined && object.clientInfo !== null)
      ? Client.fromPartial(object.clientInfo)
      : undefined;
    message.interface = (object.interface !== undefined && object.interface !== null)
      ? InterfaceConfig.fromPartial(object.interface)
      : undefined;
    message.installationDir = object.installationDir ?? undefined;
    return message;
  },
};

function createBaseRetromClientConfig_FlowCompletions(): RetromClientConfig_FlowCompletions {
  return { setupComplete: false };
}

export const RetromClientConfig_FlowCompletions: MessageFns<RetromClientConfig_FlowCompletions> = {
  encode(message: RetromClientConfig_FlowCompletions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.setupComplete !== false) {
      writer.uint32(8).bool(message.setupComplete);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RetromClientConfig_FlowCompletions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRetromClientConfig_FlowCompletions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.setupComplete = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RetromClientConfig_FlowCompletions {
    return { setupComplete: isSet(object.setupComplete) ? globalThis.Boolean(object.setupComplete) : false };
  },

  toJSON(message: RetromClientConfig_FlowCompletions): unknown {
    const obj: any = {};
    if (message.setupComplete !== false) {
      obj.setupComplete = message.setupComplete;
    }
    return obj;
  },

  create(base?: DeepPartial<RetromClientConfig_FlowCompletions>): RetromClientConfig_FlowCompletions {
    return RetromClientConfig_FlowCompletions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RetromClientConfig_FlowCompletions>): RetromClientConfig_FlowCompletions {
    const message = createBaseRetromClientConfig_FlowCompletions();
    message.setupComplete = object.setupComplete ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
