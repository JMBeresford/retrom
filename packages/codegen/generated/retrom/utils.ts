// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: retrom/utils.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "retrom";

export interface VersionAnnouncement {
  versions: string[];
  level: string;
  message: string;
  url?: string | undefined;
}

export interface VersionAnnouncementsPayload {
  announcements: VersionAnnouncement[];
}

function createBaseVersionAnnouncement(): VersionAnnouncement {
  return { versions: [], level: "", message: "", url: undefined };
}

export const VersionAnnouncement: MessageFns<VersionAnnouncement> = {
  encode(message: VersionAnnouncement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.versions) {
      writer.uint32(10).string(v!);
    }
    if (message.level !== "") {
      writer.uint32(18).string(message.level);
    }
    if (message.message !== "") {
      writer.uint32(26).string(message.message);
    }
    if (message.url !== undefined) {
      writer.uint32(34).string(message.url);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VersionAnnouncement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVersionAnnouncement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.versions.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.level = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.url = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VersionAnnouncement {
    return {
      versions: globalThis.Array.isArray(object?.versions) ? object.versions.map((e: any) => globalThis.String(e)) : [],
      level: isSet(object.level) ? globalThis.String(object.level) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : undefined,
    };
  },

  toJSON(message: VersionAnnouncement): unknown {
    const obj: any = {};
    if (message.versions?.length) {
      obj.versions = message.versions;
    }
    if (message.level !== "") {
      obj.level = message.level;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    return obj;
  },

  create(base?: DeepPartial<VersionAnnouncement>): VersionAnnouncement {
    return VersionAnnouncement.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VersionAnnouncement>): VersionAnnouncement {
    const message = createBaseVersionAnnouncement();
    message.versions = object.versions?.map((e) => e) || [];
    message.level = object.level ?? "";
    message.message = object.message ?? "";
    message.url = object.url ?? undefined;
    return message;
  },
};

function createBaseVersionAnnouncementsPayload(): VersionAnnouncementsPayload {
  return { announcements: [] };
}

export const VersionAnnouncementsPayload: MessageFns<VersionAnnouncementsPayload> = {
  encode(message: VersionAnnouncementsPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.announcements) {
      VersionAnnouncement.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VersionAnnouncementsPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVersionAnnouncementsPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.announcements.push(VersionAnnouncement.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VersionAnnouncementsPayload {
    return {
      announcements: globalThis.Array.isArray(object?.announcements)
        ? object.announcements.map((e: any) => VersionAnnouncement.fromJSON(e))
        : [],
    };
  },

  toJSON(message: VersionAnnouncementsPayload): unknown {
    const obj: any = {};
    if (message.announcements?.length) {
      obj.announcements = message.announcements.map((e) => VersionAnnouncement.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<VersionAnnouncementsPayload>): VersionAnnouncementsPayload {
    return VersionAnnouncementsPayload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VersionAnnouncementsPayload>): VersionAnnouncementsPayload {
    const message = createBaseVersionAnnouncementsPayload();
    message.announcements = object.announcements?.map((e) => VersionAnnouncement.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
