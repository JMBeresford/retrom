// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: retrom/jobs.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "retrom";

export const JobStatus = { Running: 0, Success: 1, Failure: 2, Idle: 3, UNRECOGNIZED: -1 } as const;

export type JobStatus = typeof JobStatus[keyof typeof JobStatus];

export namespace JobStatus {
  export type Running = typeof JobStatus.Running;
  export type Success = typeof JobStatus.Success;
  export type Failure = typeof JobStatus.Failure;
  export type Idle = typeof JobStatus.Idle;
  export type UNRECOGNIZED = typeof JobStatus.UNRECOGNIZED;
}

export function jobStatusFromJSON(object: any): JobStatus {
  switch (object) {
    case 0:
    case "Running":
      return JobStatus.Running;
    case 1:
    case "Success":
      return JobStatus.Success;
    case 2:
    case "Failure":
      return JobStatus.Failure;
    case 3:
    case "Idle":
      return JobStatus.Idle;
    case -1:
    case "UNRECOGNIZED":
    default:
      return JobStatus.UNRECOGNIZED;
  }
}

export function jobStatusToJSON(object: JobStatus): string {
  switch (object) {
    case JobStatus.Running:
      return "Running";
    case JobStatus.Success:
      return "Success";
    case JobStatus.Failure:
      return "Failure";
    case JobStatus.Idle:
      return "Idle";
    case JobStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface JobProgress {
  percent: number;
  status: JobStatus;
  name: string;
}

function createBaseJobProgress(): JobProgress {
  return { percent: 0, status: 0, name: "" };
}

export const JobProgress: MessageFns<JobProgress> = {
  encode(message: JobProgress, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.percent !== 0) {
      writer.uint32(8).uint32(message.percent);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JobProgress {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJobProgress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.percent = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JobProgress {
    return {
      percent: isSet(object.percent) ? globalThis.Number(object.percent) : 0,
      status: isSet(object.status) ? jobStatusFromJSON(object.status) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: JobProgress): unknown {
    const obj: any = {};
    if (message.percent !== 0) {
      obj.percent = Math.round(message.percent);
    }
    if (message.status !== 0) {
      obj.status = jobStatusToJSON(message.status);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<JobProgress>): JobProgress {
    return JobProgress.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<JobProgress>): JobProgress {
    const message = createBaseJobProgress();
    message.percent = object.percent ?? 0;
    message.status = object.status ?? 0;
    message.name = object.name ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
