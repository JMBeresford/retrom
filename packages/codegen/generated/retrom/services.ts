// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: retrom/services.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { FilesystemNode } from "./file-explorer";
import { JobProgress } from "./jobs";
import { Client, NewClient, UpdatedClient } from "./models/clients";
import {
  DefaultEmulatorProfile,
  Emulator,
  EmulatorProfile,
  LocalEmulatorConfig,
  NewEmulator,
  NewEmulatorProfile,
  NewLocalEmulatorConfig,
  UpdatedDefaultEmulatorProfile,
  UpdatedEmulator,
  UpdatedEmulatorProfile,
  UpdatedLocalEmulatorConfig,
} from "./models/emulators";
import { GameFile, UpdatedGameFile } from "./models/game-files";
import { Game, UpdatedGame } from "./models/games";
import {
  GameGenre,
  GameMetadata,
  NewGameMetadata,
  NewPlatformMetadata,
  PlatformMetadata,
  UpdatedGameMetadata,
  UpdatedPlatformMetadata,
} from "./models/metadata";
import { Platform, UpdatedPlatform } from "./models/platforms";
import {
  IgdbFields,
  IgdbFilters,
  IgdbGameSearchQuery,
  IgdbPagination,
  IgdbPlatformSearchQuery,
  IgdbSearch,
} from "./providers/igdb";
import { ServerConfig } from "./server/config";
import { ServerInfo } from "./server/server-info";

export const protobufPackage = "retrom";

export interface UpdateLibraryRequest {
}

export interface UpdateLibraryResponse {
  jobIds: string[];
}

export interface UpdateLibraryMetadataRequest {
  overwrite?: boolean | undefined;
}

export interface UpdateLibraryMetadataResponse {
  platformMetadataJobId: string;
  gameMetadataJobId: string;
  extraMetadataJobId: string;
  steamMetadataJobId?: string | undefined;
}

export interface GetPlatformsRequest {
  ids: number[];
  withMetadata?: boolean | undefined;
  includeDeleted?: boolean | undefined;
}

export interface GetPlatformsResponse {
  platforms: Platform[];
  metadata: PlatformMetadata[];
}

export interface GetGamesRequest {
  platformIds: number[];
  ids: number[];
  withMetadata?: boolean | undefined;
  withFiles?: boolean | undefined;
  includeDeleted?: boolean | undefined;
}

export interface GetGamesResponse {
  games: Game[];
  metadata: GameMetadata[];
  gameFiles: GameFile[];
}

export interface GetGameMetadataRequest {
  gameIds: number[];
}

export interface GetGameMetadataResponse {
  metadata: GameMetadata[];
  similarGames: Map<number, GetGameMetadataResponse_SimilarGames>;
  genres: Map<number, GetGameMetadataResponse_GameGenres>;
}

export interface GetGameMetadataResponse_GameGenres {
  value: GameGenre[];
}

export interface GetGameMetadataResponse_SimilarGames {
  value: Game[];
}

export interface GetGameMetadataResponse_SimilarGamesEntry {
  key: number;
  value?: GetGameMetadataResponse_SimilarGames | undefined;
}

export interface GetGameMetadataResponse_GenresEntry {
  key: number;
  value?: GetGameMetadataResponse_GameGenres | undefined;
}

export interface GetPlatformMetadataRequest {
  platformIds: number[];
}

export interface GetPlatformMetadataResponse {
  metadata: PlatformMetadata[];
}

export interface GetIgdbGameSearchResultsRequest {
  query?: IgdbGameSearchQuery | undefined;
}

export interface GetIgdbGameSearchResultsResponse {
  metadata: NewGameMetadata[];
}

export interface UpdateGameMetadataRequest {
  metadata: UpdatedGameMetadata[];
}

export interface UpdateGameMetadataResponse {
  metadataUpdated: GameMetadata[];
}

export interface GetIgdbPlatformSearchResultsRequest {
  query?: IgdbPlatformSearchQuery | undefined;
}

export interface GetIgdbPlatformSearchResultsResponse {
  metadata: NewPlatformMetadata[];
}

export interface UpdatePlatformMetadataRequest {
  metadata: UpdatedPlatformMetadata[];
}

export interface UpdatePlatformMetadataResponse {
  metadataUpdated: PlatformMetadata[];
}

/** Arbitrary search query for IGDB */
export interface GetIgdbSearchRequest {
  searchType: GetIgdbSearchRequest_IgdbSearchType;
  search?: IgdbSearch | undefined;
  pagination?: IgdbPagination | undefined;
  filters?: IgdbFilters | undefined;
  fields?: IgdbFields | undefined;
}

export const GetIgdbSearchRequest_IgdbSearchType = { GAME: 0, PLATFORM: 1, UNRECOGNIZED: -1 } as const;

export type GetIgdbSearchRequest_IgdbSearchType =
  typeof GetIgdbSearchRequest_IgdbSearchType[keyof typeof GetIgdbSearchRequest_IgdbSearchType];

export namespace GetIgdbSearchRequest_IgdbSearchType {
  export type GAME = typeof GetIgdbSearchRequest_IgdbSearchType.GAME;
  export type PLATFORM = typeof GetIgdbSearchRequest_IgdbSearchType.PLATFORM;
  export type UNRECOGNIZED = typeof GetIgdbSearchRequest_IgdbSearchType.UNRECOGNIZED;
}

export function getIgdbSearchRequest_IgdbSearchTypeFromJSON(object: any): GetIgdbSearchRequest_IgdbSearchType {
  switch (object) {
    case 0:
    case "GAME":
      return GetIgdbSearchRequest_IgdbSearchType.GAME;
    case 1:
    case "PLATFORM":
      return GetIgdbSearchRequest_IgdbSearchType.PLATFORM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GetIgdbSearchRequest_IgdbSearchType.UNRECOGNIZED;
  }
}

export function getIgdbSearchRequest_IgdbSearchTypeToJSON(object: GetIgdbSearchRequest_IgdbSearchType): string {
  switch (object) {
    case GetIgdbSearchRequest_IgdbSearchType.GAME:
      return "GAME";
    case GetIgdbSearchRequest_IgdbSearchType.PLATFORM:
      return "PLATFORM";
    case GetIgdbSearchRequest_IgdbSearchType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface IgdbSearchGameResponse {
  games: NewGameMetadata[];
}

export interface IgdbSearchPlatformResponse {
  platforms: NewPlatformMetadata[];
}

export interface GetIgdbSearchResponse {
  searchResults?: { $case: "gameMatches"; gameMatches: IgdbSearchGameResponse } | {
    $case: "platformMatches";
    platformMatches: IgdbSearchPlatformResponse;
  } | undefined;
}

export interface DeleteLibraryRequest {
}

export interface DeleteLibraryResponse {
}

export interface DeleteMissingEntriesRequest {
  dryRun: boolean;
}

export interface DeleteMissingEntriesResponse {
  platformsDeleted: Platform[];
  gamesDeleted: Game[];
  gameFilesDeleted: GameFile[];
}

export interface DeletePlatformsRequest {
  ids: number[];
  deleteFromDisk: boolean;
  blacklistEntries: boolean;
}

export interface DeletePlatformsResponse {
  platformsDeleted: Platform[];
}

export interface UpdatePlatformsRequest {
  platforms: UpdatedPlatform[];
}

export interface UpdatePlatformsResponse {
  platformsUpdated: Platform[];
}

export interface DeleteGamesRequest {
  ids: number[];
  deleteFromDisk: boolean;
  blacklistEntries: boolean;
}

export interface DeleteGamesResponse {
  gamesDeleted: Game[];
}

export interface UpdateGamesRequest {
  games: UpdatedGame[];
}

export interface UpdateGamesResponse {
  gamesUpdated: Game[];
}

export interface CreateClientRequest {
  client?: NewClient | undefined;
}

export interface CreateClientResponse {
  clientCreated?: Client | undefined;
}

export interface GetClientsRequest {
  ids: number[];
  names: string[];
}

export interface GetClientsResponse {
  clients: Client[];
}

export interface UpdateClientsRequest {
  clients: UpdatedClient[];
}

export interface UpdateClientsResponse {
  clientsUpdated: Client[];
}

export interface DeleteClientsRequest {
  ids: number[];
}

export interface DeleteClientsResponse {
  clientsDeleted: Client[];
}

export interface GetServerInfoRequest {
}

export interface GetServerInfoResponse {
  serverInfo?: ServerInfo | undefined;
}

export interface GetServerConfigRequest {
}

export interface GetServerConfigResponse {
  config?: ServerConfig | undefined;
}

export interface UpdateServerConfigRequest {
  config?: ServerConfig | undefined;
}

export interface UpdateServerConfigResponse {
  configUpdated?: ServerConfig | undefined;
}

export interface CreateEmulatorsRequest {
  emulators: NewEmulator[];
}

export interface CreateEmulatorsResponse {
  emulatorsCreated: Emulator[];
}

export interface GetEmulatorsRequest {
  ids: number[];
  supportedPlatformIds: number[];
}

export interface GetEmulatorsResponse {
  emulators: Emulator[];
}

export interface UpdateEmulatorsRequest {
  emulators: UpdatedEmulator[];
}

export interface UpdateEmulatorsResponse {
  emulatorsUpdated: Emulator[];
}

export interface DeleteEmulatorsRequest {
  ids: number[];
}

export interface DeleteEmulatorsResponse {
  emulatorsDeleted: Emulator[];
}

export interface CreateEmulatorProfilesRequest {
  profiles: NewEmulatorProfile[];
}

export interface CreateEmulatorProfilesResponse {
  profilesCreated: EmulatorProfile[];
}

export interface GetEmulatorProfilesRequest {
  ids: number[];
  emulatorIds: number[];
}

export interface GetEmulatorProfilesResponse {
  profiles: EmulatorProfile[];
}

export interface UpdateEmulatorProfilesRequest {
  profiles: UpdatedEmulatorProfile[];
}

export interface UpdateEmulatorProfilesResponse {
  profilesUpdated: EmulatorProfile[];
}

export interface DeleteEmulatorProfilesRequest {
  ids: number[];
}

export interface DeleteEmulatorProfilesResponse {
  profilesDeleted: EmulatorProfile[];
}

export interface GetDefaultEmulatorProfilesRequest {
  platformIds: number[];
}

export interface GetDefaultEmulatorProfilesResponse {
  defaultProfiles: DefaultEmulatorProfile[];
}

export interface UpdateDefaultEmulatorProfilesRequest {
  defaultProfiles: UpdatedDefaultEmulatorProfile[];
}

export interface UpdateDefaultEmulatorProfilesResponse {
  defaultProfilesUpdated: DefaultEmulatorProfile[];
}

export interface DeleteDefaultEmulatorProfilesRequest {
  platformIds: number[];
}

export interface DeleteDefaultEmulatorProfilesResponse {
  defaultProfilesDeleted: DefaultEmulatorProfile[];
}

export interface DeleteGameFilesRequest {
  ids: number[];
  deleteFromDisk: boolean;
  blacklistEntries: boolean;
}

export interface DeleteGameFilesResponse {
  gameFilesDeleted: GameFile[];
}

export interface UpdateGameFilesRequest {
  gameFiles: UpdatedGameFile[];
}

export interface UpdateGameFilesResponse {
  gameFilesUpdated: GameFile[];
}

export interface GetJobsRequest {
}

export interface GetJobsResponse {
  jobs: JobProgress[];
}

export interface GetJobSubscriptionRequest {
  jobId: string;
}

export interface GetJobSubscriptionResponse {
  job?: JobProgress | undefined;
}

export interface GetFilesystemNodeRequest {
  path?: string | undefined;
}

export interface GetFilesystemNodeResponse {
  node?: FilesystemNode | undefined;
  children: FilesystemNode[];
}

export interface CreateLocalEmulatorConfigsRequest {
  configs: NewLocalEmulatorConfig[];
}

export interface CreateLocalEmulatorConfigsResponse {
  configsCreated: LocalEmulatorConfig[];
}

export interface GetLocalEmulatorConfigsRequest {
  emulatorIds: number[];
  clientId: number;
}

export interface GetLocalEmulatorConfigsResponse {
  configs: LocalEmulatorConfig[];
}

export interface UpdateLocalEmulatorConfigsRequest {
  configs: UpdatedLocalEmulatorConfig[];
}

export interface UpdateLocalEmulatorConfigsResponse {
  configsUpdated: LocalEmulatorConfig[];
}

export interface DeleteLocalEmulatorConfigsRequest {
  ids: number[];
}

export interface DeleteLocalEmulatorConfigsResponse {
  configsDeleted: LocalEmulatorConfig[];
}

function createBaseUpdateLibraryRequest(): UpdateLibraryRequest {
  return {};
}

export const UpdateLibraryRequest: MessageFns<UpdateLibraryRequest> = {
  encode(_: UpdateLibraryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateLibraryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLibraryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UpdateLibraryRequest {
    return {};
  },

  toJSON(_: UpdateLibraryRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<UpdateLibraryRequest>): UpdateLibraryRequest {
    return UpdateLibraryRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<UpdateLibraryRequest>): UpdateLibraryRequest {
    const message = createBaseUpdateLibraryRequest();
    return message;
  },
};

function createBaseUpdateLibraryResponse(): UpdateLibraryResponse {
  return { jobIds: [] };
}

export const UpdateLibraryResponse: MessageFns<UpdateLibraryResponse> = {
  encode(message: UpdateLibraryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.jobIds) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateLibraryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLibraryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.jobIds.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLibraryResponse {
    return {
      jobIds: globalThis.Array.isArray(object?.jobIds) ? object.jobIds.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: UpdateLibraryResponse): unknown {
    const obj: any = {};
    if (message.jobIds?.length) {
      obj.jobIds = message.jobIds;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateLibraryResponse>): UpdateLibraryResponse {
    return UpdateLibraryResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateLibraryResponse>): UpdateLibraryResponse {
    const message = createBaseUpdateLibraryResponse();
    message.jobIds = object.jobIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdateLibraryMetadataRequest(): UpdateLibraryMetadataRequest {
  return { overwrite: undefined };
}

export const UpdateLibraryMetadataRequest: MessageFns<UpdateLibraryMetadataRequest> = {
  encode(message: UpdateLibraryMetadataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.overwrite !== undefined) {
      writer.uint32(8).bool(message.overwrite);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateLibraryMetadataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLibraryMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.overwrite = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLibraryMetadataRequest {
    return { overwrite: isSet(object.overwrite) ? globalThis.Boolean(object.overwrite) : undefined };
  },

  toJSON(message: UpdateLibraryMetadataRequest): unknown {
    const obj: any = {};
    if (message.overwrite !== undefined) {
      obj.overwrite = message.overwrite;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateLibraryMetadataRequest>): UpdateLibraryMetadataRequest {
    return UpdateLibraryMetadataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateLibraryMetadataRequest>): UpdateLibraryMetadataRequest {
    const message = createBaseUpdateLibraryMetadataRequest();
    message.overwrite = object.overwrite ?? undefined;
    return message;
  },
};

function createBaseUpdateLibraryMetadataResponse(): UpdateLibraryMetadataResponse {
  return { platformMetadataJobId: "", gameMetadataJobId: "", extraMetadataJobId: "", steamMetadataJobId: undefined };
}

export const UpdateLibraryMetadataResponse: MessageFns<UpdateLibraryMetadataResponse> = {
  encode(message: UpdateLibraryMetadataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.platformMetadataJobId !== "") {
      writer.uint32(10).string(message.platformMetadataJobId);
    }
    if (message.gameMetadataJobId !== "") {
      writer.uint32(18).string(message.gameMetadataJobId);
    }
    if (message.extraMetadataJobId !== "") {
      writer.uint32(26).string(message.extraMetadataJobId);
    }
    if (message.steamMetadataJobId !== undefined) {
      writer.uint32(34).string(message.steamMetadataJobId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateLibraryMetadataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLibraryMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.platformMetadataJobId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gameMetadataJobId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.extraMetadataJobId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.steamMetadataJobId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLibraryMetadataResponse {
    return {
      platformMetadataJobId: isSet(object.platformMetadataJobId) ? globalThis.String(object.platformMetadataJobId) : "",
      gameMetadataJobId: isSet(object.gameMetadataJobId) ? globalThis.String(object.gameMetadataJobId) : "",
      extraMetadataJobId: isSet(object.extraMetadataJobId) ? globalThis.String(object.extraMetadataJobId) : "",
      steamMetadataJobId: isSet(object.steamMetadataJobId) ? globalThis.String(object.steamMetadataJobId) : undefined,
    };
  },

  toJSON(message: UpdateLibraryMetadataResponse): unknown {
    const obj: any = {};
    if (message.platformMetadataJobId !== "") {
      obj.platformMetadataJobId = message.platformMetadataJobId;
    }
    if (message.gameMetadataJobId !== "") {
      obj.gameMetadataJobId = message.gameMetadataJobId;
    }
    if (message.extraMetadataJobId !== "") {
      obj.extraMetadataJobId = message.extraMetadataJobId;
    }
    if (message.steamMetadataJobId !== undefined) {
      obj.steamMetadataJobId = message.steamMetadataJobId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateLibraryMetadataResponse>): UpdateLibraryMetadataResponse {
    return UpdateLibraryMetadataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateLibraryMetadataResponse>): UpdateLibraryMetadataResponse {
    const message = createBaseUpdateLibraryMetadataResponse();
    message.platformMetadataJobId = object.platformMetadataJobId ?? "";
    message.gameMetadataJobId = object.gameMetadataJobId ?? "";
    message.extraMetadataJobId = object.extraMetadataJobId ?? "";
    message.steamMetadataJobId = object.steamMetadataJobId ?? undefined;
    return message;
  },
};

function createBaseGetPlatformsRequest(): GetPlatformsRequest {
  return { ids: [], withMetadata: undefined, includeDeleted: undefined };
}

export const GetPlatformsRequest: MessageFns<GetPlatformsRequest> = {
  encode(message: GetPlatformsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.ids) {
      writer.int32(v);
    }
    writer.join();
    if (message.withMetadata !== undefined) {
      writer.uint32(16).bool(message.withMetadata);
    }
    if (message.includeDeleted !== undefined) {
      writer.uint32(24).bool(message.includeDeleted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPlatformsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPlatformsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.ids.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ids.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.withMetadata = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.includeDeleted = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPlatformsRequest {
    return {
      ids: globalThis.Array.isArray(object?.ids) ? object.ids.map((e: any) => globalThis.Number(e)) : [],
      withMetadata: isSet(object.withMetadata) ? globalThis.Boolean(object.withMetadata) : undefined,
      includeDeleted: isSet(object.includeDeleted) ? globalThis.Boolean(object.includeDeleted) : undefined,
    };
  },

  toJSON(message: GetPlatformsRequest): unknown {
    const obj: any = {};
    if (message.ids?.length) {
      obj.ids = message.ids.map((e) => Math.round(e));
    }
    if (message.withMetadata !== undefined) {
      obj.withMetadata = message.withMetadata;
    }
    if (message.includeDeleted !== undefined) {
      obj.includeDeleted = message.includeDeleted;
    }
    return obj;
  },

  create(base?: DeepPartial<GetPlatformsRequest>): GetPlatformsRequest {
    return GetPlatformsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPlatformsRequest>): GetPlatformsRequest {
    const message = createBaseGetPlatformsRequest();
    message.ids = object.ids?.map((e) => e) || [];
    message.withMetadata = object.withMetadata ?? undefined;
    message.includeDeleted = object.includeDeleted ?? undefined;
    return message;
  },
};

function createBaseGetPlatformsResponse(): GetPlatformsResponse {
  return { platforms: [], metadata: [] };
}

export const GetPlatformsResponse: MessageFns<GetPlatformsResponse> = {
  encode(message: GetPlatformsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.platforms) {
      Platform.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.metadata) {
      PlatformMetadata.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPlatformsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPlatformsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.platforms.push(Platform.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata.push(PlatformMetadata.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPlatformsResponse {
    return {
      platforms: globalThis.Array.isArray(object?.platforms)
        ? object.platforms.map((e: any) => Platform.fromJSON(e))
        : [],
      metadata: globalThis.Array.isArray(object?.metadata)
        ? object.metadata.map((e: any) => PlatformMetadata.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetPlatformsResponse): unknown {
    const obj: any = {};
    if (message.platforms?.length) {
      obj.platforms = message.platforms.map((e) => Platform.toJSON(e));
    }
    if (message.metadata?.length) {
      obj.metadata = message.metadata.map((e) => PlatformMetadata.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetPlatformsResponse>): GetPlatformsResponse {
    return GetPlatformsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPlatformsResponse>): GetPlatformsResponse {
    const message = createBaseGetPlatformsResponse();
    message.platforms = object.platforms?.map((e) => Platform.fromPartial(e)) || [];
    message.metadata = object.metadata?.map((e) => PlatformMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetGamesRequest(): GetGamesRequest {
  return { platformIds: [], ids: [], withMetadata: undefined, withFiles: undefined, includeDeleted: undefined };
}

export const GetGamesRequest: MessageFns<GetGamesRequest> = {
  encode(message: GetGamesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.platformIds) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(18).fork();
    for (const v of message.ids) {
      writer.int32(v);
    }
    writer.join();
    if (message.withMetadata !== undefined) {
      writer.uint32(24).bool(message.withMetadata);
    }
    if (message.withFiles !== undefined) {
      writer.uint32(32).bool(message.withFiles);
    }
    if (message.includeDeleted !== undefined) {
      writer.uint32(40).bool(message.includeDeleted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGamesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGamesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.platformIds.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.platformIds.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag === 16) {
            message.ids.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ids.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.withMetadata = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.withFiles = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.includeDeleted = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGamesRequest {
    return {
      platformIds: globalThis.Array.isArray(object?.platformIds)
        ? object.platformIds.map((e: any) => globalThis.Number(e))
        : [],
      ids: globalThis.Array.isArray(object?.ids) ? object.ids.map((e: any) => globalThis.Number(e)) : [],
      withMetadata: isSet(object.withMetadata) ? globalThis.Boolean(object.withMetadata) : undefined,
      withFiles: isSet(object.withFiles) ? globalThis.Boolean(object.withFiles) : undefined,
      includeDeleted: isSet(object.includeDeleted) ? globalThis.Boolean(object.includeDeleted) : undefined,
    };
  },

  toJSON(message: GetGamesRequest): unknown {
    const obj: any = {};
    if (message.platformIds?.length) {
      obj.platformIds = message.platformIds.map((e) => Math.round(e));
    }
    if (message.ids?.length) {
      obj.ids = message.ids.map((e) => Math.round(e));
    }
    if (message.withMetadata !== undefined) {
      obj.withMetadata = message.withMetadata;
    }
    if (message.withFiles !== undefined) {
      obj.withFiles = message.withFiles;
    }
    if (message.includeDeleted !== undefined) {
      obj.includeDeleted = message.includeDeleted;
    }
    return obj;
  },

  create(base?: DeepPartial<GetGamesRequest>): GetGamesRequest {
    return GetGamesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGamesRequest>): GetGamesRequest {
    const message = createBaseGetGamesRequest();
    message.platformIds = object.platformIds?.map((e) => e) || [];
    message.ids = object.ids?.map((e) => e) || [];
    message.withMetadata = object.withMetadata ?? undefined;
    message.withFiles = object.withFiles ?? undefined;
    message.includeDeleted = object.includeDeleted ?? undefined;
    return message;
  },
};

function createBaseGetGamesResponse(): GetGamesResponse {
  return { games: [], metadata: [], gameFiles: [] };
}

export const GetGamesResponse: MessageFns<GetGamesResponse> = {
  encode(message: GetGamesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.games) {
      Game.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.metadata) {
      GameMetadata.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.gameFiles) {
      GameFile.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGamesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGamesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.games.push(Game.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata.push(GameMetadata.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.gameFiles.push(GameFile.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGamesResponse {
    return {
      games: globalThis.Array.isArray(object?.games) ? object.games.map((e: any) => Game.fromJSON(e)) : [],
      metadata: globalThis.Array.isArray(object?.metadata)
        ? object.metadata.map((e: any) => GameMetadata.fromJSON(e))
        : [],
      gameFiles: globalThis.Array.isArray(object?.gameFiles)
        ? object.gameFiles.map((e: any) => GameFile.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetGamesResponse): unknown {
    const obj: any = {};
    if (message.games?.length) {
      obj.games = message.games.map((e) => Game.toJSON(e));
    }
    if (message.metadata?.length) {
      obj.metadata = message.metadata.map((e) => GameMetadata.toJSON(e));
    }
    if (message.gameFiles?.length) {
      obj.gameFiles = message.gameFiles.map((e) => GameFile.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetGamesResponse>): GetGamesResponse {
    return GetGamesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGamesResponse>): GetGamesResponse {
    const message = createBaseGetGamesResponse();
    message.games = object.games?.map((e) => Game.fromPartial(e)) || [];
    message.metadata = object.metadata?.map((e) => GameMetadata.fromPartial(e)) || [];
    message.gameFiles = object.gameFiles?.map((e) => GameFile.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetGameMetadataRequest(): GetGameMetadataRequest {
  return { gameIds: [] };
}

export const GetGameMetadataRequest: MessageFns<GetGameMetadataRequest> = {
  encode(message: GetGameMetadataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.gameIds) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGameMetadataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGameMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.gameIds.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.gameIds.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGameMetadataRequest {
    return {
      gameIds: globalThis.Array.isArray(object?.gameIds) ? object.gameIds.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: GetGameMetadataRequest): unknown {
    const obj: any = {};
    if (message.gameIds?.length) {
      obj.gameIds = message.gameIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetGameMetadataRequest>): GetGameMetadataRequest {
    return GetGameMetadataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGameMetadataRequest>): GetGameMetadataRequest {
    const message = createBaseGetGameMetadataRequest();
    message.gameIds = object.gameIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetGameMetadataResponse(): GetGameMetadataResponse {
  return { metadata: [], similarGames: new Map(), genres: new Map() };
}

export const GetGameMetadataResponse: MessageFns<GetGameMetadataResponse> = {
  encode(message: GetGameMetadataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.metadata) {
      GameMetadata.encode(v!, writer.uint32(10).fork()).join();
    }
    message.similarGames.forEach((value, key) => {
      GetGameMetadataResponse_SimilarGamesEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    message.genres.forEach((value, key) => {
      GetGameMetadataResponse_GenresEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGameMetadataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGameMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata.push(GameMetadata.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = GetGameMetadataResponse_SimilarGamesEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.similarGames.set(entry2.key, entry2.value);
          }
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = GetGameMetadataResponse_GenresEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.genres.set(entry3.key, entry3.value);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGameMetadataResponse {
    return {
      metadata: globalThis.Array.isArray(object?.metadata)
        ? object.metadata.map((e: any) => GameMetadata.fromJSON(e))
        : [],
      similarGames: isObject(object.similarGames)
        ? Object.entries(object.similarGames).reduce<Map<number, GetGameMetadataResponse_SimilarGames>>(
          (acc, [key, value]) => {
            acc.set(globalThis.Number(key), GetGameMetadataResponse_SimilarGames.fromJSON(value));
            return acc;
          },
          new Map(),
        )
        : new Map(),
      genres: isObject(object.genres)
        ? Object.entries(object.genres).reduce<Map<number, GetGameMetadataResponse_GameGenres>>((acc, [key, value]) => {
          acc.set(globalThis.Number(key), GetGameMetadataResponse_GameGenres.fromJSON(value));
          return acc;
        }, new Map())
        : new Map(),
    };
  },

  toJSON(message: GetGameMetadataResponse): unknown {
    const obj: any = {};
    if (message.metadata?.length) {
      obj.metadata = message.metadata.map((e) => GameMetadata.toJSON(e));
    }
    if (message.similarGames?.size) {
      obj.similarGames = {};
      message.similarGames.forEach((v, k) => {
        obj.similarGames[k] = GetGameMetadataResponse_SimilarGames.toJSON(v);
      });
    }
    if (message.genres?.size) {
      obj.genres = {};
      message.genres.forEach((v, k) => {
        obj.genres[k] = GetGameMetadataResponse_GameGenres.toJSON(v);
      });
    }
    return obj;
  },

  create(base?: DeepPartial<GetGameMetadataResponse>): GetGameMetadataResponse {
    return GetGameMetadataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGameMetadataResponse>): GetGameMetadataResponse {
    const message = createBaseGetGameMetadataResponse();
    message.metadata = object.metadata?.map((e) => GameMetadata.fromPartial(e)) || [];
    message.similarGames = (() => {
      const m = new Map();
      (object.similarGames as Map<number, GetGameMetadataResponse_SimilarGames> ?? new Map()).forEach((value, key) => {
        if (value !== undefined) {
          m.set(key, GetGameMetadataResponse_SimilarGames.fromPartial(value));
        }
      });
      return m;
    })();
    message.genres = (() => {
      const m = new Map();
      (object.genres as Map<number, GetGameMetadataResponse_GameGenres> ?? new Map()).forEach((value, key) => {
        if (value !== undefined) {
          m.set(key, GetGameMetadataResponse_GameGenres.fromPartial(value));
        }
      });
      return m;
    })();
    return message;
  },
};

function createBaseGetGameMetadataResponse_GameGenres(): GetGameMetadataResponse_GameGenres {
  return { value: [] };
}

export const GetGameMetadataResponse_GameGenres: MessageFns<GetGameMetadataResponse_GameGenres> = {
  encode(message: GetGameMetadataResponse_GameGenres, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.value) {
      GameGenre.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGameMetadataResponse_GameGenres {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGameMetadataResponse_GameGenres();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.value.push(GameGenre.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGameMetadataResponse_GameGenres {
    return {
      value: globalThis.Array.isArray(object?.value) ? object.value.map((e: any) => GameGenre.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetGameMetadataResponse_GameGenres): unknown {
    const obj: any = {};
    if (message.value?.length) {
      obj.value = message.value.map((e) => GameGenre.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetGameMetadataResponse_GameGenres>): GetGameMetadataResponse_GameGenres {
    return GetGameMetadataResponse_GameGenres.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGameMetadataResponse_GameGenres>): GetGameMetadataResponse_GameGenres {
    const message = createBaseGetGameMetadataResponse_GameGenres();
    message.value = object.value?.map((e) => GameGenre.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetGameMetadataResponse_SimilarGames(): GetGameMetadataResponse_SimilarGames {
  return { value: [] };
}

export const GetGameMetadataResponse_SimilarGames: MessageFns<GetGameMetadataResponse_SimilarGames> = {
  encode(message: GetGameMetadataResponse_SimilarGames, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.value) {
      Game.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGameMetadataResponse_SimilarGames {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGameMetadataResponse_SimilarGames();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.value.push(Game.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGameMetadataResponse_SimilarGames {
    return { value: globalThis.Array.isArray(object?.value) ? object.value.map((e: any) => Game.fromJSON(e)) : [] };
  },

  toJSON(message: GetGameMetadataResponse_SimilarGames): unknown {
    const obj: any = {};
    if (message.value?.length) {
      obj.value = message.value.map((e) => Game.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetGameMetadataResponse_SimilarGames>): GetGameMetadataResponse_SimilarGames {
    return GetGameMetadataResponse_SimilarGames.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGameMetadataResponse_SimilarGames>): GetGameMetadataResponse_SimilarGames {
    const message = createBaseGetGameMetadataResponse_SimilarGames();
    message.value = object.value?.map((e) => Game.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetGameMetadataResponse_SimilarGamesEntry(): GetGameMetadataResponse_SimilarGamesEntry {
  return { key: 0, value: undefined };
}

export const GetGameMetadataResponse_SimilarGamesEntry: MessageFns<GetGameMetadataResponse_SimilarGamesEntry> = {
  encode(message: GetGameMetadataResponse_SimilarGamesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).int32(message.key);
    }
    if (message.value !== undefined) {
      GetGameMetadataResponse_SimilarGames.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGameMetadataResponse_SimilarGamesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGameMetadataResponse_SimilarGamesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = GetGameMetadataResponse_SimilarGames.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGameMetadataResponse_SimilarGamesEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? GetGameMetadataResponse_SimilarGames.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: GetGameMetadataResponse_SimilarGamesEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined) {
      obj.value = GetGameMetadataResponse_SimilarGames.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<GetGameMetadataResponse_SimilarGamesEntry>): GetGameMetadataResponse_SimilarGamesEntry {
    return GetGameMetadataResponse_SimilarGamesEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetGameMetadataResponse_SimilarGamesEntry>,
  ): GetGameMetadataResponse_SimilarGamesEntry {
    const message = createBaseGetGameMetadataResponse_SimilarGamesEntry();
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null)
      ? GetGameMetadataResponse_SimilarGames.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseGetGameMetadataResponse_GenresEntry(): GetGameMetadataResponse_GenresEntry {
  return { key: 0, value: undefined };
}

export const GetGameMetadataResponse_GenresEntry: MessageFns<GetGameMetadataResponse_GenresEntry> = {
  encode(message: GetGameMetadataResponse_GenresEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).int32(message.key);
    }
    if (message.value !== undefined) {
      GetGameMetadataResponse_GameGenres.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGameMetadataResponse_GenresEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGameMetadataResponse_GenresEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = GetGameMetadataResponse_GameGenres.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGameMetadataResponse_GenresEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? GetGameMetadataResponse_GameGenres.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: GetGameMetadataResponse_GenresEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined) {
      obj.value = GetGameMetadataResponse_GameGenres.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<GetGameMetadataResponse_GenresEntry>): GetGameMetadataResponse_GenresEntry {
    return GetGameMetadataResponse_GenresEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGameMetadataResponse_GenresEntry>): GetGameMetadataResponse_GenresEntry {
    const message = createBaseGetGameMetadataResponse_GenresEntry();
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null)
      ? GetGameMetadataResponse_GameGenres.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseGetPlatformMetadataRequest(): GetPlatformMetadataRequest {
  return { platformIds: [] };
}

export const GetPlatformMetadataRequest: MessageFns<GetPlatformMetadataRequest> = {
  encode(message: GetPlatformMetadataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.platformIds) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPlatformMetadataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPlatformMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.platformIds.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.platformIds.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPlatformMetadataRequest {
    return {
      platformIds: globalThis.Array.isArray(object?.platformIds)
        ? object.platformIds.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: GetPlatformMetadataRequest): unknown {
    const obj: any = {};
    if (message.platformIds?.length) {
      obj.platformIds = message.platformIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetPlatformMetadataRequest>): GetPlatformMetadataRequest {
    return GetPlatformMetadataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPlatformMetadataRequest>): GetPlatformMetadataRequest {
    const message = createBaseGetPlatformMetadataRequest();
    message.platformIds = object.platformIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetPlatformMetadataResponse(): GetPlatformMetadataResponse {
  return { metadata: [] };
}

export const GetPlatformMetadataResponse: MessageFns<GetPlatformMetadataResponse> = {
  encode(message: GetPlatformMetadataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.metadata) {
      PlatformMetadata.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPlatformMetadataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPlatformMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata.push(PlatformMetadata.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPlatformMetadataResponse {
    return {
      metadata: globalThis.Array.isArray(object?.metadata)
        ? object.metadata.map((e: any) => PlatformMetadata.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetPlatformMetadataResponse): unknown {
    const obj: any = {};
    if (message.metadata?.length) {
      obj.metadata = message.metadata.map((e) => PlatformMetadata.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetPlatformMetadataResponse>): GetPlatformMetadataResponse {
    return GetPlatformMetadataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPlatformMetadataResponse>): GetPlatformMetadataResponse {
    const message = createBaseGetPlatformMetadataResponse();
    message.metadata = object.metadata?.map((e) => PlatformMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetIgdbGameSearchResultsRequest(): GetIgdbGameSearchResultsRequest {
  return { query: undefined };
}

export const GetIgdbGameSearchResultsRequest: MessageFns<GetIgdbGameSearchResultsRequest> = {
  encode(message: GetIgdbGameSearchResultsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== undefined) {
      IgdbGameSearchQuery.encode(message.query, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetIgdbGameSearchResultsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIgdbGameSearchResultsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.query = IgdbGameSearchQuery.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetIgdbGameSearchResultsRequest {
    return { query: isSet(object.query) ? IgdbGameSearchQuery.fromJSON(object.query) : undefined };
  },

  toJSON(message: GetIgdbGameSearchResultsRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = IgdbGameSearchQuery.toJSON(message.query);
    }
    return obj;
  },

  create(base?: DeepPartial<GetIgdbGameSearchResultsRequest>): GetIgdbGameSearchResultsRequest {
    return GetIgdbGameSearchResultsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetIgdbGameSearchResultsRequest>): GetIgdbGameSearchResultsRequest {
    const message = createBaseGetIgdbGameSearchResultsRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? IgdbGameSearchQuery.fromPartial(object.query)
      : undefined;
    return message;
  },
};

function createBaseGetIgdbGameSearchResultsResponse(): GetIgdbGameSearchResultsResponse {
  return { metadata: [] };
}

export const GetIgdbGameSearchResultsResponse: MessageFns<GetIgdbGameSearchResultsResponse> = {
  encode(message: GetIgdbGameSearchResultsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.metadata) {
      NewGameMetadata.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetIgdbGameSearchResultsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIgdbGameSearchResultsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata.push(NewGameMetadata.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetIgdbGameSearchResultsResponse {
    return {
      metadata: globalThis.Array.isArray(object?.metadata)
        ? object.metadata.map((e: any) => NewGameMetadata.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetIgdbGameSearchResultsResponse): unknown {
    const obj: any = {};
    if (message.metadata?.length) {
      obj.metadata = message.metadata.map((e) => NewGameMetadata.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetIgdbGameSearchResultsResponse>): GetIgdbGameSearchResultsResponse {
    return GetIgdbGameSearchResultsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetIgdbGameSearchResultsResponse>): GetIgdbGameSearchResultsResponse {
    const message = createBaseGetIgdbGameSearchResultsResponse();
    message.metadata = object.metadata?.map((e) => NewGameMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateGameMetadataRequest(): UpdateGameMetadataRequest {
  return { metadata: [] };
}

export const UpdateGameMetadataRequest: MessageFns<UpdateGameMetadataRequest> = {
  encode(message: UpdateGameMetadataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.metadata) {
      UpdatedGameMetadata.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGameMetadataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGameMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata.push(UpdatedGameMetadata.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGameMetadataRequest {
    return {
      metadata: globalThis.Array.isArray(object?.metadata)
        ? object.metadata.map((e: any) => UpdatedGameMetadata.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UpdateGameMetadataRequest): unknown {
    const obj: any = {};
    if (message.metadata?.length) {
      obj.metadata = message.metadata.map((e) => UpdatedGameMetadata.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGameMetadataRequest>): UpdateGameMetadataRequest {
    return UpdateGameMetadataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGameMetadataRequest>): UpdateGameMetadataRequest {
    const message = createBaseUpdateGameMetadataRequest();
    message.metadata = object.metadata?.map((e) => UpdatedGameMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateGameMetadataResponse(): UpdateGameMetadataResponse {
  return { metadataUpdated: [] };
}

export const UpdateGameMetadataResponse: MessageFns<UpdateGameMetadataResponse> = {
  encode(message: UpdateGameMetadataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.metadataUpdated) {
      GameMetadata.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGameMetadataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGameMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadataUpdated.push(GameMetadata.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGameMetadataResponse {
    return {
      metadataUpdated: globalThis.Array.isArray(object?.metadataUpdated)
        ? object.metadataUpdated.map((e: any) => GameMetadata.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UpdateGameMetadataResponse): unknown {
    const obj: any = {};
    if (message.metadataUpdated?.length) {
      obj.metadataUpdated = message.metadataUpdated.map((e) => GameMetadata.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGameMetadataResponse>): UpdateGameMetadataResponse {
    return UpdateGameMetadataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGameMetadataResponse>): UpdateGameMetadataResponse {
    const message = createBaseUpdateGameMetadataResponse();
    message.metadataUpdated = object.metadataUpdated?.map((e) => GameMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetIgdbPlatformSearchResultsRequest(): GetIgdbPlatformSearchResultsRequest {
  return { query: undefined };
}

export const GetIgdbPlatformSearchResultsRequest: MessageFns<GetIgdbPlatformSearchResultsRequest> = {
  encode(message: GetIgdbPlatformSearchResultsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== undefined) {
      IgdbPlatformSearchQuery.encode(message.query, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetIgdbPlatformSearchResultsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIgdbPlatformSearchResultsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.query = IgdbPlatformSearchQuery.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetIgdbPlatformSearchResultsRequest {
    return { query: isSet(object.query) ? IgdbPlatformSearchQuery.fromJSON(object.query) : undefined };
  },

  toJSON(message: GetIgdbPlatformSearchResultsRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = IgdbPlatformSearchQuery.toJSON(message.query);
    }
    return obj;
  },

  create(base?: DeepPartial<GetIgdbPlatformSearchResultsRequest>): GetIgdbPlatformSearchResultsRequest {
    return GetIgdbPlatformSearchResultsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetIgdbPlatformSearchResultsRequest>): GetIgdbPlatformSearchResultsRequest {
    const message = createBaseGetIgdbPlatformSearchResultsRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? IgdbPlatformSearchQuery.fromPartial(object.query)
      : undefined;
    return message;
  },
};

function createBaseGetIgdbPlatformSearchResultsResponse(): GetIgdbPlatformSearchResultsResponse {
  return { metadata: [] };
}

export const GetIgdbPlatformSearchResultsResponse: MessageFns<GetIgdbPlatformSearchResultsResponse> = {
  encode(message: GetIgdbPlatformSearchResultsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.metadata) {
      NewPlatformMetadata.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetIgdbPlatformSearchResultsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIgdbPlatformSearchResultsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata.push(NewPlatformMetadata.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetIgdbPlatformSearchResultsResponse {
    return {
      metadata: globalThis.Array.isArray(object?.metadata)
        ? object.metadata.map((e: any) => NewPlatformMetadata.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetIgdbPlatformSearchResultsResponse): unknown {
    const obj: any = {};
    if (message.metadata?.length) {
      obj.metadata = message.metadata.map((e) => NewPlatformMetadata.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetIgdbPlatformSearchResultsResponse>): GetIgdbPlatformSearchResultsResponse {
    return GetIgdbPlatformSearchResultsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetIgdbPlatformSearchResultsResponse>): GetIgdbPlatformSearchResultsResponse {
    const message = createBaseGetIgdbPlatformSearchResultsResponse();
    message.metadata = object.metadata?.map((e) => NewPlatformMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdatePlatformMetadataRequest(): UpdatePlatformMetadataRequest {
  return { metadata: [] };
}

export const UpdatePlatformMetadataRequest: MessageFns<UpdatePlatformMetadataRequest> = {
  encode(message: UpdatePlatformMetadataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.metadata) {
      UpdatedPlatformMetadata.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePlatformMetadataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePlatformMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata.push(UpdatedPlatformMetadata.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePlatformMetadataRequest {
    return {
      metadata: globalThis.Array.isArray(object?.metadata)
        ? object.metadata.map((e: any) => UpdatedPlatformMetadata.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UpdatePlatformMetadataRequest): unknown {
    const obj: any = {};
    if (message.metadata?.length) {
      obj.metadata = message.metadata.map((e) => UpdatedPlatformMetadata.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatePlatformMetadataRequest>): UpdatePlatformMetadataRequest {
    return UpdatePlatformMetadataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatePlatformMetadataRequest>): UpdatePlatformMetadataRequest {
    const message = createBaseUpdatePlatformMetadataRequest();
    message.metadata = object.metadata?.map((e) => UpdatedPlatformMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdatePlatformMetadataResponse(): UpdatePlatformMetadataResponse {
  return { metadataUpdated: [] };
}

export const UpdatePlatformMetadataResponse: MessageFns<UpdatePlatformMetadataResponse> = {
  encode(message: UpdatePlatformMetadataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.metadataUpdated) {
      PlatformMetadata.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePlatformMetadataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePlatformMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadataUpdated.push(PlatformMetadata.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePlatformMetadataResponse {
    return {
      metadataUpdated: globalThis.Array.isArray(object?.metadataUpdated)
        ? object.metadataUpdated.map((e: any) => PlatformMetadata.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UpdatePlatformMetadataResponse): unknown {
    const obj: any = {};
    if (message.metadataUpdated?.length) {
      obj.metadataUpdated = message.metadataUpdated.map((e) => PlatformMetadata.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatePlatformMetadataResponse>): UpdatePlatformMetadataResponse {
    return UpdatePlatformMetadataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatePlatformMetadataResponse>): UpdatePlatformMetadataResponse {
    const message = createBaseUpdatePlatformMetadataResponse();
    message.metadataUpdated = object.metadataUpdated?.map((e) => PlatformMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetIgdbSearchRequest(): GetIgdbSearchRequest {
  return { searchType: 0, search: undefined, pagination: undefined, filters: undefined, fields: undefined };
}

export const GetIgdbSearchRequest: MessageFns<GetIgdbSearchRequest> = {
  encode(message: GetIgdbSearchRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.searchType !== 0) {
      writer.uint32(8).int32(message.searchType);
    }
    if (message.search !== undefined) {
      IgdbSearch.encode(message.search, writer.uint32(18).fork()).join();
    }
    if (message.pagination !== undefined) {
      IgdbPagination.encode(message.pagination, writer.uint32(26).fork()).join();
    }
    if (message.filters !== undefined) {
      IgdbFilters.encode(message.filters, writer.uint32(34).fork()).join();
    }
    if (message.fields !== undefined) {
      IgdbFields.encode(message.fields, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetIgdbSearchRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIgdbSearchRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.searchType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.search = IgdbSearch.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pagination = IgdbPagination.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.filters = IgdbFilters.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.fields = IgdbFields.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetIgdbSearchRequest {
    return {
      searchType: isSet(object.searchType) ? getIgdbSearchRequest_IgdbSearchTypeFromJSON(object.searchType) : 0,
      search: isSet(object.search) ? IgdbSearch.fromJSON(object.search) : undefined,
      pagination: isSet(object.pagination) ? IgdbPagination.fromJSON(object.pagination) : undefined,
      filters: isSet(object.filters) ? IgdbFilters.fromJSON(object.filters) : undefined,
      fields: isSet(object.fields) ? IgdbFields.fromJSON(object.fields) : undefined,
    };
  },

  toJSON(message: GetIgdbSearchRequest): unknown {
    const obj: any = {};
    if (message.searchType !== 0) {
      obj.searchType = getIgdbSearchRequest_IgdbSearchTypeToJSON(message.searchType);
    }
    if (message.search !== undefined) {
      obj.search = IgdbSearch.toJSON(message.search);
    }
    if (message.pagination !== undefined) {
      obj.pagination = IgdbPagination.toJSON(message.pagination);
    }
    if (message.filters !== undefined) {
      obj.filters = IgdbFilters.toJSON(message.filters);
    }
    if (message.fields !== undefined) {
      obj.fields = IgdbFields.toJSON(message.fields);
    }
    return obj;
  },

  create(base?: DeepPartial<GetIgdbSearchRequest>): GetIgdbSearchRequest {
    return GetIgdbSearchRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetIgdbSearchRequest>): GetIgdbSearchRequest {
    const message = createBaseGetIgdbSearchRequest();
    message.searchType = object.searchType ?? 0;
    message.search = (object.search !== undefined && object.search !== null)
      ? IgdbSearch.fromPartial(object.search)
      : undefined;
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? IgdbPagination.fromPartial(object.pagination)
      : undefined;
    message.filters = (object.filters !== undefined && object.filters !== null)
      ? IgdbFilters.fromPartial(object.filters)
      : undefined;
    message.fields = (object.fields !== undefined && object.fields !== null)
      ? IgdbFields.fromPartial(object.fields)
      : undefined;
    return message;
  },
};

function createBaseIgdbSearchGameResponse(): IgdbSearchGameResponse {
  return { games: [] };
}

export const IgdbSearchGameResponse: MessageFns<IgdbSearchGameResponse> = {
  encode(message: IgdbSearchGameResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.games) {
      NewGameMetadata.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IgdbSearchGameResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIgdbSearchGameResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.games.push(NewGameMetadata.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IgdbSearchGameResponse {
    return {
      games: globalThis.Array.isArray(object?.games) ? object.games.map((e: any) => NewGameMetadata.fromJSON(e)) : [],
    };
  },

  toJSON(message: IgdbSearchGameResponse): unknown {
    const obj: any = {};
    if (message.games?.length) {
      obj.games = message.games.map((e) => NewGameMetadata.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<IgdbSearchGameResponse>): IgdbSearchGameResponse {
    return IgdbSearchGameResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IgdbSearchGameResponse>): IgdbSearchGameResponse {
    const message = createBaseIgdbSearchGameResponse();
    message.games = object.games?.map((e) => NewGameMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseIgdbSearchPlatformResponse(): IgdbSearchPlatformResponse {
  return { platforms: [] };
}

export const IgdbSearchPlatformResponse: MessageFns<IgdbSearchPlatformResponse> = {
  encode(message: IgdbSearchPlatformResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.platforms) {
      NewPlatformMetadata.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IgdbSearchPlatformResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIgdbSearchPlatformResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.platforms.push(NewPlatformMetadata.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IgdbSearchPlatformResponse {
    return {
      platforms: globalThis.Array.isArray(object?.platforms)
        ? object.platforms.map((e: any) => NewPlatformMetadata.fromJSON(e))
        : [],
    };
  },

  toJSON(message: IgdbSearchPlatformResponse): unknown {
    const obj: any = {};
    if (message.platforms?.length) {
      obj.platforms = message.platforms.map((e) => NewPlatformMetadata.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<IgdbSearchPlatformResponse>): IgdbSearchPlatformResponse {
    return IgdbSearchPlatformResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IgdbSearchPlatformResponse>): IgdbSearchPlatformResponse {
    const message = createBaseIgdbSearchPlatformResponse();
    message.platforms = object.platforms?.map((e) => NewPlatformMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetIgdbSearchResponse(): GetIgdbSearchResponse {
  return { searchResults: undefined };
}

export const GetIgdbSearchResponse: MessageFns<GetIgdbSearchResponse> = {
  encode(message: GetIgdbSearchResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.searchResults?.$case) {
      case "gameMatches":
        IgdbSearchGameResponse.encode(message.searchResults.gameMatches, writer.uint32(10).fork()).join();
        break;
      case "platformMatches":
        IgdbSearchPlatformResponse.encode(message.searchResults.platformMatches, writer.uint32(18).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetIgdbSearchResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIgdbSearchResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.searchResults = {
            $case: "gameMatches",
            gameMatches: IgdbSearchGameResponse.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.searchResults = {
            $case: "platformMatches",
            platformMatches: IgdbSearchPlatformResponse.decode(reader, reader.uint32()),
          };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetIgdbSearchResponse {
    return {
      searchResults: isSet(object.gameMatches)
        ? { $case: "gameMatches", gameMatches: IgdbSearchGameResponse.fromJSON(object.gameMatches) }
        : isSet(object.platformMatches)
        ? { $case: "platformMatches", platformMatches: IgdbSearchPlatformResponse.fromJSON(object.platformMatches) }
        : undefined,
    };
  },

  toJSON(message: GetIgdbSearchResponse): unknown {
    const obj: any = {};
    if (message.searchResults?.$case === "gameMatches") {
      obj.gameMatches = IgdbSearchGameResponse.toJSON(message.searchResults.gameMatches);
    } else if (message.searchResults?.$case === "platformMatches") {
      obj.platformMatches = IgdbSearchPlatformResponse.toJSON(message.searchResults.platformMatches);
    }
    return obj;
  },

  create(base?: DeepPartial<GetIgdbSearchResponse>): GetIgdbSearchResponse {
    return GetIgdbSearchResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetIgdbSearchResponse>): GetIgdbSearchResponse {
    const message = createBaseGetIgdbSearchResponse();
    switch (object.searchResults?.$case) {
      case "gameMatches": {
        if (object.searchResults?.gameMatches !== undefined && object.searchResults?.gameMatches !== null) {
          message.searchResults = {
            $case: "gameMatches",
            gameMatches: IgdbSearchGameResponse.fromPartial(object.searchResults.gameMatches),
          };
        }
        break;
      }
      case "platformMatches": {
        if (object.searchResults?.platformMatches !== undefined && object.searchResults?.platformMatches !== null) {
          message.searchResults = {
            $case: "platformMatches",
            platformMatches: IgdbSearchPlatformResponse.fromPartial(object.searchResults.platformMatches),
          };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseDeleteLibraryRequest(): DeleteLibraryRequest {
  return {};
}

export const DeleteLibraryRequest: MessageFns<DeleteLibraryRequest> = {
  encode(_: DeleteLibraryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteLibraryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteLibraryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteLibraryRequest {
    return {};
  },

  toJSON(_: DeleteLibraryRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DeleteLibraryRequest>): DeleteLibraryRequest {
    return DeleteLibraryRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeleteLibraryRequest>): DeleteLibraryRequest {
    const message = createBaseDeleteLibraryRequest();
    return message;
  },
};

function createBaseDeleteLibraryResponse(): DeleteLibraryResponse {
  return {};
}

export const DeleteLibraryResponse: MessageFns<DeleteLibraryResponse> = {
  encode(_: DeleteLibraryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteLibraryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteLibraryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteLibraryResponse {
    return {};
  },

  toJSON(_: DeleteLibraryResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DeleteLibraryResponse>): DeleteLibraryResponse {
    return DeleteLibraryResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeleteLibraryResponse>): DeleteLibraryResponse {
    const message = createBaseDeleteLibraryResponse();
    return message;
  },
};

function createBaseDeleteMissingEntriesRequest(): DeleteMissingEntriesRequest {
  return { dryRun: false };
}

export const DeleteMissingEntriesRequest: MessageFns<DeleteMissingEntriesRequest> = {
  encode(message: DeleteMissingEntriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dryRun !== false) {
      writer.uint32(8).bool(message.dryRun);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteMissingEntriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMissingEntriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.dryRun = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMissingEntriesRequest {
    return { dryRun: isSet(object.dryRun) ? globalThis.Boolean(object.dryRun) : false };
  },

  toJSON(message: DeleteMissingEntriesRequest): unknown {
    const obj: any = {};
    if (message.dryRun !== false) {
      obj.dryRun = message.dryRun;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteMissingEntriesRequest>): DeleteMissingEntriesRequest {
    return DeleteMissingEntriesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteMissingEntriesRequest>): DeleteMissingEntriesRequest {
    const message = createBaseDeleteMissingEntriesRequest();
    message.dryRun = object.dryRun ?? false;
    return message;
  },
};

function createBaseDeleteMissingEntriesResponse(): DeleteMissingEntriesResponse {
  return { platformsDeleted: [], gamesDeleted: [], gameFilesDeleted: [] };
}

export const DeleteMissingEntriesResponse: MessageFns<DeleteMissingEntriesResponse> = {
  encode(message: DeleteMissingEntriesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.platformsDeleted) {
      Platform.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.gamesDeleted) {
      Game.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.gameFilesDeleted) {
      GameFile.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteMissingEntriesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMissingEntriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.platformsDeleted.push(Platform.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gamesDeleted.push(Game.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.gameFilesDeleted.push(GameFile.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMissingEntriesResponse {
    return {
      platformsDeleted: globalThis.Array.isArray(object?.platformsDeleted)
        ? object.platformsDeleted.map((e: any) => Platform.fromJSON(e))
        : [],
      gamesDeleted: globalThis.Array.isArray(object?.gamesDeleted)
        ? object.gamesDeleted.map((e: any) => Game.fromJSON(e))
        : [],
      gameFilesDeleted: globalThis.Array.isArray(object?.gameFilesDeleted)
        ? object.gameFilesDeleted.map((e: any) => GameFile.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DeleteMissingEntriesResponse): unknown {
    const obj: any = {};
    if (message.platformsDeleted?.length) {
      obj.platformsDeleted = message.platformsDeleted.map((e) => Platform.toJSON(e));
    }
    if (message.gamesDeleted?.length) {
      obj.gamesDeleted = message.gamesDeleted.map((e) => Game.toJSON(e));
    }
    if (message.gameFilesDeleted?.length) {
      obj.gameFilesDeleted = message.gameFilesDeleted.map((e) => GameFile.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteMissingEntriesResponse>): DeleteMissingEntriesResponse {
    return DeleteMissingEntriesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteMissingEntriesResponse>): DeleteMissingEntriesResponse {
    const message = createBaseDeleteMissingEntriesResponse();
    message.platformsDeleted = object.platformsDeleted?.map((e) => Platform.fromPartial(e)) || [];
    message.gamesDeleted = object.gamesDeleted?.map((e) => Game.fromPartial(e)) || [];
    message.gameFilesDeleted = object.gameFilesDeleted?.map((e) => GameFile.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDeletePlatformsRequest(): DeletePlatformsRequest {
  return { ids: [], deleteFromDisk: false, blacklistEntries: false };
}

export const DeletePlatformsRequest: MessageFns<DeletePlatformsRequest> = {
  encode(message: DeletePlatformsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.ids) {
      writer.int32(v);
    }
    writer.join();
    if (message.deleteFromDisk !== false) {
      writer.uint32(16).bool(message.deleteFromDisk);
    }
    if (message.blacklistEntries !== false) {
      writer.uint32(24).bool(message.blacklistEntries);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeletePlatformsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePlatformsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.ids.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ids.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.deleteFromDisk = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.blacklistEntries = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePlatformsRequest {
    return {
      ids: globalThis.Array.isArray(object?.ids) ? object.ids.map((e: any) => globalThis.Number(e)) : [],
      deleteFromDisk: isSet(object.deleteFromDisk) ? globalThis.Boolean(object.deleteFromDisk) : false,
      blacklistEntries: isSet(object.blacklistEntries) ? globalThis.Boolean(object.blacklistEntries) : false,
    };
  },

  toJSON(message: DeletePlatformsRequest): unknown {
    const obj: any = {};
    if (message.ids?.length) {
      obj.ids = message.ids.map((e) => Math.round(e));
    }
    if (message.deleteFromDisk !== false) {
      obj.deleteFromDisk = message.deleteFromDisk;
    }
    if (message.blacklistEntries !== false) {
      obj.blacklistEntries = message.blacklistEntries;
    }
    return obj;
  },

  create(base?: DeepPartial<DeletePlatformsRequest>): DeletePlatformsRequest {
    return DeletePlatformsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeletePlatformsRequest>): DeletePlatformsRequest {
    const message = createBaseDeletePlatformsRequest();
    message.ids = object.ids?.map((e) => e) || [];
    message.deleteFromDisk = object.deleteFromDisk ?? false;
    message.blacklistEntries = object.blacklistEntries ?? false;
    return message;
  },
};

function createBaseDeletePlatformsResponse(): DeletePlatformsResponse {
  return { platformsDeleted: [] };
}

export const DeletePlatformsResponse: MessageFns<DeletePlatformsResponse> = {
  encode(message: DeletePlatformsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.platformsDeleted) {
      Platform.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeletePlatformsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePlatformsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.platformsDeleted.push(Platform.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePlatformsResponse {
    return {
      platformsDeleted: globalThis.Array.isArray(object?.platformsDeleted)
        ? object.platformsDeleted.map((e: any) => Platform.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DeletePlatformsResponse): unknown {
    const obj: any = {};
    if (message.platformsDeleted?.length) {
      obj.platformsDeleted = message.platformsDeleted.map((e) => Platform.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DeletePlatformsResponse>): DeletePlatformsResponse {
    return DeletePlatformsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeletePlatformsResponse>): DeletePlatformsResponse {
    const message = createBaseDeletePlatformsResponse();
    message.platformsDeleted = object.platformsDeleted?.map((e) => Platform.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdatePlatformsRequest(): UpdatePlatformsRequest {
  return { platforms: [] };
}

export const UpdatePlatformsRequest: MessageFns<UpdatePlatformsRequest> = {
  encode(message: UpdatePlatformsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.platforms) {
      UpdatedPlatform.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePlatformsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePlatformsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.platforms.push(UpdatedPlatform.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePlatformsRequest {
    return {
      platforms: globalThis.Array.isArray(object?.platforms)
        ? object.platforms.map((e: any) => UpdatedPlatform.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UpdatePlatformsRequest): unknown {
    const obj: any = {};
    if (message.platforms?.length) {
      obj.platforms = message.platforms.map((e) => UpdatedPlatform.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatePlatformsRequest>): UpdatePlatformsRequest {
    return UpdatePlatformsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatePlatformsRequest>): UpdatePlatformsRequest {
    const message = createBaseUpdatePlatformsRequest();
    message.platforms = object.platforms?.map((e) => UpdatedPlatform.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdatePlatformsResponse(): UpdatePlatformsResponse {
  return { platformsUpdated: [] };
}

export const UpdatePlatformsResponse: MessageFns<UpdatePlatformsResponse> = {
  encode(message: UpdatePlatformsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.platformsUpdated) {
      Platform.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePlatformsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePlatformsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.platformsUpdated.push(Platform.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePlatformsResponse {
    return {
      platformsUpdated: globalThis.Array.isArray(object?.platformsUpdated)
        ? object.platformsUpdated.map((e: any) => Platform.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UpdatePlatformsResponse): unknown {
    const obj: any = {};
    if (message.platformsUpdated?.length) {
      obj.platformsUpdated = message.platformsUpdated.map((e) => Platform.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatePlatformsResponse>): UpdatePlatformsResponse {
    return UpdatePlatformsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatePlatformsResponse>): UpdatePlatformsResponse {
    const message = createBaseUpdatePlatformsResponse();
    message.platformsUpdated = object.platformsUpdated?.map((e) => Platform.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDeleteGamesRequest(): DeleteGamesRequest {
  return { ids: [], deleteFromDisk: false, blacklistEntries: false };
}

export const DeleteGamesRequest: MessageFns<DeleteGamesRequest> = {
  encode(message: DeleteGamesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.ids) {
      writer.int32(v);
    }
    writer.join();
    if (message.deleteFromDisk !== false) {
      writer.uint32(16).bool(message.deleteFromDisk);
    }
    if (message.blacklistEntries !== false) {
      writer.uint32(24).bool(message.blacklistEntries);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteGamesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteGamesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.ids.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ids.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.deleteFromDisk = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.blacklistEntries = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteGamesRequest {
    return {
      ids: globalThis.Array.isArray(object?.ids) ? object.ids.map((e: any) => globalThis.Number(e)) : [],
      deleteFromDisk: isSet(object.deleteFromDisk) ? globalThis.Boolean(object.deleteFromDisk) : false,
      blacklistEntries: isSet(object.blacklistEntries) ? globalThis.Boolean(object.blacklistEntries) : false,
    };
  },

  toJSON(message: DeleteGamesRequest): unknown {
    const obj: any = {};
    if (message.ids?.length) {
      obj.ids = message.ids.map((e) => Math.round(e));
    }
    if (message.deleteFromDisk !== false) {
      obj.deleteFromDisk = message.deleteFromDisk;
    }
    if (message.blacklistEntries !== false) {
      obj.blacklistEntries = message.blacklistEntries;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteGamesRequest>): DeleteGamesRequest {
    return DeleteGamesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteGamesRequest>): DeleteGamesRequest {
    const message = createBaseDeleteGamesRequest();
    message.ids = object.ids?.map((e) => e) || [];
    message.deleteFromDisk = object.deleteFromDisk ?? false;
    message.blacklistEntries = object.blacklistEntries ?? false;
    return message;
  },
};

function createBaseDeleteGamesResponse(): DeleteGamesResponse {
  return { gamesDeleted: [] };
}

export const DeleteGamesResponse: MessageFns<DeleteGamesResponse> = {
  encode(message: DeleteGamesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.gamesDeleted) {
      Game.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteGamesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteGamesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gamesDeleted.push(Game.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteGamesResponse {
    return {
      gamesDeleted: globalThis.Array.isArray(object?.gamesDeleted)
        ? object.gamesDeleted.map((e: any) => Game.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DeleteGamesResponse): unknown {
    const obj: any = {};
    if (message.gamesDeleted?.length) {
      obj.gamesDeleted = message.gamesDeleted.map((e) => Game.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteGamesResponse>): DeleteGamesResponse {
    return DeleteGamesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteGamesResponse>): DeleteGamesResponse {
    const message = createBaseDeleteGamesResponse();
    message.gamesDeleted = object.gamesDeleted?.map((e) => Game.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateGamesRequest(): UpdateGamesRequest {
  return { games: [] };
}

export const UpdateGamesRequest: MessageFns<UpdateGamesRequest> = {
  encode(message: UpdateGamesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.games) {
      UpdatedGame.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGamesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGamesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.games.push(UpdatedGame.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGamesRequest {
    return {
      games: globalThis.Array.isArray(object?.games) ? object.games.map((e: any) => UpdatedGame.fromJSON(e)) : [],
    };
  },

  toJSON(message: UpdateGamesRequest): unknown {
    const obj: any = {};
    if (message.games?.length) {
      obj.games = message.games.map((e) => UpdatedGame.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGamesRequest>): UpdateGamesRequest {
    return UpdateGamesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGamesRequest>): UpdateGamesRequest {
    const message = createBaseUpdateGamesRequest();
    message.games = object.games?.map((e) => UpdatedGame.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateGamesResponse(): UpdateGamesResponse {
  return { gamesUpdated: [] };
}

export const UpdateGamesResponse: MessageFns<UpdateGamesResponse> = {
  encode(message: UpdateGamesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.gamesUpdated) {
      Game.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGamesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGamesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gamesUpdated.push(Game.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGamesResponse {
    return {
      gamesUpdated: globalThis.Array.isArray(object?.gamesUpdated)
        ? object.gamesUpdated.map((e: any) => Game.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UpdateGamesResponse): unknown {
    const obj: any = {};
    if (message.gamesUpdated?.length) {
      obj.gamesUpdated = message.gamesUpdated.map((e) => Game.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGamesResponse>): UpdateGamesResponse {
    return UpdateGamesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGamesResponse>): UpdateGamesResponse {
    const message = createBaseUpdateGamesResponse();
    message.gamesUpdated = object.gamesUpdated?.map((e) => Game.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateClientRequest(): CreateClientRequest {
  return { client: undefined };
}

export const CreateClientRequest: MessageFns<CreateClientRequest> = {
  encode(message: CreateClientRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.client !== undefined) {
      NewClient.encode(message.client, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateClientRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateClientRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.client = NewClient.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateClientRequest {
    return { client: isSet(object.client) ? NewClient.fromJSON(object.client) : undefined };
  },

  toJSON(message: CreateClientRequest): unknown {
    const obj: any = {};
    if (message.client !== undefined) {
      obj.client = NewClient.toJSON(message.client);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateClientRequest>): CreateClientRequest {
    return CreateClientRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateClientRequest>): CreateClientRequest {
    const message = createBaseCreateClientRequest();
    message.client = (object.client !== undefined && object.client !== null)
      ? NewClient.fromPartial(object.client)
      : undefined;
    return message;
  },
};

function createBaseCreateClientResponse(): CreateClientResponse {
  return { clientCreated: undefined };
}

export const CreateClientResponse: MessageFns<CreateClientResponse> = {
  encode(message: CreateClientResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientCreated !== undefined) {
      Client.encode(message.clientCreated, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateClientResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateClientResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clientCreated = Client.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateClientResponse {
    return { clientCreated: isSet(object.clientCreated) ? Client.fromJSON(object.clientCreated) : undefined };
  },

  toJSON(message: CreateClientResponse): unknown {
    const obj: any = {};
    if (message.clientCreated !== undefined) {
      obj.clientCreated = Client.toJSON(message.clientCreated);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateClientResponse>): CreateClientResponse {
    return CreateClientResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateClientResponse>): CreateClientResponse {
    const message = createBaseCreateClientResponse();
    message.clientCreated = (object.clientCreated !== undefined && object.clientCreated !== null)
      ? Client.fromPartial(object.clientCreated)
      : undefined;
    return message;
  },
};

function createBaseGetClientsRequest(): GetClientsRequest {
  return { ids: [], names: [] };
}

export const GetClientsRequest: MessageFns<GetClientsRequest> = {
  encode(message: GetClientsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.ids) {
      writer.int32(v);
    }
    writer.join();
    for (const v of message.names) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetClientsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetClientsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.ids.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ids.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.names.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetClientsRequest {
    return {
      ids: globalThis.Array.isArray(object?.ids) ? object.ids.map((e: any) => globalThis.Number(e)) : [],
      names: globalThis.Array.isArray(object?.names) ? object.names.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: GetClientsRequest): unknown {
    const obj: any = {};
    if (message.ids?.length) {
      obj.ids = message.ids.map((e) => Math.round(e));
    }
    if (message.names?.length) {
      obj.names = message.names;
    }
    return obj;
  },

  create(base?: DeepPartial<GetClientsRequest>): GetClientsRequest {
    return GetClientsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetClientsRequest>): GetClientsRequest {
    const message = createBaseGetClientsRequest();
    message.ids = object.ids?.map((e) => e) || [];
    message.names = object.names?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetClientsResponse(): GetClientsResponse {
  return { clients: [] };
}

export const GetClientsResponse: MessageFns<GetClientsResponse> = {
  encode(message: GetClientsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.clients) {
      Client.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetClientsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetClientsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clients.push(Client.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetClientsResponse {
    return {
      clients: globalThis.Array.isArray(object?.clients) ? object.clients.map((e: any) => Client.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetClientsResponse): unknown {
    const obj: any = {};
    if (message.clients?.length) {
      obj.clients = message.clients.map((e) => Client.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetClientsResponse>): GetClientsResponse {
    return GetClientsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetClientsResponse>): GetClientsResponse {
    const message = createBaseGetClientsResponse();
    message.clients = object.clients?.map((e) => Client.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateClientsRequest(): UpdateClientsRequest {
  return { clients: [] };
}

export const UpdateClientsRequest: MessageFns<UpdateClientsRequest> = {
  encode(message: UpdateClientsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.clients) {
      UpdatedClient.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateClientsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateClientsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clients.push(UpdatedClient.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateClientsRequest {
    return {
      clients: globalThis.Array.isArray(object?.clients)
        ? object.clients.map((e: any) => UpdatedClient.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UpdateClientsRequest): unknown {
    const obj: any = {};
    if (message.clients?.length) {
      obj.clients = message.clients.map((e) => UpdatedClient.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateClientsRequest>): UpdateClientsRequest {
    return UpdateClientsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateClientsRequest>): UpdateClientsRequest {
    const message = createBaseUpdateClientsRequest();
    message.clients = object.clients?.map((e) => UpdatedClient.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateClientsResponse(): UpdateClientsResponse {
  return { clientsUpdated: [] };
}

export const UpdateClientsResponse: MessageFns<UpdateClientsResponse> = {
  encode(message: UpdateClientsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.clientsUpdated) {
      Client.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateClientsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateClientsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clientsUpdated.push(Client.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateClientsResponse {
    return {
      clientsUpdated: globalThis.Array.isArray(object?.clientsUpdated)
        ? object.clientsUpdated.map((e: any) => Client.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UpdateClientsResponse): unknown {
    const obj: any = {};
    if (message.clientsUpdated?.length) {
      obj.clientsUpdated = message.clientsUpdated.map((e) => Client.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateClientsResponse>): UpdateClientsResponse {
    return UpdateClientsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateClientsResponse>): UpdateClientsResponse {
    const message = createBaseUpdateClientsResponse();
    message.clientsUpdated = object.clientsUpdated?.map((e) => Client.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDeleteClientsRequest(): DeleteClientsRequest {
  return { ids: [] };
}

export const DeleteClientsRequest: MessageFns<DeleteClientsRequest> = {
  encode(message: DeleteClientsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.ids) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteClientsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteClientsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.ids.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ids.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteClientsRequest {
    return { ids: globalThis.Array.isArray(object?.ids) ? object.ids.map((e: any) => globalThis.Number(e)) : [] };
  },

  toJSON(message: DeleteClientsRequest): unknown {
    const obj: any = {};
    if (message.ids?.length) {
      obj.ids = message.ids.map((e) => Math.round(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteClientsRequest>): DeleteClientsRequest {
    return DeleteClientsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteClientsRequest>): DeleteClientsRequest {
    const message = createBaseDeleteClientsRequest();
    message.ids = object.ids?.map((e) => e) || [];
    return message;
  },
};

function createBaseDeleteClientsResponse(): DeleteClientsResponse {
  return { clientsDeleted: [] };
}

export const DeleteClientsResponse: MessageFns<DeleteClientsResponse> = {
  encode(message: DeleteClientsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.clientsDeleted) {
      Client.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteClientsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteClientsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clientsDeleted.push(Client.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteClientsResponse {
    return {
      clientsDeleted: globalThis.Array.isArray(object?.clientsDeleted)
        ? object.clientsDeleted.map((e: any) => Client.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DeleteClientsResponse): unknown {
    const obj: any = {};
    if (message.clientsDeleted?.length) {
      obj.clientsDeleted = message.clientsDeleted.map((e) => Client.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteClientsResponse>): DeleteClientsResponse {
    return DeleteClientsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteClientsResponse>): DeleteClientsResponse {
    const message = createBaseDeleteClientsResponse();
    message.clientsDeleted = object.clientsDeleted?.map((e) => Client.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetServerInfoRequest(): GetServerInfoRequest {
  return {};
}

export const GetServerInfoRequest: MessageFns<GetServerInfoRequest> = {
  encode(_: GetServerInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetServerInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetServerInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetServerInfoRequest {
    return {};
  },

  toJSON(_: GetServerInfoRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetServerInfoRequest>): GetServerInfoRequest {
    return GetServerInfoRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetServerInfoRequest>): GetServerInfoRequest {
    const message = createBaseGetServerInfoRequest();
    return message;
  },
};

function createBaseGetServerInfoResponse(): GetServerInfoResponse {
  return { serverInfo: undefined };
}

export const GetServerInfoResponse: MessageFns<GetServerInfoResponse> = {
  encode(message: GetServerInfoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serverInfo !== undefined) {
      ServerInfo.encode(message.serverInfo, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetServerInfoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetServerInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.serverInfo = ServerInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetServerInfoResponse {
    return { serverInfo: isSet(object.serverInfo) ? ServerInfo.fromJSON(object.serverInfo) : undefined };
  },

  toJSON(message: GetServerInfoResponse): unknown {
    const obj: any = {};
    if (message.serverInfo !== undefined) {
      obj.serverInfo = ServerInfo.toJSON(message.serverInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<GetServerInfoResponse>): GetServerInfoResponse {
    return GetServerInfoResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetServerInfoResponse>): GetServerInfoResponse {
    const message = createBaseGetServerInfoResponse();
    message.serverInfo = (object.serverInfo !== undefined && object.serverInfo !== null)
      ? ServerInfo.fromPartial(object.serverInfo)
      : undefined;
    return message;
  },
};

function createBaseGetServerConfigRequest(): GetServerConfigRequest {
  return {};
}

export const GetServerConfigRequest: MessageFns<GetServerConfigRequest> = {
  encode(_: GetServerConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetServerConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetServerConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetServerConfigRequest {
    return {};
  },

  toJSON(_: GetServerConfigRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetServerConfigRequest>): GetServerConfigRequest {
    return GetServerConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetServerConfigRequest>): GetServerConfigRequest {
    const message = createBaseGetServerConfigRequest();
    return message;
  },
};

function createBaseGetServerConfigResponse(): GetServerConfigResponse {
  return { config: undefined };
}

export const GetServerConfigResponse: MessageFns<GetServerConfigResponse> = {
  encode(message: GetServerConfigResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.config !== undefined) {
      ServerConfig.encode(message.config, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetServerConfigResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetServerConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.config = ServerConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetServerConfigResponse {
    return { config: isSet(object.config) ? ServerConfig.fromJSON(object.config) : undefined };
  },

  toJSON(message: GetServerConfigResponse): unknown {
    const obj: any = {};
    if (message.config !== undefined) {
      obj.config = ServerConfig.toJSON(message.config);
    }
    return obj;
  },

  create(base?: DeepPartial<GetServerConfigResponse>): GetServerConfigResponse {
    return GetServerConfigResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetServerConfigResponse>): GetServerConfigResponse {
    const message = createBaseGetServerConfigResponse();
    message.config = (object.config !== undefined && object.config !== null)
      ? ServerConfig.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseUpdateServerConfigRequest(): UpdateServerConfigRequest {
  return { config: undefined };
}

export const UpdateServerConfigRequest: MessageFns<UpdateServerConfigRequest> = {
  encode(message: UpdateServerConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.config !== undefined) {
      ServerConfig.encode(message.config, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateServerConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateServerConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.config = ServerConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateServerConfigRequest {
    return { config: isSet(object.config) ? ServerConfig.fromJSON(object.config) : undefined };
  },

  toJSON(message: UpdateServerConfigRequest): unknown {
    const obj: any = {};
    if (message.config !== undefined) {
      obj.config = ServerConfig.toJSON(message.config);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateServerConfigRequest>): UpdateServerConfigRequest {
    return UpdateServerConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateServerConfigRequest>): UpdateServerConfigRequest {
    const message = createBaseUpdateServerConfigRequest();
    message.config = (object.config !== undefined && object.config !== null)
      ? ServerConfig.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseUpdateServerConfigResponse(): UpdateServerConfigResponse {
  return { configUpdated: undefined };
}

export const UpdateServerConfigResponse: MessageFns<UpdateServerConfigResponse> = {
  encode(message: UpdateServerConfigResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.configUpdated !== undefined) {
      ServerConfig.encode(message.configUpdated, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateServerConfigResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateServerConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.configUpdated = ServerConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateServerConfigResponse {
    return { configUpdated: isSet(object.configUpdated) ? ServerConfig.fromJSON(object.configUpdated) : undefined };
  },

  toJSON(message: UpdateServerConfigResponse): unknown {
    const obj: any = {};
    if (message.configUpdated !== undefined) {
      obj.configUpdated = ServerConfig.toJSON(message.configUpdated);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateServerConfigResponse>): UpdateServerConfigResponse {
    return UpdateServerConfigResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateServerConfigResponse>): UpdateServerConfigResponse {
    const message = createBaseUpdateServerConfigResponse();
    message.configUpdated = (object.configUpdated !== undefined && object.configUpdated !== null)
      ? ServerConfig.fromPartial(object.configUpdated)
      : undefined;
    return message;
  },
};

function createBaseCreateEmulatorsRequest(): CreateEmulatorsRequest {
  return { emulators: [] };
}

export const CreateEmulatorsRequest: MessageFns<CreateEmulatorsRequest> = {
  encode(message: CreateEmulatorsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.emulators) {
      NewEmulator.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEmulatorsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEmulatorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.emulators.push(NewEmulator.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEmulatorsRequest {
    return {
      emulators: globalThis.Array.isArray(object?.emulators)
        ? object.emulators.map((e: any) => NewEmulator.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CreateEmulatorsRequest): unknown {
    const obj: any = {};
    if (message.emulators?.length) {
      obj.emulators = message.emulators.map((e) => NewEmulator.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CreateEmulatorsRequest>): CreateEmulatorsRequest {
    return CreateEmulatorsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEmulatorsRequest>): CreateEmulatorsRequest {
    const message = createBaseCreateEmulatorsRequest();
    message.emulators = object.emulators?.map((e) => NewEmulator.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateEmulatorsResponse(): CreateEmulatorsResponse {
  return { emulatorsCreated: [] };
}

export const CreateEmulatorsResponse: MessageFns<CreateEmulatorsResponse> = {
  encode(message: CreateEmulatorsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.emulatorsCreated) {
      Emulator.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEmulatorsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEmulatorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.emulatorsCreated.push(Emulator.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEmulatorsResponse {
    return {
      emulatorsCreated: globalThis.Array.isArray(object?.emulatorsCreated)
        ? object.emulatorsCreated.map((e: any) => Emulator.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CreateEmulatorsResponse): unknown {
    const obj: any = {};
    if (message.emulatorsCreated?.length) {
      obj.emulatorsCreated = message.emulatorsCreated.map((e) => Emulator.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CreateEmulatorsResponse>): CreateEmulatorsResponse {
    return CreateEmulatorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEmulatorsResponse>): CreateEmulatorsResponse {
    const message = createBaseCreateEmulatorsResponse();
    message.emulatorsCreated = object.emulatorsCreated?.map((e) => Emulator.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetEmulatorsRequest(): GetEmulatorsRequest {
  return { ids: [], supportedPlatformIds: [] };
}

export const GetEmulatorsRequest: MessageFns<GetEmulatorsRequest> = {
  encode(message: GetEmulatorsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.ids) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(18).fork();
    for (const v of message.supportedPlatformIds) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEmulatorsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEmulatorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.ids.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ids.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag === 16) {
            message.supportedPlatformIds.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.supportedPlatformIds.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEmulatorsRequest {
    return {
      ids: globalThis.Array.isArray(object?.ids) ? object.ids.map((e: any) => globalThis.Number(e)) : [],
      supportedPlatformIds: globalThis.Array.isArray(object?.supportedPlatformIds)
        ? object.supportedPlatformIds.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: GetEmulatorsRequest): unknown {
    const obj: any = {};
    if (message.ids?.length) {
      obj.ids = message.ids.map((e) => Math.round(e));
    }
    if (message.supportedPlatformIds?.length) {
      obj.supportedPlatformIds = message.supportedPlatformIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetEmulatorsRequest>): GetEmulatorsRequest {
    return GetEmulatorsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEmulatorsRequest>): GetEmulatorsRequest {
    const message = createBaseGetEmulatorsRequest();
    message.ids = object.ids?.map((e) => e) || [];
    message.supportedPlatformIds = object.supportedPlatformIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetEmulatorsResponse(): GetEmulatorsResponse {
  return { emulators: [] };
}

export const GetEmulatorsResponse: MessageFns<GetEmulatorsResponse> = {
  encode(message: GetEmulatorsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.emulators) {
      Emulator.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEmulatorsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEmulatorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.emulators.push(Emulator.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEmulatorsResponse {
    return {
      emulators: globalThis.Array.isArray(object?.emulators)
        ? object.emulators.map((e: any) => Emulator.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetEmulatorsResponse): unknown {
    const obj: any = {};
    if (message.emulators?.length) {
      obj.emulators = message.emulators.map((e) => Emulator.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetEmulatorsResponse>): GetEmulatorsResponse {
    return GetEmulatorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEmulatorsResponse>): GetEmulatorsResponse {
    const message = createBaseGetEmulatorsResponse();
    message.emulators = object.emulators?.map((e) => Emulator.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateEmulatorsRequest(): UpdateEmulatorsRequest {
  return { emulators: [] };
}

export const UpdateEmulatorsRequest: MessageFns<UpdateEmulatorsRequest> = {
  encode(message: UpdateEmulatorsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.emulators) {
      UpdatedEmulator.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEmulatorsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEmulatorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.emulators.push(UpdatedEmulator.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEmulatorsRequest {
    return {
      emulators: globalThis.Array.isArray(object?.emulators)
        ? object.emulators.map((e: any) => UpdatedEmulator.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UpdateEmulatorsRequest): unknown {
    const obj: any = {};
    if (message.emulators?.length) {
      obj.emulators = message.emulators.map((e) => UpdatedEmulator.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateEmulatorsRequest>): UpdateEmulatorsRequest {
    return UpdateEmulatorsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateEmulatorsRequest>): UpdateEmulatorsRequest {
    const message = createBaseUpdateEmulatorsRequest();
    message.emulators = object.emulators?.map((e) => UpdatedEmulator.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateEmulatorsResponse(): UpdateEmulatorsResponse {
  return { emulatorsUpdated: [] };
}

export const UpdateEmulatorsResponse: MessageFns<UpdateEmulatorsResponse> = {
  encode(message: UpdateEmulatorsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.emulatorsUpdated) {
      Emulator.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEmulatorsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEmulatorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.emulatorsUpdated.push(Emulator.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEmulatorsResponse {
    return {
      emulatorsUpdated: globalThis.Array.isArray(object?.emulatorsUpdated)
        ? object.emulatorsUpdated.map((e: any) => Emulator.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UpdateEmulatorsResponse): unknown {
    const obj: any = {};
    if (message.emulatorsUpdated?.length) {
      obj.emulatorsUpdated = message.emulatorsUpdated.map((e) => Emulator.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateEmulatorsResponse>): UpdateEmulatorsResponse {
    return UpdateEmulatorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateEmulatorsResponse>): UpdateEmulatorsResponse {
    const message = createBaseUpdateEmulatorsResponse();
    message.emulatorsUpdated = object.emulatorsUpdated?.map((e) => Emulator.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDeleteEmulatorsRequest(): DeleteEmulatorsRequest {
  return { ids: [] };
}

export const DeleteEmulatorsRequest: MessageFns<DeleteEmulatorsRequest> = {
  encode(message: DeleteEmulatorsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.ids) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteEmulatorsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteEmulatorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.ids.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ids.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteEmulatorsRequest {
    return { ids: globalThis.Array.isArray(object?.ids) ? object.ids.map((e: any) => globalThis.Number(e)) : [] };
  },

  toJSON(message: DeleteEmulatorsRequest): unknown {
    const obj: any = {};
    if (message.ids?.length) {
      obj.ids = message.ids.map((e) => Math.round(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteEmulatorsRequest>): DeleteEmulatorsRequest {
    return DeleteEmulatorsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteEmulatorsRequest>): DeleteEmulatorsRequest {
    const message = createBaseDeleteEmulatorsRequest();
    message.ids = object.ids?.map((e) => e) || [];
    return message;
  },
};

function createBaseDeleteEmulatorsResponse(): DeleteEmulatorsResponse {
  return { emulatorsDeleted: [] };
}

export const DeleteEmulatorsResponse: MessageFns<DeleteEmulatorsResponse> = {
  encode(message: DeleteEmulatorsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.emulatorsDeleted) {
      Emulator.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteEmulatorsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteEmulatorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.emulatorsDeleted.push(Emulator.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteEmulatorsResponse {
    return {
      emulatorsDeleted: globalThis.Array.isArray(object?.emulatorsDeleted)
        ? object.emulatorsDeleted.map((e: any) => Emulator.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DeleteEmulatorsResponse): unknown {
    const obj: any = {};
    if (message.emulatorsDeleted?.length) {
      obj.emulatorsDeleted = message.emulatorsDeleted.map((e) => Emulator.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteEmulatorsResponse>): DeleteEmulatorsResponse {
    return DeleteEmulatorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteEmulatorsResponse>): DeleteEmulatorsResponse {
    const message = createBaseDeleteEmulatorsResponse();
    message.emulatorsDeleted = object.emulatorsDeleted?.map((e) => Emulator.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateEmulatorProfilesRequest(): CreateEmulatorProfilesRequest {
  return { profiles: [] };
}

export const CreateEmulatorProfilesRequest: MessageFns<CreateEmulatorProfilesRequest> = {
  encode(message: CreateEmulatorProfilesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.profiles) {
      NewEmulatorProfile.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEmulatorProfilesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEmulatorProfilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profiles.push(NewEmulatorProfile.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEmulatorProfilesRequest {
    return {
      profiles: globalThis.Array.isArray(object?.profiles)
        ? object.profiles.map((e: any) => NewEmulatorProfile.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CreateEmulatorProfilesRequest): unknown {
    const obj: any = {};
    if (message.profiles?.length) {
      obj.profiles = message.profiles.map((e) => NewEmulatorProfile.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CreateEmulatorProfilesRequest>): CreateEmulatorProfilesRequest {
    return CreateEmulatorProfilesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEmulatorProfilesRequest>): CreateEmulatorProfilesRequest {
    const message = createBaseCreateEmulatorProfilesRequest();
    message.profiles = object.profiles?.map((e) => NewEmulatorProfile.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateEmulatorProfilesResponse(): CreateEmulatorProfilesResponse {
  return { profilesCreated: [] };
}

export const CreateEmulatorProfilesResponse: MessageFns<CreateEmulatorProfilesResponse> = {
  encode(message: CreateEmulatorProfilesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.profilesCreated) {
      EmulatorProfile.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEmulatorProfilesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEmulatorProfilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profilesCreated.push(EmulatorProfile.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEmulatorProfilesResponse {
    return {
      profilesCreated: globalThis.Array.isArray(object?.profilesCreated)
        ? object.profilesCreated.map((e: any) => EmulatorProfile.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CreateEmulatorProfilesResponse): unknown {
    const obj: any = {};
    if (message.profilesCreated?.length) {
      obj.profilesCreated = message.profilesCreated.map((e) => EmulatorProfile.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CreateEmulatorProfilesResponse>): CreateEmulatorProfilesResponse {
    return CreateEmulatorProfilesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEmulatorProfilesResponse>): CreateEmulatorProfilesResponse {
    const message = createBaseCreateEmulatorProfilesResponse();
    message.profilesCreated = object.profilesCreated?.map((e) => EmulatorProfile.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetEmulatorProfilesRequest(): GetEmulatorProfilesRequest {
  return { ids: [], emulatorIds: [] };
}

export const GetEmulatorProfilesRequest: MessageFns<GetEmulatorProfilesRequest> = {
  encode(message: GetEmulatorProfilesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.ids) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(18).fork();
    for (const v of message.emulatorIds) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEmulatorProfilesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEmulatorProfilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.ids.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ids.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag === 16) {
            message.emulatorIds.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.emulatorIds.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEmulatorProfilesRequest {
    return {
      ids: globalThis.Array.isArray(object?.ids) ? object.ids.map((e: any) => globalThis.Number(e)) : [],
      emulatorIds: globalThis.Array.isArray(object?.emulatorIds)
        ? object.emulatorIds.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: GetEmulatorProfilesRequest): unknown {
    const obj: any = {};
    if (message.ids?.length) {
      obj.ids = message.ids.map((e) => Math.round(e));
    }
    if (message.emulatorIds?.length) {
      obj.emulatorIds = message.emulatorIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetEmulatorProfilesRequest>): GetEmulatorProfilesRequest {
    return GetEmulatorProfilesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEmulatorProfilesRequest>): GetEmulatorProfilesRequest {
    const message = createBaseGetEmulatorProfilesRequest();
    message.ids = object.ids?.map((e) => e) || [];
    message.emulatorIds = object.emulatorIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetEmulatorProfilesResponse(): GetEmulatorProfilesResponse {
  return { profiles: [] };
}

export const GetEmulatorProfilesResponse: MessageFns<GetEmulatorProfilesResponse> = {
  encode(message: GetEmulatorProfilesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.profiles) {
      EmulatorProfile.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEmulatorProfilesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEmulatorProfilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profiles.push(EmulatorProfile.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEmulatorProfilesResponse {
    return {
      profiles: globalThis.Array.isArray(object?.profiles)
        ? object.profiles.map((e: any) => EmulatorProfile.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetEmulatorProfilesResponse): unknown {
    const obj: any = {};
    if (message.profiles?.length) {
      obj.profiles = message.profiles.map((e) => EmulatorProfile.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetEmulatorProfilesResponse>): GetEmulatorProfilesResponse {
    return GetEmulatorProfilesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEmulatorProfilesResponse>): GetEmulatorProfilesResponse {
    const message = createBaseGetEmulatorProfilesResponse();
    message.profiles = object.profiles?.map((e) => EmulatorProfile.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateEmulatorProfilesRequest(): UpdateEmulatorProfilesRequest {
  return { profiles: [] };
}

export const UpdateEmulatorProfilesRequest: MessageFns<UpdateEmulatorProfilesRequest> = {
  encode(message: UpdateEmulatorProfilesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.profiles) {
      UpdatedEmulatorProfile.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEmulatorProfilesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEmulatorProfilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profiles.push(UpdatedEmulatorProfile.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEmulatorProfilesRequest {
    return {
      profiles: globalThis.Array.isArray(object?.profiles)
        ? object.profiles.map((e: any) => UpdatedEmulatorProfile.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UpdateEmulatorProfilesRequest): unknown {
    const obj: any = {};
    if (message.profiles?.length) {
      obj.profiles = message.profiles.map((e) => UpdatedEmulatorProfile.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateEmulatorProfilesRequest>): UpdateEmulatorProfilesRequest {
    return UpdateEmulatorProfilesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateEmulatorProfilesRequest>): UpdateEmulatorProfilesRequest {
    const message = createBaseUpdateEmulatorProfilesRequest();
    message.profiles = object.profiles?.map((e) => UpdatedEmulatorProfile.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateEmulatorProfilesResponse(): UpdateEmulatorProfilesResponse {
  return { profilesUpdated: [] };
}

export const UpdateEmulatorProfilesResponse: MessageFns<UpdateEmulatorProfilesResponse> = {
  encode(message: UpdateEmulatorProfilesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.profilesUpdated) {
      EmulatorProfile.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEmulatorProfilesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEmulatorProfilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profilesUpdated.push(EmulatorProfile.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEmulatorProfilesResponse {
    return {
      profilesUpdated: globalThis.Array.isArray(object?.profilesUpdated)
        ? object.profilesUpdated.map((e: any) => EmulatorProfile.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UpdateEmulatorProfilesResponse): unknown {
    const obj: any = {};
    if (message.profilesUpdated?.length) {
      obj.profilesUpdated = message.profilesUpdated.map((e) => EmulatorProfile.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateEmulatorProfilesResponse>): UpdateEmulatorProfilesResponse {
    return UpdateEmulatorProfilesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateEmulatorProfilesResponse>): UpdateEmulatorProfilesResponse {
    const message = createBaseUpdateEmulatorProfilesResponse();
    message.profilesUpdated = object.profilesUpdated?.map((e) => EmulatorProfile.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDeleteEmulatorProfilesRequest(): DeleteEmulatorProfilesRequest {
  return { ids: [] };
}

export const DeleteEmulatorProfilesRequest: MessageFns<DeleteEmulatorProfilesRequest> = {
  encode(message: DeleteEmulatorProfilesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.ids) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteEmulatorProfilesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteEmulatorProfilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.ids.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ids.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteEmulatorProfilesRequest {
    return { ids: globalThis.Array.isArray(object?.ids) ? object.ids.map((e: any) => globalThis.Number(e)) : [] };
  },

  toJSON(message: DeleteEmulatorProfilesRequest): unknown {
    const obj: any = {};
    if (message.ids?.length) {
      obj.ids = message.ids.map((e) => Math.round(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteEmulatorProfilesRequest>): DeleteEmulatorProfilesRequest {
    return DeleteEmulatorProfilesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteEmulatorProfilesRequest>): DeleteEmulatorProfilesRequest {
    const message = createBaseDeleteEmulatorProfilesRequest();
    message.ids = object.ids?.map((e) => e) || [];
    return message;
  },
};

function createBaseDeleteEmulatorProfilesResponse(): DeleteEmulatorProfilesResponse {
  return { profilesDeleted: [] };
}

export const DeleteEmulatorProfilesResponse: MessageFns<DeleteEmulatorProfilesResponse> = {
  encode(message: DeleteEmulatorProfilesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.profilesDeleted) {
      EmulatorProfile.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteEmulatorProfilesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteEmulatorProfilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profilesDeleted.push(EmulatorProfile.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteEmulatorProfilesResponse {
    return {
      profilesDeleted: globalThis.Array.isArray(object?.profilesDeleted)
        ? object.profilesDeleted.map((e: any) => EmulatorProfile.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DeleteEmulatorProfilesResponse): unknown {
    const obj: any = {};
    if (message.profilesDeleted?.length) {
      obj.profilesDeleted = message.profilesDeleted.map((e) => EmulatorProfile.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteEmulatorProfilesResponse>): DeleteEmulatorProfilesResponse {
    return DeleteEmulatorProfilesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteEmulatorProfilesResponse>): DeleteEmulatorProfilesResponse {
    const message = createBaseDeleteEmulatorProfilesResponse();
    message.profilesDeleted = object.profilesDeleted?.map((e) => EmulatorProfile.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetDefaultEmulatorProfilesRequest(): GetDefaultEmulatorProfilesRequest {
  return { platformIds: [] };
}

export const GetDefaultEmulatorProfilesRequest: MessageFns<GetDefaultEmulatorProfilesRequest> = {
  encode(message: GetDefaultEmulatorProfilesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.platformIds) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultEmulatorProfilesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultEmulatorProfilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.platformIds.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.platformIds.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultEmulatorProfilesRequest {
    return {
      platformIds: globalThis.Array.isArray(object?.platformIds)
        ? object.platformIds.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: GetDefaultEmulatorProfilesRequest): unknown {
    const obj: any = {};
    if (message.platformIds?.length) {
      obj.platformIds = message.platformIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetDefaultEmulatorProfilesRequest>): GetDefaultEmulatorProfilesRequest {
    return GetDefaultEmulatorProfilesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultEmulatorProfilesRequest>): GetDefaultEmulatorProfilesRequest {
    const message = createBaseGetDefaultEmulatorProfilesRequest();
    message.platformIds = object.platformIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetDefaultEmulatorProfilesResponse(): GetDefaultEmulatorProfilesResponse {
  return { defaultProfiles: [] };
}

export const GetDefaultEmulatorProfilesResponse: MessageFns<GetDefaultEmulatorProfilesResponse> = {
  encode(message: GetDefaultEmulatorProfilesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.defaultProfiles) {
      DefaultEmulatorProfile.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultEmulatorProfilesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultEmulatorProfilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.defaultProfiles.push(DefaultEmulatorProfile.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultEmulatorProfilesResponse {
    return {
      defaultProfiles: globalThis.Array.isArray(object?.defaultProfiles)
        ? object.defaultProfiles.map((e: any) => DefaultEmulatorProfile.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetDefaultEmulatorProfilesResponse): unknown {
    const obj: any = {};
    if (message.defaultProfiles?.length) {
      obj.defaultProfiles = message.defaultProfiles.map((e) => DefaultEmulatorProfile.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetDefaultEmulatorProfilesResponse>): GetDefaultEmulatorProfilesResponse {
    return GetDefaultEmulatorProfilesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultEmulatorProfilesResponse>): GetDefaultEmulatorProfilesResponse {
    const message = createBaseGetDefaultEmulatorProfilesResponse();
    message.defaultProfiles = object.defaultProfiles?.map((e) => DefaultEmulatorProfile.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateDefaultEmulatorProfilesRequest(): UpdateDefaultEmulatorProfilesRequest {
  return { defaultProfiles: [] };
}

export const UpdateDefaultEmulatorProfilesRequest: MessageFns<UpdateDefaultEmulatorProfilesRequest> = {
  encode(message: UpdateDefaultEmulatorProfilesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.defaultProfiles) {
      UpdatedDefaultEmulatorProfile.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDefaultEmulatorProfilesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDefaultEmulatorProfilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.defaultProfiles.push(UpdatedDefaultEmulatorProfile.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDefaultEmulatorProfilesRequest {
    return {
      defaultProfiles: globalThis.Array.isArray(object?.defaultProfiles)
        ? object.defaultProfiles.map((e: any) => UpdatedDefaultEmulatorProfile.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UpdateDefaultEmulatorProfilesRequest): unknown {
    const obj: any = {};
    if (message.defaultProfiles?.length) {
      obj.defaultProfiles = message.defaultProfiles.map((e) => UpdatedDefaultEmulatorProfile.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDefaultEmulatorProfilesRequest>): UpdateDefaultEmulatorProfilesRequest {
    return UpdateDefaultEmulatorProfilesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDefaultEmulatorProfilesRequest>): UpdateDefaultEmulatorProfilesRequest {
    const message = createBaseUpdateDefaultEmulatorProfilesRequest();
    message.defaultProfiles = object.defaultProfiles?.map((e) => UpdatedDefaultEmulatorProfile.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateDefaultEmulatorProfilesResponse(): UpdateDefaultEmulatorProfilesResponse {
  return { defaultProfilesUpdated: [] };
}

export const UpdateDefaultEmulatorProfilesResponse: MessageFns<UpdateDefaultEmulatorProfilesResponse> = {
  encode(message: UpdateDefaultEmulatorProfilesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.defaultProfilesUpdated) {
      DefaultEmulatorProfile.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDefaultEmulatorProfilesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDefaultEmulatorProfilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.defaultProfilesUpdated.push(DefaultEmulatorProfile.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDefaultEmulatorProfilesResponse {
    return {
      defaultProfilesUpdated: globalThis.Array.isArray(object?.defaultProfilesUpdated)
        ? object.defaultProfilesUpdated.map((e: any) => DefaultEmulatorProfile.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UpdateDefaultEmulatorProfilesResponse): unknown {
    const obj: any = {};
    if (message.defaultProfilesUpdated?.length) {
      obj.defaultProfilesUpdated = message.defaultProfilesUpdated.map((e) => DefaultEmulatorProfile.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDefaultEmulatorProfilesResponse>): UpdateDefaultEmulatorProfilesResponse {
    return UpdateDefaultEmulatorProfilesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDefaultEmulatorProfilesResponse>): UpdateDefaultEmulatorProfilesResponse {
    const message = createBaseUpdateDefaultEmulatorProfilesResponse();
    message.defaultProfilesUpdated = object.defaultProfilesUpdated?.map((e) => DefaultEmulatorProfile.fromPartial(e)) ||
      [];
    return message;
  },
};

function createBaseDeleteDefaultEmulatorProfilesRequest(): DeleteDefaultEmulatorProfilesRequest {
  return { platformIds: [] };
}

export const DeleteDefaultEmulatorProfilesRequest: MessageFns<DeleteDefaultEmulatorProfilesRequest> = {
  encode(message: DeleteDefaultEmulatorProfilesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.platformIds) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDefaultEmulatorProfilesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDefaultEmulatorProfilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.platformIds.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.platformIds.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDefaultEmulatorProfilesRequest {
    return {
      platformIds: globalThis.Array.isArray(object?.platformIds)
        ? object.platformIds.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: DeleteDefaultEmulatorProfilesRequest): unknown {
    const obj: any = {};
    if (message.platformIds?.length) {
      obj.platformIds = message.platformIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDefaultEmulatorProfilesRequest>): DeleteDefaultEmulatorProfilesRequest {
    return DeleteDefaultEmulatorProfilesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDefaultEmulatorProfilesRequest>): DeleteDefaultEmulatorProfilesRequest {
    const message = createBaseDeleteDefaultEmulatorProfilesRequest();
    message.platformIds = object.platformIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseDeleteDefaultEmulatorProfilesResponse(): DeleteDefaultEmulatorProfilesResponse {
  return { defaultProfilesDeleted: [] };
}

export const DeleteDefaultEmulatorProfilesResponse: MessageFns<DeleteDefaultEmulatorProfilesResponse> = {
  encode(message: DeleteDefaultEmulatorProfilesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.defaultProfilesDeleted) {
      DefaultEmulatorProfile.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDefaultEmulatorProfilesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDefaultEmulatorProfilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.defaultProfilesDeleted.push(DefaultEmulatorProfile.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDefaultEmulatorProfilesResponse {
    return {
      defaultProfilesDeleted: globalThis.Array.isArray(object?.defaultProfilesDeleted)
        ? object.defaultProfilesDeleted.map((e: any) => DefaultEmulatorProfile.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DeleteDefaultEmulatorProfilesResponse): unknown {
    const obj: any = {};
    if (message.defaultProfilesDeleted?.length) {
      obj.defaultProfilesDeleted = message.defaultProfilesDeleted.map((e) => DefaultEmulatorProfile.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDefaultEmulatorProfilesResponse>): DeleteDefaultEmulatorProfilesResponse {
    return DeleteDefaultEmulatorProfilesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDefaultEmulatorProfilesResponse>): DeleteDefaultEmulatorProfilesResponse {
    const message = createBaseDeleteDefaultEmulatorProfilesResponse();
    message.defaultProfilesDeleted = object.defaultProfilesDeleted?.map((e) => DefaultEmulatorProfile.fromPartial(e)) ||
      [];
    return message;
  },
};

function createBaseDeleteGameFilesRequest(): DeleteGameFilesRequest {
  return { ids: [], deleteFromDisk: false, blacklistEntries: false };
}

export const DeleteGameFilesRequest: MessageFns<DeleteGameFilesRequest> = {
  encode(message: DeleteGameFilesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.ids) {
      writer.int32(v);
    }
    writer.join();
    if (message.deleteFromDisk !== false) {
      writer.uint32(16).bool(message.deleteFromDisk);
    }
    if (message.blacklistEntries !== false) {
      writer.uint32(24).bool(message.blacklistEntries);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteGameFilesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteGameFilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.ids.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ids.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.deleteFromDisk = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.blacklistEntries = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteGameFilesRequest {
    return {
      ids: globalThis.Array.isArray(object?.ids) ? object.ids.map((e: any) => globalThis.Number(e)) : [],
      deleteFromDisk: isSet(object.deleteFromDisk) ? globalThis.Boolean(object.deleteFromDisk) : false,
      blacklistEntries: isSet(object.blacklistEntries) ? globalThis.Boolean(object.blacklistEntries) : false,
    };
  },

  toJSON(message: DeleteGameFilesRequest): unknown {
    const obj: any = {};
    if (message.ids?.length) {
      obj.ids = message.ids.map((e) => Math.round(e));
    }
    if (message.deleteFromDisk !== false) {
      obj.deleteFromDisk = message.deleteFromDisk;
    }
    if (message.blacklistEntries !== false) {
      obj.blacklistEntries = message.blacklistEntries;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteGameFilesRequest>): DeleteGameFilesRequest {
    return DeleteGameFilesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteGameFilesRequest>): DeleteGameFilesRequest {
    const message = createBaseDeleteGameFilesRequest();
    message.ids = object.ids?.map((e) => e) || [];
    message.deleteFromDisk = object.deleteFromDisk ?? false;
    message.blacklistEntries = object.blacklistEntries ?? false;
    return message;
  },
};

function createBaseDeleteGameFilesResponse(): DeleteGameFilesResponse {
  return { gameFilesDeleted: [] };
}

export const DeleteGameFilesResponse: MessageFns<DeleteGameFilesResponse> = {
  encode(message: DeleteGameFilesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.gameFilesDeleted) {
      GameFile.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteGameFilesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteGameFilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gameFilesDeleted.push(GameFile.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteGameFilesResponse {
    return {
      gameFilesDeleted: globalThis.Array.isArray(object?.gameFilesDeleted)
        ? object.gameFilesDeleted.map((e: any) => GameFile.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DeleteGameFilesResponse): unknown {
    const obj: any = {};
    if (message.gameFilesDeleted?.length) {
      obj.gameFilesDeleted = message.gameFilesDeleted.map((e) => GameFile.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteGameFilesResponse>): DeleteGameFilesResponse {
    return DeleteGameFilesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteGameFilesResponse>): DeleteGameFilesResponse {
    const message = createBaseDeleteGameFilesResponse();
    message.gameFilesDeleted = object.gameFilesDeleted?.map((e) => GameFile.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateGameFilesRequest(): UpdateGameFilesRequest {
  return { gameFiles: [] };
}

export const UpdateGameFilesRequest: MessageFns<UpdateGameFilesRequest> = {
  encode(message: UpdateGameFilesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.gameFiles) {
      UpdatedGameFile.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGameFilesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGameFilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gameFiles.push(UpdatedGameFile.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGameFilesRequest {
    return {
      gameFiles: globalThis.Array.isArray(object?.gameFiles)
        ? object.gameFiles.map((e: any) => UpdatedGameFile.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UpdateGameFilesRequest): unknown {
    const obj: any = {};
    if (message.gameFiles?.length) {
      obj.gameFiles = message.gameFiles.map((e) => UpdatedGameFile.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGameFilesRequest>): UpdateGameFilesRequest {
    return UpdateGameFilesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGameFilesRequest>): UpdateGameFilesRequest {
    const message = createBaseUpdateGameFilesRequest();
    message.gameFiles = object.gameFiles?.map((e) => UpdatedGameFile.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateGameFilesResponse(): UpdateGameFilesResponse {
  return { gameFilesUpdated: [] };
}

export const UpdateGameFilesResponse: MessageFns<UpdateGameFilesResponse> = {
  encode(message: UpdateGameFilesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.gameFilesUpdated) {
      GameFile.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGameFilesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGameFilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gameFilesUpdated.push(GameFile.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGameFilesResponse {
    return {
      gameFilesUpdated: globalThis.Array.isArray(object?.gameFilesUpdated)
        ? object.gameFilesUpdated.map((e: any) => GameFile.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UpdateGameFilesResponse): unknown {
    const obj: any = {};
    if (message.gameFilesUpdated?.length) {
      obj.gameFilesUpdated = message.gameFilesUpdated.map((e) => GameFile.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGameFilesResponse>): UpdateGameFilesResponse {
    return UpdateGameFilesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGameFilesResponse>): UpdateGameFilesResponse {
    const message = createBaseUpdateGameFilesResponse();
    message.gameFilesUpdated = object.gameFilesUpdated?.map((e) => GameFile.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetJobsRequest(): GetJobsRequest {
  return {};
}

export const GetJobsRequest: MessageFns<GetJobsRequest> = {
  encode(_: GetJobsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetJobsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetJobsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetJobsRequest {
    return {};
  },

  toJSON(_: GetJobsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetJobsRequest>): GetJobsRequest {
    return GetJobsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetJobsRequest>): GetJobsRequest {
    const message = createBaseGetJobsRequest();
    return message;
  },
};

function createBaseGetJobsResponse(): GetJobsResponse {
  return { jobs: [] };
}

export const GetJobsResponse: MessageFns<GetJobsResponse> = {
  encode(message: GetJobsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.jobs) {
      JobProgress.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetJobsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetJobsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.jobs.push(JobProgress.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetJobsResponse {
    return { jobs: globalThis.Array.isArray(object?.jobs) ? object.jobs.map((e: any) => JobProgress.fromJSON(e)) : [] };
  },

  toJSON(message: GetJobsResponse): unknown {
    const obj: any = {};
    if (message.jobs?.length) {
      obj.jobs = message.jobs.map((e) => JobProgress.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetJobsResponse>): GetJobsResponse {
    return GetJobsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetJobsResponse>): GetJobsResponse {
    const message = createBaseGetJobsResponse();
    message.jobs = object.jobs?.map((e) => JobProgress.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetJobSubscriptionRequest(): GetJobSubscriptionRequest {
  return { jobId: "" };
}

export const GetJobSubscriptionRequest: MessageFns<GetJobSubscriptionRequest> = {
  encode(message: GetJobSubscriptionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jobId !== "") {
      writer.uint32(10).string(message.jobId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetJobSubscriptionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetJobSubscriptionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.jobId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetJobSubscriptionRequest {
    return { jobId: isSet(object.jobId) ? globalThis.String(object.jobId) : "" };
  },

  toJSON(message: GetJobSubscriptionRequest): unknown {
    const obj: any = {};
    if (message.jobId !== "") {
      obj.jobId = message.jobId;
    }
    return obj;
  },

  create(base?: DeepPartial<GetJobSubscriptionRequest>): GetJobSubscriptionRequest {
    return GetJobSubscriptionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetJobSubscriptionRequest>): GetJobSubscriptionRequest {
    const message = createBaseGetJobSubscriptionRequest();
    message.jobId = object.jobId ?? "";
    return message;
  },
};

function createBaseGetJobSubscriptionResponse(): GetJobSubscriptionResponse {
  return { job: undefined };
}

export const GetJobSubscriptionResponse: MessageFns<GetJobSubscriptionResponse> = {
  encode(message: GetJobSubscriptionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.job !== undefined) {
      JobProgress.encode(message.job, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetJobSubscriptionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetJobSubscriptionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.job = JobProgress.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetJobSubscriptionResponse {
    return { job: isSet(object.job) ? JobProgress.fromJSON(object.job) : undefined };
  },

  toJSON(message: GetJobSubscriptionResponse): unknown {
    const obj: any = {};
    if (message.job !== undefined) {
      obj.job = JobProgress.toJSON(message.job);
    }
    return obj;
  },

  create(base?: DeepPartial<GetJobSubscriptionResponse>): GetJobSubscriptionResponse {
    return GetJobSubscriptionResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetJobSubscriptionResponse>): GetJobSubscriptionResponse {
    const message = createBaseGetJobSubscriptionResponse();
    message.job = (object.job !== undefined && object.job !== null) ? JobProgress.fromPartial(object.job) : undefined;
    return message;
  },
};

function createBaseGetFilesystemNodeRequest(): GetFilesystemNodeRequest {
  return { path: undefined };
}

export const GetFilesystemNodeRequest: MessageFns<GetFilesystemNodeRequest> = {
  encode(message: GetFilesystemNodeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== undefined) {
      writer.uint32(10).string(message.path);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFilesystemNodeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFilesystemNodeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFilesystemNodeRequest {
    return { path: isSet(object.path) ? globalThis.String(object.path) : undefined };
  },

  toJSON(message: GetFilesystemNodeRequest): unknown {
    const obj: any = {};
    if (message.path !== undefined) {
      obj.path = message.path;
    }
    return obj;
  },

  create(base?: DeepPartial<GetFilesystemNodeRequest>): GetFilesystemNodeRequest {
    return GetFilesystemNodeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetFilesystemNodeRequest>): GetFilesystemNodeRequest {
    const message = createBaseGetFilesystemNodeRequest();
    message.path = object.path ?? undefined;
    return message;
  },
};

function createBaseGetFilesystemNodeResponse(): GetFilesystemNodeResponse {
  return { node: undefined, children: [] };
}

export const GetFilesystemNodeResponse: MessageFns<GetFilesystemNodeResponse> = {
  encode(message: GetFilesystemNodeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.node !== undefined) {
      FilesystemNode.encode(message.node, writer.uint32(10).fork()).join();
    }
    for (const v of message.children) {
      FilesystemNode.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFilesystemNodeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFilesystemNodeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.node = FilesystemNode.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.children.push(FilesystemNode.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFilesystemNodeResponse {
    return {
      node: isSet(object.node) ? FilesystemNode.fromJSON(object.node) : undefined,
      children: globalThis.Array.isArray(object?.children)
        ? object.children.map((e: any) => FilesystemNode.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetFilesystemNodeResponse): unknown {
    const obj: any = {};
    if (message.node !== undefined) {
      obj.node = FilesystemNode.toJSON(message.node);
    }
    if (message.children?.length) {
      obj.children = message.children.map((e) => FilesystemNode.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetFilesystemNodeResponse>): GetFilesystemNodeResponse {
    return GetFilesystemNodeResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetFilesystemNodeResponse>): GetFilesystemNodeResponse {
    const message = createBaseGetFilesystemNodeResponse();
    message.node = (object.node !== undefined && object.node !== null)
      ? FilesystemNode.fromPartial(object.node)
      : undefined;
    message.children = object.children?.map((e) => FilesystemNode.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateLocalEmulatorConfigsRequest(): CreateLocalEmulatorConfigsRequest {
  return { configs: [] };
}

export const CreateLocalEmulatorConfigsRequest: MessageFns<CreateLocalEmulatorConfigsRequest> = {
  encode(message: CreateLocalEmulatorConfigsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.configs) {
      NewLocalEmulatorConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateLocalEmulatorConfigsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateLocalEmulatorConfigsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.configs.push(NewLocalEmulatorConfig.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateLocalEmulatorConfigsRequest {
    return {
      configs: globalThis.Array.isArray(object?.configs)
        ? object.configs.map((e: any) => NewLocalEmulatorConfig.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CreateLocalEmulatorConfigsRequest): unknown {
    const obj: any = {};
    if (message.configs?.length) {
      obj.configs = message.configs.map((e) => NewLocalEmulatorConfig.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CreateLocalEmulatorConfigsRequest>): CreateLocalEmulatorConfigsRequest {
    return CreateLocalEmulatorConfigsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateLocalEmulatorConfigsRequest>): CreateLocalEmulatorConfigsRequest {
    const message = createBaseCreateLocalEmulatorConfigsRequest();
    message.configs = object.configs?.map((e) => NewLocalEmulatorConfig.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateLocalEmulatorConfigsResponse(): CreateLocalEmulatorConfigsResponse {
  return { configsCreated: [] };
}

export const CreateLocalEmulatorConfigsResponse: MessageFns<CreateLocalEmulatorConfigsResponse> = {
  encode(message: CreateLocalEmulatorConfigsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.configsCreated) {
      LocalEmulatorConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateLocalEmulatorConfigsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateLocalEmulatorConfigsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.configsCreated.push(LocalEmulatorConfig.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateLocalEmulatorConfigsResponse {
    return {
      configsCreated: globalThis.Array.isArray(object?.configsCreated)
        ? object.configsCreated.map((e: any) => LocalEmulatorConfig.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CreateLocalEmulatorConfigsResponse): unknown {
    const obj: any = {};
    if (message.configsCreated?.length) {
      obj.configsCreated = message.configsCreated.map((e) => LocalEmulatorConfig.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CreateLocalEmulatorConfigsResponse>): CreateLocalEmulatorConfigsResponse {
    return CreateLocalEmulatorConfigsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateLocalEmulatorConfigsResponse>): CreateLocalEmulatorConfigsResponse {
    const message = createBaseCreateLocalEmulatorConfigsResponse();
    message.configsCreated = object.configsCreated?.map((e) => LocalEmulatorConfig.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetLocalEmulatorConfigsRequest(): GetLocalEmulatorConfigsRequest {
  return { emulatorIds: [], clientId: 0 };
}

export const GetLocalEmulatorConfigsRequest: MessageFns<GetLocalEmulatorConfigsRequest> = {
  encode(message: GetLocalEmulatorConfigsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.emulatorIds) {
      writer.int32(v);
    }
    writer.join();
    if (message.clientId !== 0) {
      writer.uint32(16).int32(message.clientId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLocalEmulatorConfigsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLocalEmulatorConfigsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.emulatorIds.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.emulatorIds.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.clientId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLocalEmulatorConfigsRequest {
    return {
      emulatorIds: globalThis.Array.isArray(object?.emulatorIds)
        ? object.emulatorIds.map((e: any) => globalThis.Number(e))
        : [],
      clientId: isSet(object.clientId) ? globalThis.Number(object.clientId) : 0,
    };
  },

  toJSON(message: GetLocalEmulatorConfigsRequest): unknown {
    const obj: any = {};
    if (message.emulatorIds?.length) {
      obj.emulatorIds = message.emulatorIds.map((e) => Math.round(e));
    }
    if (message.clientId !== 0) {
      obj.clientId = Math.round(message.clientId);
    }
    return obj;
  },

  create(base?: DeepPartial<GetLocalEmulatorConfigsRequest>): GetLocalEmulatorConfigsRequest {
    return GetLocalEmulatorConfigsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetLocalEmulatorConfigsRequest>): GetLocalEmulatorConfigsRequest {
    const message = createBaseGetLocalEmulatorConfigsRequest();
    message.emulatorIds = object.emulatorIds?.map((e) => e) || [];
    message.clientId = object.clientId ?? 0;
    return message;
  },
};

function createBaseGetLocalEmulatorConfigsResponse(): GetLocalEmulatorConfigsResponse {
  return { configs: [] };
}

export const GetLocalEmulatorConfigsResponse: MessageFns<GetLocalEmulatorConfigsResponse> = {
  encode(message: GetLocalEmulatorConfigsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.configs) {
      LocalEmulatorConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLocalEmulatorConfigsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLocalEmulatorConfigsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.configs.push(LocalEmulatorConfig.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLocalEmulatorConfigsResponse {
    return {
      configs: globalThis.Array.isArray(object?.configs)
        ? object.configs.map((e: any) => LocalEmulatorConfig.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetLocalEmulatorConfigsResponse): unknown {
    const obj: any = {};
    if (message.configs?.length) {
      obj.configs = message.configs.map((e) => LocalEmulatorConfig.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetLocalEmulatorConfigsResponse>): GetLocalEmulatorConfigsResponse {
    return GetLocalEmulatorConfigsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetLocalEmulatorConfigsResponse>): GetLocalEmulatorConfigsResponse {
    const message = createBaseGetLocalEmulatorConfigsResponse();
    message.configs = object.configs?.map((e) => LocalEmulatorConfig.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateLocalEmulatorConfigsRequest(): UpdateLocalEmulatorConfigsRequest {
  return { configs: [] };
}

export const UpdateLocalEmulatorConfigsRequest: MessageFns<UpdateLocalEmulatorConfigsRequest> = {
  encode(message: UpdateLocalEmulatorConfigsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.configs) {
      UpdatedLocalEmulatorConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateLocalEmulatorConfigsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLocalEmulatorConfigsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.configs.push(UpdatedLocalEmulatorConfig.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLocalEmulatorConfigsRequest {
    return {
      configs: globalThis.Array.isArray(object?.configs)
        ? object.configs.map((e: any) => UpdatedLocalEmulatorConfig.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UpdateLocalEmulatorConfigsRequest): unknown {
    const obj: any = {};
    if (message.configs?.length) {
      obj.configs = message.configs.map((e) => UpdatedLocalEmulatorConfig.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateLocalEmulatorConfigsRequest>): UpdateLocalEmulatorConfigsRequest {
    return UpdateLocalEmulatorConfigsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateLocalEmulatorConfigsRequest>): UpdateLocalEmulatorConfigsRequest {
    const message = createBaseUpdateLocalEmulatorConfigsRequest();
    message.configs = object.configs?.map((e) => UpdatedLocalEmulatorConfig.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateLocalEmulatorConfigsResponse(): UpdateLocalEmulatorConfigsResponse {
  return { configsUpdated: [] };
}

export const UpdateLocalEmulatorConfigsResponse: MessageFns<UpdateLocalEmulatorConfigsResponse> = {
  encode(message: UpdateLocalEmulatorConfigsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.configsUpdated) {
      LocalEmulatorConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateLocalEmulatorConfigsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLocalEmulatorConfigsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.configsUpdated.push(LocalEmulatorConfig.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLocalEmulatorConfigsResponse {
    return {
      configsUpdated: globalThis.Array.isArray(object?.configsUpdated)
        ? object.configsUpdated.map((e: any) => LocalEmulatorConfig.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UpdateLocalEmulatorConfigsResponse): unknown {
    const obj: any = {};
    if (message.configsUpdated?.length) {
      obj.configsUpdated = message.configsUpdated.map((e) => LocalEmulatorConfig.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateLocalEmulatorConfigsResponse>): UpdateLocalEmulatorConfigsResponse {
    return UpdateLocalEmulatorConfigsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateLocalEmulatorConfigsResponse>): UpdateLocalEmulatorConfigsResponse {
    const message = createBaseUpdateLocalEmulatorConfigsResponse();
    message.configsUpdated = object.configsUpdated?.map((e) => LocalEmulatorConfig.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDeleteLocalEmulatorConfigsRequest(): DeleteLocalEmulatorConfigsRequest {
  return { ids: [] };
}

export const DeleteLocalEmulatorConfigsRequest: MessageFns<DeleteLocalEmulatorConfigsRequest> = {
  encode(message: DeleteLocalEmulatorConfigsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.ids) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteLocalEmulatorConfigsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteLocalEmulatorConfigsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.ids.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ids.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteLocalEmulatorConfigsRequest {
    return { ids: globalThis.Array.isArray(object?.ids) ? object.ids.map((e: any) => globalThis.Number(e)) : [] };
  },

  toJSON(message: DeleteLocalEmulatorConfigsRequest): unknown {
    const obj: any = {};
    if (message.ids?.length) {
      obj.ids = message.ids.map((e) => Math.round(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteLocalEmulatorConfigsRequest>): DeleteLocalEmulatorConfigsRequest {
    return DeleteLocalEmulatorConfigsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteLocalEmulatorConfigsRequest>): DeleteLocalEmulatorConfigsRequest {
    const message = createBaseDeleteLocalEmulatorConfigsRequest();
    message.ids = object.ids?.map((e) => e) || [];
    return message;
  },
};

function createBaseDeleteLocalEmulatorConfigsResponse(): DeleteLocalEmulatorConfigsResponse {
  return { configsDeleted: [] };
}

export const DeleteLocalEmulatorConfigsResponse: MessageFns<DeleteLocalEmulatorConfigsResponse> = {
  encode(message: DeleteLocalEmulatorConfigsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.configsDeleted) {
      LocalEmulatorConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteLocalEmulatorConfigsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteLocalEmulatorConfigsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.configsDeleted.push(LocalEmulatorConfig.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteLocalEmulatorConfigsResponse {
    return {
      configsDeleted: globalThis.Array.isArray(object?.configsDeleted)
        ? object.configsDeleted.map((e: any) => LocalEmulatorConfig.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DeleteLocalEmulatorConfigsResponse): unknown {
    const obj: any = {};
    if (message.configsDeleted?.length) {
      obj.configsDeleted = message.configsDeleted.map((e) => LocalEmulatorConfig.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteLocalEmulatorConfigsResponse>): DeleteLocalEmulatorConfigsResponse {
    return DeleteLocalEmulatorConfigsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteLocalEmulatorConfigsResponse>): DeleteLocalEmulatorConfigsResponse {
    const message = createBaseDeleteLocalEmulatorConfigsResponse();
    message.configsDeleted = object.configsDeleted?.map((e) => LocalEmulatorConfig.fromPartial(e)) || [];
    return message;
  },
};

export type LibraryServiceDefinition = typeof LibraryServiceDefinition;
export const LibraryServiceDefinition = {
  name: "LibraryService",
  fullName: "retrom.LibraryService",
  methods: {
    updateLibrary: {
      name: "UpdateLibrary",
      requestType: UpdateLibraryRequest,
      requestStream: false,
      responseType: UpdateLibraryResponse,
      responseStream: false,
      options: {},
    },
    updateLibraryMetadata: {
      name: "UpdateLibraryMetadata",
      requestType: UpdateLibraryMetadataRequest,
      requestStream: false,
      responseType: UpdateLibraryMetadataResponse,
      responseStream: false,
      options: {},
    },
    deleteLibrary: {
      name: "DeleteLibrary",
      requestType: DeleteLibraryRequest,
      requestStream: false,
      responseType: DeleteLibraryResponse,
      responseStream: false,
      options: {},
    },
    deleteMissingEntries: {
      name: "DeleteMissingEntries",
      requestType: DeleteMissingEntriesRequest,
      requestStream: false,
      responseType: DeleteMissingEntriesResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface LibraryServiceImplementation<CallContextExt = {}> {
  updateLibrary(
    request: UpdateLibraryRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateLibraryResponse>>;
  updateLibraryMetadata(
    request: UpdateLibraryMetadataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateLibraryMetadataResponse>>;
  deleteLibrary(
    request: DeleteLibraryRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeleteLibraryResponse>>;
  deleteMissingEntries(
    request: DeleteMissingEntriesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeleteMissingEntriesResponse>>;
}

export interface LibraryServiceClient<CallOptionsExt = {}> {
  updateLibrary(
    request: DeepPartial<UpdateLibraryRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateLibraryResponse>;
  updateLibraryMetadata(
    request: DeepPartial<UpdateLibraryMetadataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateLibraryMetadataResponse>;
  deleteLibrary(
    request: DeepPartial<DeleteLibraryRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeleteLibraryResponse>;
  deleteMissingEntries(
    request: DeepPartial<DeleteMissingEntriesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeleteMissingEntriesResponse>;
}

export type PlatformServiceDefinition = typeof PlatformServiceDefinition;
export const PlatformServiceDefinition = {
  name: "PlatformService",
  fullName: "retrom.PlatformService",
  methods: {
    getPlatforms: {
      name: "GetPlatforms",
      requestType: GetPlatformsRequest,
      requestStream: false,
      responseType: GetPlatformsResponse,
      responseStream: false,
      options: {},
    },
    deletePlatforms: {
      name: "DeletePlatforms",
      requestType: DeletePlatformsRequest,
      requestStream: false,
      responseType: DeletePlatformsResponse,
      responseStream: false,
      options: {},
    },
    updatePlatforms: {
      name: "UpdatePlatforms",
      requestType: UpdatePlatformsRequest,
      requestStream: false,
      responseType: UpdatePlatformsResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface PlatformServiceImplementation<CallContextExt = {}> {
  getPlatforms(
    request: GetPlatformsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetPlatformsResponse>>;
  deletePlatforms(
    request: DeletePlatformsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeletePlatformsResponse>>;
  updatePlatforms(
    request: UpdatePlatformsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdatePlatformsResponse>>;
}

export interface PlatformServiceClient<CallOptionsExt = {}> {
  getPlatforms(
    request: DeepPartial<GetPlatformsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetPlatformsResponse>;
  deletePlatforms(
    request: DeepPartial<DeletePlatformsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeletePlatformsResponse>;
  updatePlatforms(
    request: DeepPartial<UpdatePlatformsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdatePlatformsResponse>;
}

export type GameServiceDefinition = typeof GameServiceDefinition;
export const GameServiceDefinition = {
  name: "GameService",
  fullName: "retrom.GameService",
  methods: {
    getGames: {
      name: "GetGames",
      requestType: GetGamesRequest,
      requestStream: false,
      responseType: GetGamesResponse,
      responseStream: false,
      options: {},
    },
    deleteGames: {
      name: "DeleteGames",
      requestType: DeleteGamesRequest,
      requestStream: false,
      responseType: DeleteGamesResponse,
      responseStream: false,
      options: {},
    },
    updateGames: {
      name: "UpdateGames",
      requestType: UpdateGamesRequest,
      requestStream: false,
      responseType: UpdateGamesResponse,
      responseStream: false,
      options: {},
    },
    deleteGameFiles: {
      name: "DeleteGameFiles",
      requestType: DeleteGameFilesRequest,
      requestStream: false,
      responseType: DeleteGameFilesResponse,
      responseStream: false,
      options: {},
    },
    updateGameFiles: {
      name: "UpdateGameFiles",
      requestType: UpdateGameFilesRequest,
      requestStream: false,
      responseType: UpdateGameFilesResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface GameServiceImplementation<CallContextExt = {}> {
  getGames(request: GetGamesRequest, context: CallContext & CallContextExt): Promise<DeepPartial<GetGamesResponse>>;
  deleteGames(
    request: DeleteGamesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeleteGamesResponse>>;
  updateGames(
    request: UpdateGamesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateGamesResponse>>;
  deleteGameFiles(
    request: DeleteGameFilesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeleteGameFilesResponse>>;
  updateGameFiles(
    request: UpdateGameFilesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateGameFilesResponse>>;
}

export interface GameServiceClient<CallOptionsExt = {}> {
  getGames(request: DeepPartial<GetGamesRequest>, options?: CallOptions & CallOptionsExt): Promise<GetGamesResponse>;
  deleteGames(
    request: DeepPartial<DeleteGamesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeleteGamesResponse>;
  updateGames(
    request: DeepPartial<UpdateGamesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateGamesResponse>;
  deleteGameFiles(
    request: DeepPartial<DeleteGameFilesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeleteGameFilesResponse>;
  updateGameFiles(
    request: DeepPartial<UpdateGameFilesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateGameFilesResponse>;
}

export type MetadataServiceDefinition = typeof MetadataServiceDefinition;
export const MetadataServiceDefinition = {
  name: "MetadataService",
  fullName: "retrom.MetadataService",
  methods: {
    getGameMetadata: {
      name: "GetGameMetadata",
      requestType: GetGameMetadataRequest,
      requestStream: false,
      responseType: GetGameMetadataResponse,
      responseStream: false,
      options: {},
    },
    updateGameMetadata: {
      name: "UpdateGameMetadata",
      requestType: UpdateGameMetadataRequest,
      requestStream: false,
      responseType: UpdateGameMetadataResponse,
      responseStream: false,
      options: {},
    },
    getPlatformMetadata: {
      name: "GetPlatformMetadata",
      requestType: GetPlatformMetadataRequest,
      requestStream: false,
      responseType: GetPlatformMetadataResponse,
      responseStream: false,
      options: {},
    },
    updatePlatformMetadata: {
      name: "UpdatePlatformMetadata",
      requestType: UpdatePlatformMetadataRequest,
      requestStream: false,
      responseType: UpdatePlatformMetadataResponse,
      responseStream: false,
      options: {},
    },
    getIgdbSearch: {
      name: "GetIgdbSearch",
      requestType: GetIgdbSearchRequest,
      requestStream: false,
      responseType: GetIgdbSearchResponse,
      responseStream: false,
      options: {},
    },
    getIgdbGameSearchResults: {
      name: "GetIgdbGameSearchResults",
      requestType: GetIgdbGameSearchResultsRequest,
      requestStream: false,
      responseType: GetIgdbGameSearchResultsResponse,
      responseStream: false,
      options: {},
    },
    getIgdbPlatformSearchResults: {
      name: "GetIgdbPlatformSearchResults",
      requestType: GetIgdbPlatformSearchResultsRequest,
      requestStream: false,
      responseType: GetIgdbPlatformSearchResultsResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface MetadataServiceImplementation<CallContextExt = {}> {
  getGameMetadata(
    request: GetGameMetadataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetGameMetadataResponse>>;
  updateGameMetadata(
    request: UpdateGameMetadataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateGameMetadataResponse>>;
  getPlatformMetadata(
    request: GetPlatformMetadataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetPlatformMetadataResponse>>;
  updatePlatformMetadata(
    request: UpdatePlatformMetadataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdatePlatformMetadataResponse>>;
  getIgdbSearch(
    request: GetIgdbSearchRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetIgdbSearchResponse>>;
  getIgdbGameSearchResults(
    request: GetIgdbGameSearchResultsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetIgdbGameSearchResultsResponse>>;
  getIgdbPlatformSearchResults(
    request: GetIgdbPlatformSearchResultsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetIgdbPlatformSearchResultsResponse>>;
}

export interface MetadataServiceClient<CallOptionsExt = {}> {
  getGameMetadata(
    request: DeepPartial<GetGameMetadataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetGameMetadataResponse>;
  updateGameMetadata(
    request: DeepPartial<UpdateGameMetadataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateGameMetadataResponse>;
  getPlatformMetadata(
    request: DeepPartial<GetPlatformMetadataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetPlatformMetadataResponse>;
  updatePlatformMetadata(
    request: DeepPartial<UpdatePlatformMetadataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdatePlatformMetadataResponse>;
  getIgdbSearch(
    request: DeepPartial<GetIgdbSearchRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetIgdbSearchResponse>;
  getIgdbGameSearchResults(
    request: DeepPartial<GetIgdbGameSearchResultsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetIgdbGameSearchResultsResponse>;
  getIgdbPlatformSearchResults(
    request: DeepPartial<GetIgdbPlatformSearchResultsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetIgdbPlatformSearchResultsResponse>;
}

export type ClientServiceDefinition = typeof ClientServiceDefinition;
export const ClientServiceDefinition = {
  name: "ClientService",
  fullName: "retrom.ClientService",
  methods: {
    createClient: {
      name: "CreateClient",
      requestType: CreateClientRequest,
      requestStream: false,
      responseType: CreateClientResponse,
      responseStream: false,
      options: {},
    },
    getClients: {
      name: "GetClients",
      requestType: GetClientsRequest,
      requestStream: false,
      responseType: GetClientsResponse,
      responseStream: false,
      options: {},
    },
    updateClients: {
      name: "UpdateClients",
      requestType: UpdateClientsRequest,
      requestStream: false,
      responseType: UpdateClientsResponse,
      responseStream: false,
      options: {},
    },
    deleteClients: {
      name: "DeleteClients",
      requestType: DeleteClientsRequest,
      requestStream: false,
      responseType: DeleteClientsResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface ClientServiceImplementation<CallContextExt = {}> {
  createClient(
    request: CreateClientRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CreateClientResponse>>;
  getClients(
    request: GetClientsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetClientsResponse>>;
  updateClients(
    request: UpdateClientsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateClientsResponse>>;
  deleteClients(
    request: DeleteClientsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeleteClientsResponse>>;
}

export interface ClientServiceClient<CallOptionsExt = {}> {
  createClient(
    request: DeepPartial<CreateClientRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreateClientResponse>;
  getClients(
    request: DeepPartial<GetClientsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetClientsResponse>;
  updateClients(
    request: DeepPartial<UpdateClientsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateClientsResponse>;
  deleteClients(
    request: DeepPartial<DeleteClientsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeleteClientsResponse>;
}

export type ServerServiceDefinition = typeof ServerServiceDefinition;
export const ServerServiceDefinition = {
  name: "ServerService",
  fullName: "retrom.ServerService",
  methods: {
    getServerInfo: {
      name: "GetServerInfo",
      requestType: GetServerInfoRequest,
      requestStream: false,
      responseType: GetServerInfoResponse,
      responseStream: false,
      options: {},
    },
    getServerConfig: {
      name: "GetServerConfig",
      requestType: GetServerConfigRequest,
      requestStream: false,
      responseType: GetServerConfigResponse,
      responseStream: false,
      options: {},
    },
    updateServerConfig: {
      name: "UpdateServerConfig",
      requestType: UpdateServerConfigRequest,
      requestStream: false,
      responseType: UpdateServerConfigResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface ServerServiceImplementation<CallContextExt = {}> {
  getServerInfo(
    request: GetServerInfoRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetServerInfoResponse>>;
  getServerConfig(
    request: GetServerConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetServerConfigResponse>>;
  updateServerConfig(
    request: UpdateServerConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateServerConfigResponse>>;
}

export interface ServerServiceClient<CallOptionsExt = {}> {
  getServerInfo(
    request: DeepPartial<GetServerInfoRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetServerInfoResponse>;
  getServerConfig(
    request: DeepPartial<GetServerConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetServerConfigResponse>;
  updateServerConfig(
    request: DeepPartial<UpdateServerConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateServerConfigResponse>;
}

export type EmulatorServiceDefinition = typeof EmulatorServiceDefinition;
export const EmulatorServiceDefinition = {
  name: "EmulatorService",
  fullName: "retrom.EmulatorService",
  methods: {
    createEmulators: {
      name: "CreateEmulators",
      requestType: CreateEmulatorsRequest,
      requestStream: false,
      responseType: CreateEmulatorsResponse,
      responseStream: false,
      options: {},
    },
    getEmulators: {
      name: "GetEmulators",
      requestType: GetEmulatorsRequest,
      requestStream: false,
      responseType: GetEmulatorsResponse,
      responseStream: false,
      options: {},
    },
    updateEmulators: {
      name: "UpdateEmulators",
      requestType: UpdateEmulatorsRequest,
      requestStream: false,
      responseType: UpdateEmulatorsResponse,
      responseStream: false,
      options: {},
    },
    deleteEmulators: {
      name: "DeleteEmulators",
      requestType: DeleteEmulatorsRequest,
      requestStream: false,
      responseType: DeleteEmulatorsResponse,
      responseStream: false,
      options: {},
    },
    createEmulatorProfiles: {
      name: "CreateEmulatorProfiles",
      requestType: CreateEmulatorProfilesRequest,
      requestStream: false,
      responseType: CreateEmulatorProfilesResponse,
      responseStream: false,
      options: {},
    },
    getEmulatorProfiles: {
      name: "GetEmulatorProfiles",
      requestType: GetEmulatorProfilesRequest,
      requestStream: false,
      responseType: GetEmulatorProfilesResponse,
      responseStream: false,
      options: {},
    },
    updateEmulatorProfiles: {
      name: "UpdateEmulatorProfiles",
      requestType: UpdateEmulatorProfilesRequest,
      requestStream: false,
      responseType: UpdateEmulatorProfilesResponse,
      responseStream: false,
      options: {},
    },
    deleteEmulatorProfiles: {
      name: "DeleteEmulatorProfiles",
      requestType: DeleteEmulatorProfilesRequest,
      requestStream: false,
      responseType: DeleteEmulatorProfilesResponse,
      responseStream: false,
      options: {},
    },
    getDefaultEmulatorProfiles: {
      name: "GetDefaultEmulatorProfiles",
      requestType: GetDefaultEmulatorProfilesRequest,
      requestStream: false,
      responseType: GetDefaultEmulatorProfilesResponse,
      responseStream: false,
      options: {},
    },
    updateDefaultEmulatorProfiles: {
      name: "UpdateDefaultEmulatorProfiles",
      requestType: UpdateDefaultEmulatorProfilesRequest,
      requestStream: false,
      responseType: UpdateDefaultEmulatorProfilesResponse,
      responseStream: false,
      options: {},
    },
    deleteDefaultEmulatorProfiles: {
      name: "DeleteDefaultEmulatorProfiles",
      requestType: DeleteDefaultEmulatorProfilesRequest,
      requestStream: false,
      responseType: DeleteDefaultEmulatorProfilesResponse,
      responseStream: false,
      options: {},
    },
    createLocalEmulatorConfigs: {
      name: "CreateLocalEmulatorConfigs",
      requestType: CreateLocalEmulatorConfigsRequest,
      requestStream: false,
      responseType: CreateLocalEmulatorConfigsResponse,
      responseStream: false,
      options: {},
    },
    getLocalEmulatorConfigs: {
      name: "GetLocalEmulatorConfigs",
      requestType: GetLocalEmulatorConfigsRequest,
      requestStream: false,
      responseType: GetLocalEmulatorConfigsResponse,
      responseStream: false,
      options: {},
    },
    updateLocalEmulatorConfigs: {
      name: "UpdateLocalEmulatorConfigs",
      requestType: UpdateLocalEmulatorConfigsRequest,
      requestStream: false,
      responseType: UpdateLocalEmulatorConfigsResponse,
      responseStream: false,
      options: {},
    },
    deleteLocalEmulatorConfigs: {
      name: "DeleteLocalEmulatorConfigs",
      requestType: DeleteLocalEmulatorConfigsRequest,
      requestStream: false,
      responseType: DeleteLocalEmulatorConfigsResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface EmulatorServiceImplementation<CallContextExt = {}> {
  createEmulators(
    request: CreateEmulatorsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CreateEmulatorsResponse>>;
  getEmulators(
    request: GetEmulatorsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetEmulatorsResponse>>;
  updateEmulators(
    request: UpdateEmulatorsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateEmulatorsResponse>>;
  deleteEmulators(
    request: DeleteEmulatorsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeleteEmulatorsResponse>>;
  createEmulatorProfiles(
    request: CreateEmulatorProfilesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CreateEmulatorProfilesResponse>>;
  getEmulatorProfiles(
    request: GetEmulatorProfilesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetEmulatorProfilesResponse>>;
  updateEmulatorProfiles(
    request: UpdateEmulatorProfilesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateEmulatorProfilesResponse>>;
  deleteEmulatorProfiles(
    request: DeleteEmulatorProfilesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeleteEmulatorProfilesResponse>>;
  getDefaultEmulatorProfiles(
    request: GetDefaultEmulatorProfilesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultEmulatorProfilesResponse>>;
  updateDefaultEmulatorProfiles(
    request: UpdateDefaultEmulatorProfilesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateDefaultEmulatorProfilesResponse>>;
  deleteDefaultEmulatorProfiles(
    request: DeleteDefaultEmulatorProfilesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeleteDefaultEmulatorProfilesResponse>>;
  createLocalEmulatorConfigs(
    request: CreateLocalEmulatorConfigsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CreateLocalEmulatorConfigsResponse>>;
  getLocalEmulatorConfigs(
    request: GetLocalEmulatorConfigsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetLocalEmulatorConfigsResponse>>;
  updateLocalEmulatorConfigs(
    request: UpdateLocalEmulatorConfigsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateLocalEmulatorConfigsResponse>>;
  deleteLocalEmulatorConfigs(
    request: DeleteLocalEmulatorConfigsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeleteLocalEmulatorConfigsResponse>>;
}

export interface EmulatorServiceClient<CallOptionsExt = {}> {
  createEmulators(
    request: DeepPartial<CreateEmulatorsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreateEmulatorsResponse>;
  getEmulators(
    request: DeepPartial<GetEmulatorsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetEmulatorsResponse>;
  updateEmulators(
    request: DeepPartial<UpdateEmulatorsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateEmulatorsResponse>;
  deleteEmulators(
    request: DeepPartial<DeleteEmulatorsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeleteEmulatorsResponse>;
  createEmulatorProfiles(
    request: DeepPartial<CreateEmulatorProfilesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreateEmulatorProfilesResponse>;
  getEmulatorProfiles(
    request: DeepPartial<GetEmulatorProfilesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetEmulatorProfilesResponse>;
  updateEmulatorProfiles(
    request: DeepPartial<UpdateEmulatorProfilesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateEmulatorProfilesResponse>;
  deleteEmulatorProfiles(
    request: DeepPartial<DeleteEmulatorProfilesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeleteEmulatorProfilesResponse>;
  getDefaultEmulatorProfiles(
    request: DeepPartial<GetDefaultEmulatorProfilesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultEmulatorProfilesResponse>;
  updateDefaultEmulatorProfiles(
    request: DeepPartial<UpdateDefaultEmulatorProfilesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateDefaultEmulatorProfilesResponse>;
  deleteDefaultEmulatorProfiles(
    request: DeepPartial<DeleteDefaultEmulatorProfilesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeleteDefaultEmulatorProfilesResponse>;
  createLocalEmulatorConfigs(
    request: DeepPartial<CreateLocalEmulatorConfigsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreateLocalEmulatorConfigsResponse>;
  getLocalEmulatorConfigs(
    request: DeepPartial<GetLocalEmulatorConfigsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetLocalEmulatorConfigsResponse>;
  updateLocalEmulatorConfigs(
    request: DeepPartial<UpdateLocalEmulatorConfigsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateLocalEmulatorConfigsResponse>;
  deleteLocalEmulatorConfigs(
    request: DeepPartial<DeleteLocalEmulatorConfigsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeleteLocalEmulatorConfigsResponse>;
}

export type JobServiceDefinition = typeof JobServiceDefinition;
export const JobServiceDefinition = {
  name: "JobService",
  fullName: "retrom.JobService",
  methods: {
    getJobs: {
      name: "GetJobs",
      requestType: GetJobsRequest,
      requestStream: false,
      responseType: GetJobsResponse,
      responseStream: true,
      options: {},
    },
    getJobSubscription: {
      name: "GetJobSubscription",
      requestType: GetJobSubscriptionRequest,
      requestStream: false,
      responseType: GetJobSubscriptionResponse,
      responseStream: true,
      options: {},
    },
  },
} as const;

export interface JobServiceImplementation<CallContextExt = {}> {
  getJobs(
    request: GetJobsRequest,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<GetJobsResponse>>;
  getJobSubscription(
    request: GetJobSubscriptionRequest,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<GetJobSubscriptionResponse>>;
}

export interface JobServiceClient<CallOptionsExt = {}> {
  getJobs(request: DeepPartial<GetJobsRequest>, options?: CallOptions & CallOptionsExt): AsyncIterable<GetJobsResponse>;
  getJobSubscription(
    request: DeepPartial<GetJobSubscriptionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<GetJobSubscriptionResponse>;
}

export type FileExplorerServiceDefinition = typeof FileExplorerServiceDefinition;
export const FileExplorerServiceDefinition = {
  name: "FileExplorerService",
  fullName: "retrom.FileExplorerService",
  methods: {
    getFilesystemNode: {
      name: "GetFilesystemNode",
      requestType: GetFilesystemNodeRequest,
      requestStream: false,
      responseType: GetFilesystemNodeResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface FileExplorerServiceImplementation<CallContextExt = {}> {
  getFilesystemNode(
    request: GetFilesystemNodeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetFilesystemNodeResponse>>;
}

export interface FileExplorerServiceClient<CallOptionsExt = {}> {
  getFilesystemNode(
    request: DeepPartial<GetFilesystemNodeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetFilesystemNodeResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
