// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: retrom/models/metadata.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../google/protobuf/timestamp";
export const protobufPackage = "retrom";
function createBaseGameMetadata() {
    return {
        gameId: 0,
        name: undefined,
        description: undefined,
        coverUrl: undefined,
        backgroundUrl: undefined,
        iconUrl: undefined,
        igdbId: undefined,
        createdAt: undefined,
        updatedAt: undefined,
        links: [],
        videoUrls: [],
        screenshotUrls: [],
        artworkUrls: [],
        releaseDate: undefined,
        lastPlayed: undefined,
        minutesPlayed: undefined,
    };
}
export const GameMetadata = {
    encode(message, writer = new BinaryWriter()) {
        if (message.gameId !== 0) {
            writer.uint32(8).int32(message.gameId);
        }
        if (message.name !== undefined) {
            writer.uint32(18).string(message.name);
        }
        if (message.description !== undefined) {
            writer.uint32(26).string(message.description);
        }
        if (message.coverUrl !== undefined) {
            writer.uint32(34).string(message.coverUrl);
        }
        if (message.backgroundUrl !== undefined) {
            writer.uint32(42).string(message.backgroundUrl);
        }
        if (message.iconUrl !== undefined) {
            writer.uint32(50).string(message.iconUrl);
        }
        if (message.igdbId !== undefined) {
            writer.uint32(56).int64(message.igdbId);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(66).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(74).fork()).join();
        }
        for (const v of message.links) {
            writer.uint32(82).string(v);
        }
        for (const v of message.videoUrls) {
            writer.uint32(90).string(v);
        }
        for (const v of message.screenshotUrls) {
            writer.uint32(98).string(v);
        }
        for (const v of message.artworkUrls) {
            writer.uint32(106).string(v);
        }
        if (message.releaseDate !== undefined) {
            Timestamp.encode(message.releaseDate, writer.uint32(114).fork()).join();
        }
        if (message.lastPlayed !== undefined) {
            Timestamp.encode(message.lastPlayed, writer.uint32(122).fork()).join();
        }
        if (message.minutesPlayed !== undefined) {
            writer.uint32(128).int32(message.minutesPlayed);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGameMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.gameId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.coverUrl = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.backgroundUrl = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.iconUrl = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.igdbId = longToNumber(reader.int64());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.links.push(reader.string());
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.videoUrls.push(reader.string());
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.screenshotUrls.push(reader.string());
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.artworkUrls.push(reader.string());
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.releaseDate = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.lastPlayed = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 16: {
                    if (tag !== 128) {
                        break;
                    }
                    message.minutesPlayed = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            gameId: isSet(object.gameId) ? globalThis.Number(object.gameId) : 0,
            name: isSet(object.name) ? globalThis.String(object.name) : undefined,
            description: isSet(object.description) ? globalThis.String(object.description) : undefined,
            coverUrl: isSet(object.coverUrl) ? globalThis.String(object.coverUrl) : undefined,
            backgroundUrl: isSet(object.backgroundUrl) ? globalThis.String(object.backgroundUrl) : undefined,
            iconUrl: isSet(object.iconUrl) ? globalThis.String(object.iconUrl) : undefined,
            igdbId: isSet(object.igdbId) ? globalThis.Number(object.igdbId) : undefined,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
            links: globalThis.Array.isArray(object?.links) ? object.links.map((e) => globalThis.String(e)) : [],
            videoUrls: globalThis.Array.isArray(object?.videoUrls)
                ? object.videoUrls.map((e) => globalThis.String(e))
                : [],
            screenshotUrls: globalThis.Array.isArray(object?.screenshotUrls)
                ? object.screenshotUrls.map((e) => globalThis.String(e))
                : [],
            artworkUrls: globalThis.Array.isArray(object?.artworkUrls)
                ? object.artworkUrls.map((e) => globalThis.String(e))
                : [],
            releaseDate: isSet(object.releaseDate) ? fromJsonTimestamp(object.releaseDate) : undefined,
            lastPlayed: isSet(object.lastPlayed) ? fromJsonTimestamp(object.lastPlayed) : undefined,
            minutesPlayed: isSet(object.minutesPlayed) ? globalThis.Number(object.minutesPlayed) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.gameId !== 0) {
            obj.gameId = Math.round(message.gameId);
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if (message.description !== undefined) {
            obj.description = message.description;
        }
        if (message.coverUrl !== undefined) {
            obj.coverUrl = message.coverUrl;
        }
        if (message.backgroundUrl !== undefined) {
            obj.backgroundUrl = message.backgroundUrl;
        }
        if (message.iconUrl !== undefined) {
            obj.iconUrl = message.iconUrl;
        }
        if (message.igdbId !== undefined) {
            obj.igdbId = Math.round(message.igdbId);
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        if (message.links?.length) {
            obj.links = message.links;
        }
        if (message.videoUrls?.length) {
            obj.videoUrls = message.videoUrls;
        }
        if (message.screenshotUrls?.length) {
            obj.screenshotUrls = message.screenshotUrls;
        }
        if (message.artworkUrls?.length) {
            obj.artworkUrls = message.artworkUrls;
        }
        if (message.releaseDate !== undefined) {
            obj.releaseDate = fromTimestamp(message.releaseDate).toISOString();
        }
        if (message.lastPlayed !== undefined) {
            obj.lastPlayed = fromTimestamp(message.lastPlayed).toISOString();
        }
        if (message.minutesPlayed !== undefined) {
            obj.minutesPlayed = Math.round(message.minutesPlayed);
        }
        return obj;
    },
    create(base) {
        return GameMetadata.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGameMetadata();
        message.gameId = object.gameId ?? 0;
        message.name = object.name ?? undefined;
        message.description = object.description ?? undefined;
        message.coverUrl = object.coverUrl ?? undefined;
        message.backgroundUrl = object.backgroundUrl ?? undefined;
        message.iconUrl = object.iconUrl ?? undefined;
        message.igdbId = object.igdbId ?? undefined;
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        message.links = object.links?.map((e) => e) || [];
        message.videoUrls = object.videoUrls?.map((e) => e) || [];
        message.screenshotUrls = object.screenshotUrls?.map((e) => e) || [];
        message.artworkUrls = object.artworkUrls?.map((e) => e) || [];
        message.releaseDate = (object.releaseDate !== undefined && object.releaseDate !== null)
            ? Timestamp.fromPartial(object.releaseDate)
            : undefined;
        message.lastPlayed = (object.lastPlayed !== undefined && object.lastPlayed !== null)
            ? Timestamp.fromPartial(object.lastPlayed)
            : undefined;
        message.minutesPlayed = object.minutesPlayed ?? undefined;
        return message;
    },
};
function createBaseNewGameMetadata() {
    return {
        gameId: undefined,
        name: undefined,
        description: undefined,
        coverUrl: undefined,
        backgroundUrl: undefined,
        iconUrl: undefined,
        igdbId: undefined,
        createdAt: undefined,
        updatedAt: undefined,
        links: [],
        videoUrls: [],
        screenshotUrls: [],
        artworkUrls: [],
        releaseDate: undefined,
        lastPlayed: undefined,
        minutesPlayed: undefined,
    };
}
export const NewGameMetadata = {
    encode(message, writer = new BinaryWriter()) {
        if (message.gameId !== undefined) {
            writer.uint32(8).int32(message.gameId);
        }
        if (message.name !== undefined) {
            writer.uint32(18).string(message.name);
        }
        if (message.description !== undefined) {
            writer.uint32(26).string(message.description);
        }
        if (message.coverUrl !== undefined) {
            writer.uint32(34).string(message.coverUrl);
        }
        if (message.backgroundUrl !== undefined) {
            writer.uint32(42).string(message.backgroundUrl);
        }
        if (message.iconUrl !== undefined) {
            writer.uint32(50).string(message.iconUrl);
        }
        if (message.igdbId !== undefined) {
            writer.uint32(56).int64(message.igdbId);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(66).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(74).fork()).join();
        }
        for (const v of message.links) {
            writer.uint32(82).string(v);
        }
        for (const v of message.videoUrls) {
            writer.uint32(90).string(v);
        }
        for (const v of message.screenshotUrls) {
            writer.uint32(98).string(v);
        }
        for (const v of message.artworkUrls) {
            writer.uint32(106).string(v);
        }
        if (message.releaseDate !== undefined) {
            Timestamp.encode(message.releaseDate, writer.uint32(114).fork()).join();
        }
        if (message.lastPlayed !== undefined) {
            Timestamp.encode(message.lastPlayed, writer.uint32(122).fork()).join();
        }
        if (message.minutesPlayed !== undefined) {
            writer.uint32(128).int32(message.minutesPlayed);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNewGameMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.gameId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.coverUrl = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.backgroundUrl = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.iconUrl = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.igdbId = longToNumber(reader.int64());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.links.push(reader.string());
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.videoUrls.push(reader.string());
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.screenshotUrls.push(reader.string());
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.artworkUrls.push(reader.string());
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.releaseDate = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.lastPlayed = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 16: {
                    if (tag !== 128) {
                        break;
                    }
                    message.minutesPlayed = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            gameId: isSet(object.gameId) ? globalThis.Number(object.gameId) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : undefined,
            description: isSet(object.description) ? globalThis.String(object.description) : undefined,
            coverUrl: isSet(object.coverUrl) ? globalThis.String(object.coverUrl) : undefined,
            backgroundUrl: isSet(object.backgroundUrl) ? globalThis.String(object.backgroundUrl) : undefined,
            iconUrl: isSet(object.iconUrl) ? globalThis.String(object.iconUrl) : undefined,
            igdbId: isSet(object.igdbId) ? globalThis.Number(object.igdbId) : undefined,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
            links: globalThis.Array.isArray(object?.links) ? object.links.map((e) => globalThis.String(e)) : [],
            videoUrls: globalThis.Array.isArray(object?.videoUrls)
                ? object.videoUrls.map((e) => globalThis.String(e))
                : [],
            screenshotUrls: globalThis.Array.isArray(object?.screenshotUrls)
                ? object.screenshotUrls.map((e) => globalThis.String(e))
                : [],
            artworkUrls: globalThis.Array.isArray(object?.artworkUrls)
                ? object.artworkUrls.map((e) => globalThis.String(e))
                : [],
            releaseDate: isSet(object.releaseDate) ? fromJsonTimestamp(object.releaseDate) : undefined,
            lastPlayed: isSet(object.lastPlayed) ? fromJsonTimestamp(object.lastPlayed) : undefined,
            minutesPlayed: isSet(object.minutesPlayed) ? globalThis.Number(object.minutesPlayed) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.gameId !== undefined) {
            obj.gameId = Math.round(message.gameId);
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if (message.description !== undefined) {
            obj.description = message.description;
        }
        if (message.coverUrl !== undefined) {
            obj.coverUrl = message.coverUrl;
        }
        if (message.backgroundUrl !== undefined) {
            obj.backgroundUrl = message.backgroundUrl;
        }
        if (message.iconUrl !== undefined) {
            obj.iconUrl = message.iconUrl;
        }
        if (message.igdbId !== undefined) {
            obj.igdbId = Math.round(message.igdbId);
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        if (message.links?.length) {
            obj.links = message.links;
        }
        if (message.videoUrls?.length) {
            obj.videoUrls = message.videoUrls;
        }
        if (message.screenshotUrls?.length) {
            obj.screenshotUrls = message.screenshotUrls;
        }
        if (message.artworkUrls?.length) {
            obj.artworkUrls = message.artworkUrls;
        }
        if (message.releaseDate !== undefined) {
            obj.releaseDate = fromTimestamp(message.releaseDate).toISOString();
        }
        if (message.lastPlayed !== undefined) {
            obj.lastPlayed = fromTimestamp(message.lastPlayed).toISOString();
        }
        if (message.minutesPlayed !== undefined) {
            obj.minutesPlayed = Math.round(message.minutesPlayed);
        }
        return obj;
    },
    create(base) {
        return NewGameMetadata.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseNewGameMetadata();
        message.gameId = object.gameId ?? undefined;
        message.name = object.name ?? undefined;
        message.description = object.description ?? undefined;
        message.coverUrl = object.coverUrl ?? undefined;
        message.backgroundUrl = object.backgroundUrl ?? undefined;
        message.iconUrl = object.iconUrl ?? undefined;
        message.igdbId = object.igdbId ?? undefined;
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        message.links = object.links?.map((e) => e) || [];
        message.videoUrls = object.videoUrls?.map((e) => e) || [];
        message.screenshotUrls = object.screenshotUrls?.map((e) => e) || [];
        message.artworkUrls = object.artworkUrls?.map((e) => e) || [];
        message.releaseDate = (object.releaseDate !== undefined && object.releaseDate !== null)
            ? Timestamp.fromPartial(object.releaseDate)
            : undefined;
        message.lastPlayed = (object.lastPlayed !== undefined && object.lastPlayed !== null)
            ? Timestamp.fromPartial(object.lastPlayed)
            : undefined;
        message.minutesPlayed = object.minutesPlayed ?? undefined;
        return message;
    },
};
function createBaseUpdatedGameMetadata() {
    return {
        gameId: 0,
        name: undefined,
        description: undefined,
        coverUrl: undefined,
        backgroundUrl: undefined,
        iconUrl: undefined,
        igdbId: undefined,
        createdAt: undefined,
        updatedAt: undefined,
        links: [],
        videoUrls: [],
        screenshotUrls: [],
        artworkUrls: [],
        releaseDate: undefined,
        lastPlayed: undefined,
        minutesPlayed: undefined,
    };
}
export const UpdatedGameMetadata = {
    encode(message, writer = new BinaryWriter()) {
        if (message.gameId !== 0) {
            writer.uint32(8).int32(message.gameId);
        }
        if (message.name !== undefined) {
            writer.uint32(18).string(message.name);
        }
        if (message.description !== undefined) {
            writer.uint32(26).string(message.description);
        }
        if (message.coverUrl !== undefined) {
            writer.uint32(34).string(message.coverUrl);
        }
        if (message.backgroundUrl !== undefined) {
            writer.uint32(42).string(message.backgroundUrl);
        }
        if (message.iconUrl !== undefined) {
            writer.uint32(50).string(message.iconUrl);
        }
        if (message.igdbId !== undefined) {
            writer.uint32(56).int64(message.igdbId);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(66).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(74).fork()).join();
        }
        for (const v of message.links) {
            writer.uint32(82).string(v);
        }
        for (const v of message.videoUrls) {
            writer.uint32(90).string(v);
        }
        for (const v of message.screenshotUrls) {
            writer.uint32(98).string(v);
        }
        for (const v of message.artworkUrls) {
            writer.uint32(106).string(v);
        }
        if (message.releaseDate !== undefined) {
            Timestamp.encode(message.releaseDate, writer.uint32(114).fork()).join();
        }
        if (message.lastPlayed !== undefined) {
            Timestamp.encode(message.lastPlayed, writer.uint32(122).fork()).join();
        }
        if (message.minutesPlayed !== undefined) {
            writer.uint32(128).int32(message.minutesPlayed);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdatedGameMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.gameId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.coverUrl = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.backgroundUrl = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.iconUrl = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.igdbId = longToNumber(reader.int64());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.links.push(reader.string());
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.videoUrls.push(reader.string());
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.screenshotUrls.push(reader.string());
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.artworkUrls.push(reader.string());
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.releaseDate = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.lastPlayed = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 16: {
                    if (tag !== 128) {
                        break;
                    }
                    message.minutesPlayed = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            gameId: isSet(object.gameId) ? globalThis.Number(object.gameId) : 0,
            name: isSet(object.name) ? globalThis.String(object.name) : undefined,
            description: isSet(object.description) ? globalThis.String(object.description) : undefined,
            coverUrl: isSet(object.coverUrl) ? globalThis.String(object.coverUrl) : undefined,
            backgroundUrl: isSet(object.backgroundUrl) ? globalThis.String(object.backgroundUrl) : undefined,
            iconUrl: isSet(object.iconUrl) ? globalThis.String(object.iconUrl) : undefined,
            igdbId: isSet(object.igdbId) ? globalThis.Number(object.igdbId) : undefined,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
            links: globalThis.Array.isArray(object?.links) ? object.links.map((e) => globalThis.String(e)) : [],
            videoUrls: globalThis.Array.isArray(object?.videoUrls)
                ? object.videoUrls.map((e) => globalThis.String(e))
                : [],
            screenshotUrls: globalThis.Array.isArray(object?.screenshotUrls)
                ? object.screenshotUrls.map((e) => globalThis.String(e))
                : [],
            artworkUrls: globalThis.Array.isArray(object?.artworkUrls)
                ? object.artworkUrls.map((e) => globalThis.String(e))
                : [],
            releaseDate: isSet(object.releaseDate) ? fromJsonTimestamp(object.releaseDate) : undefined,
            lastPlayed: isSet(object.lastPlayed) ? fromJsonTimestamp(object.lastPlayed) : undefined,
            minutesPlayed: isSet(object.minutesPlayed) ? globalThis.Number(object.minutesPlayed) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.gameId !== 0) {
            obj.gameId = Math.round(message.gameId);
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if (message.description !== undefined) {
            obj.description = message.description;
        }
        if (message.coverUrl !== undefined) {
            obj.coverUrl = message.coverUrl;
        }
        if (message.backgroundUrl !== undefined) {
            obj.backgroundUrl = message.backgroundUrl;
        }
        if (message.iconUrl !== undefined) {
            obj.iconUrl = message.iconUrl;
        }
        if (message.igdbId !== undefined) {
            obj.igdbId = Math.round(message.igdbId);
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        if (message.links?.length) {
            obj.links = message.links;
        }
        if (message.videoUrls?.length) {
            obj.videoUrls = message.videoUrls;
        }
        if (message.screenshotUrls?.length) {
            obj.screenshotUrls = message.screenshotUrls;
        }
        if (message.artworkUrls?.length) {
            obj.artworkUrls = message.artworkUrls;
        }
        if (message.releaseDate !== undefined) {
            obj.releaseDate = fromTimestamp(message.releaseDate).toISOString();
        }
        if (message.lastPlayed !== undefined) {
            obj.lastPlayed = fromTimestamp(message.lastPlayed).toISOString();
        }
        if (message.minutesPlayed !== undefined) {
            obj.minutesPlayed = Math.round(message.minutesPlayed);
        }
        return obj;
    },
    create(base) {
        return UpdatedGameMetadata.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdatedGameMetadata();
        message.gameId = object.gameId ?? 0;
        message.name = object.name ?? undefined;
        message.description = object.description ?? undefined;
        message.coverUrl = object.coverUrl ?? undefined;
        message.backgroundUrl = object.backgroundUrl ?? undefined;
        message.iconUrl = object.iconUrl ?? undefined;
        message.igdbId = object.igdbId ?? undefined;
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        message.links = object.links?.map((e) => e) || [];
        message.videoUrls = object.videoUrls?.map((e) => e) || [];
        message.screenshotUrls = object.screenshotUrls?.map((e) => e) || [];
        message.artworkUrls = object.artworkUrls?.map((e) => e) || [];
        message.releaseDate = (object.releaseDate !== undefined && object.releaseDate !== null)
            ? Timestamp.fromPartial(object.releaseDate)
            : undefined;
        message.lastPlayed = (object.lastPlayed !== undefined && object.lastPlayed !== null)
            ? Timestamp.fromPartial(object.lastPlayed)
            : undefined;
        message.minutesPlayed = object.minutesPlayed ?? undefined;
        return message;
    },
};
function createBasePlatformMetadata() {
    return {
        platformId: 0,
        name: undefined,
        description: undefined,
        backgroundUrl: undefined,
        logoUrl: undefined,
        igdbId: undefined,
        createdAt: undefined,
        updatedAt: undefined,
    };
}
export const PlatformMetadata = {
    encode(message, writer = new BinaryWriter()) {
        if (message.platformId !== 0) {
            writer.uint32(8).int32(message.platformId);
        }
        if (message.name !== undefined) {
            writer.uint32(18).string(message.name);
        }
        if (message.description !== undefined) {
            writer.uint32(26).string(message.description);
        }
        if (message.backgroundUrl !== undefined) {
            writer.uint32(34).string(message.backgroundUrl);
        }
        if (message.logoUrl !== undefined) {
            writer.uint32(42).string(message.logoUrl);
        }
        if (message.igdbId !== undefined) {
            writer.uint32(48).int64(message.igdbId);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(58).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(66).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlatformMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.platformId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.backgroundUrl = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.logoUrl = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.igdbId = longToNumber(reader.int64());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            platformId: isSet(object.platformId) ? globalThis.Number(object.platformId) : 0,
            name: isSet(object.name) ? globalThis.String(object.name) : undefined,
            description: isSet(object.description) ? globalThis.String(object.description) : undefined,
            backgroundUrl: isSet(object.backgroundUrl) ? globalThis.String(object.backgroundUrl) : undefined,
            logoUrl: isSet(object.logoUrl) ? globalThis.String(object.logoUrl) : undefined,
            igdbId: isSet(object.igdbId) ? globalThis.Number(object.igdbId) : undefined,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.platformId !== 0) {
            obj.platformId = Math.round(message.platformId);
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if (message.description !== undefined) {
            obj.description = message.description;
        }
        if (message.backgroundUrl !== undefined) {
            obj.backgroundUrl = message.backgroundUrl;
        }
        if (message.logoUrl !== undefined) {
            obj.logoUrl = message.logoUrl;
        }
        if (message.igdbId !== undefined) {
            obj.igdbId = Math.round(message.igdbId);
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        return obj;
    },
    create(base) {
        return PlatformMetadata.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePlatformMetadata();
        message.platformId = object.platformId ?? 0;
        message.name = object.name ?? undefined;
        message.description = object.description ?? undefined;
        message.backgroundUrl = object.backgroundUrl ?? undefined;
        message.logoUrl = object.logoUrl ?? undefined;
        message.igdbId = object.igdbId ?? undefined;
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        return message;
    },
};
function createBaseNewPlatformMetadata() {
    return {
        platformId: undefined,
        name: undefined,
        description: undefined,
        backgroundUrl: undefined,
        logoUrl: undefined,
        igdbId: undefined,
        createdAt: undefined,
        updatedAt: undefined,
    };
}
export const NewPlatformMetadata = {
    encode(message, writer = new BinaryWriter()) {
        if (message.platformId !== undefined) {
            writer.uint32(8).int32(message.platformId);
        }
        if (message.name !== undefined) {
            writer.uint32(18).string(message.name);
        }
        if (message.description !== undefined) {
            writer.uint32(26).string(message.description);
        }
        if (message.backgroundUrl !== undefined) {
            writer.uint32(34).string(message.backgroundUrl);
        }
        if (message.logoUrl !== undefined) {
            writer.uint32(42).string(message.logoUrl);
        }
        if (message.igdbId !== undefined) {
            writer.uint32(48).int64(message.igdbId);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(58).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(66).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNewPlatformMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.platformId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.backgroundUrl = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.logoUrl = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.igdbId = longToNumber(reader.int64());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            platformId: isSet(object.platformId) ? globalThis.Number(object.platformId) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : undefined,
            description: isSet(object.description) ? globalThis.String(object.description) : undefined,
            backgroundUrl: isSet(object.backgroundUrl) ? globalThis.String(object.backgroundUrl) : undefined,
            logoUrl: isSet(object.logoUrl) ? globalThis.String(object.logoUrl) : undefined,
            igdbId: isSet(object.igdbId) ? globalThis.Number(object.igdbId) : undefined,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.platformId !== undefined) {
            obj.platformId = Math.round(message.platformId);
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if (message.description !== undefined) {
            obj.description = message.description;
        }
        if (message.backgroundUrl !== undefined) {
            obj.backgroundUrl = message.backgroundUrl;
        }
        if (message.logoUrl !== undefined) {
            obj.logoUrl = message.logoUrl;
        }
        if (message.igdbId !== undefined) {
            obj.igdbId = Math.round(message.igdbId);
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        return obj;
    },
    create(base) {
        return NewPlatformMetadata.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseNewPlatformMetadata();
        message.platformId = object.platformId ?? undefined;
        message.name = object.name ?? undefined;
        message.description = object.description ?? undefined;
        message.backgroundUrl = object.backgroundUrl ?? undefined;
        message.logoUrl = object.logoUrl ?? undefined;
        message.igdbId = object.igdbId ?? undefined;
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        return message;
    },
};
function createBaseUpdatedPlatformMetadata() {
    return {
        platformId: 0,
        name: undefined,
        description: undefined,
        backgroundUrl: undefined,
        logoUrl: undefined,
        igdbId: undefined,
        createdAt: undefined,
        updatedAt: undefined,
    };
}
export const UpdatedPlatformMetadata = {
    encode(message, writer = new BinaryWriter()) {
        if (message.platformId !== 0) {
            writer.uint32(8).int32(message.platformId);
        }
        if (message.name !== undefined) {
            writer.uint32(18).string(message.name);
        }
        if (message.description !== undefined) {
            writer.uint32(26).string(message.description);
        }
        if (message.backgroundUrl !== undefined) {
            writer.uint32(34).string(message.backgroundUrl);
        }
        if (message.logoUrl !== undefined) {
            writer.uint32(42).string(message.logoUrl);
        }
        if (message.igdbId !== undefined) {
            writer.uint32(48).int64(message.igdbId);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(58).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(66).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdatedPlatformMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.platformId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.backgroundUrl = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.logoUrl = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.igdbId = longToNumber(reader.int64());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            platformId: isSet(object.platformId) ? globalThis.Number(object.platformId) : 0,
            name: isSet(object.name) ? globalThis.String(object.name) : undefined,
            description: isSet(object.description) ? globalThis.String(object.description) : undefined,
            backgroundUrl: isSet(object.backgroundUrl) ? globalThis.String(object.backgroundUrl) : undefined,
            logoUrl: isSet(object.logoUrl) ? globalThis.String(object.logoUrl) : undefined,
            igdbId: isSet(object.igdbId) ? globalThis.Number(object.igdbId) : undefined,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.platformId !== 0) {
            obj.platformId = Math.round(message.platformId);
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if (message.description !== undefined) {
            obj.description = message.description;
        }
        if (message.backgroundUrl !== undefined) {
            obj.backgroundUrl = message.backgroundUrl;
        }
        if (message.logoUrl !== undefined) {
            obj.logoUrl = message.logoUrl;
        }
        if (message.igdbId !== undefined) {
            obj.igdbId = Math.round(message.igdbId);
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        return obj;
    },
    create(base) {
        return UpdatedPlatformMetadata.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdatedPlatformMetadata();
        message.platformId = object.platformId ?? 0;
        message.name = object.name ?? undefined;
        message.description = object.description ?? undefined;
        message.backgroundUrl = object.backgroundUrl ?? undefined;
        message.logoUrl = object.logoUrl ?? undefined;
        message.igdbId = object.igdbId ?? undefined;
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        return message;
    },
};
function createBaseGameGenre() {
    return { id: 0, slug: "", name: "", createdAt: undefined, updatedAt: undefined };
}
export const GameGenre = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.slug !== "") {
            writer.uint32(18).string(message.slug);
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(34).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGameGenre();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.slug = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.slug !== "") {
            obj.slug = message.slug;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        return obj;
    },
    create(base) {
        return GameGenre.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGameGenre();
        message.id = object.id ?? 0;
        message.slug = object.slug ?? "";
        message.name = object.name ?? "";
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        return message;
    },
};
function createBaseNewGameGenre() {
    return { id: undefined, slug: "", name: "", createdAt: undefined, updatedAt: undefined };
}
export const NewGameGenre = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== undefined) {
            writer.uint32(8).int32(message.id);
        }
        if (message.slug !== "") {
            writer.uint32(18).string(message.slug);
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(34).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNewGameGenre();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.slug = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : undefined,
            slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = Math.round(message.id);
        }
        if (message.slug !== "") {
            obj.slug = message.slug;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        return obj;
    },
    create(base) {
        return NewGameGenre.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseNewGameGenre();
        message.id = object.id ?? undefined;
        message.slug = object.slug ?? "";
        message.name = object.name ?? "";
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        return message;
    },
};
function createBaseUpdatedGameGenre() {
    return { id: 0, slug: undefined, name: undefined, createdAt: undefined, updatedAt: undefined };
}
export const UpdatedGameGenre = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.slug !== undefined) {
            writer.uint32(18).string(message.slug);
        }
        if (message.name !== undefined) {
            writer.uint32(26).string(message.name);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(34).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdatedGameGenre();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.slug = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            slug: isSet(object.slug) ? globalThis.String(object.slug) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : undefined,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.slug !== undefined) {
            obj.slug = message.slug;
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        return obj;
    },
    create(base) {
        return UpdatedGameGenre.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdatedGameGenre();
        message.id = object.id ?? 0;
        message.slug = object.slug ?? undefined;
        message.name = object.name ?? undefined;
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        return message;
    },
};
function createBaseGameGenreMap() {
    return { gameId: 0, genreId: 0, createdAt: undefined, updatedAt: undefined };
}
export const GameGenreMap = {
    encode(message, writer = new BinaryWriter()) {
        if (message.gameId !== 0) {
            writer.uint32(8).int32(message.gameId);
        }
        if (message.genreId !== 0) {
            writer.uint32(16).int32(message.genreId);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(26).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGameGenreMap();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.gameId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.genreId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            gameId: isSet(object.gameId) ? globalThis.Number(object.gameId) : 0,
            genreId: isSet(object.genreId) ? globalThis.Number(object.genreId) : 0,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.gameId !== 0) {
            obj.gameId = Math.round(message.gameId);
        }
        if (message.genreId !== 0) {
            obj.genreId = Math.round(message.genreId);
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        return obj;
    },
    create(base) {
        return GameGenreMap.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGameGenreMap();
        message.gameId = object.gameId ?? 0;
        message.genreId = object.genreId ?? 0;
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        return message;
    },
};
function createBaseNewGameGenreMap() {
    return { gameId: 0, genreId: 0, createdAt: undefined, updatedAt: undefined };
}
export const NewGameGenreMap = {
    encode(message, writer = new BinaryWriter()) {
        if (message.gameId !== 0) {
            writer.uint32(8).int32(message.gameId);
        }
        if (message.genreId !== 0) {
            writer.uint32(16).int32(message.genreId);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(26).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNewGameGenreMap();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.gameId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.genreId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            gameId: isSet(object.gameId) ? globalThis.Number(object.gameId) : 0,
            genreId: isSet(object.genreId) ? globalThis.Number(object.genreId) : 0,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.gameId !== 0) {
            obj.gameId = Math.round(message.gameId);
        }
        if (message.genreId !== 0) {
            obj.genreId = Math.round(message.genreId);
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        return obj;
    },
    create(base) {
        return NewGameGenreMap.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseNewGameGenreMap();
        message.gameId = object.gameId ?? 0;
        message.genreId = object.genreId ?? 0;
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        return message;
    },
};
function createBaseUpdatedGameGenreMap() {
    return { gameId: undefined, genreId: undefined, createdAt: undefined, updatedAt: undefined };
}
export const UpdatedGameGenreMap = {
    encode(message, writer = new BinaryWriter()) {
        if (message.gameId !== undefined) {
            writer.uint32(8).int32(message.gameId);
        }
        if (message.genreId !== undefined) {
            writer.uint32(16).int32(message.genreId);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(26).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdatedGameGenreMap();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.gameId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.genreId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            gameId: isSet(object.gameId) ? globalThis.Number(object.gameId) : undefined,
            genreId: isSet(object.genreId) ? globalThis.Number(object.genreId) : undefined,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.gameId !== undefined) {
            obj.gameId = Math.round(message.gameId);
        }
        if (message.genreId !== undefined) {
            obj.genreId = Math.round(message.genreId);
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        return obj;
    },
    create(base) {
        return UpdatedGameGenreMap.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdatedGameGenreMap();
        message.gameId = object.gameId ?? undefined;
        message.genreId = object.genreId ?? undefined;
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        return message;
    },
};
function createBaseSimilarGameMap() {
    return { gameId: 0, similarGameId: 0, createdAt: undefined, updatedAt: undefined };
}
export const SimilarGameMap = {
    encode(message, writer = new BinaryWriter()) {
        if (message.gameId !== 0) {
            writer.uint32(8).int32(message.gameId);
        }
        if (message.similarGameId !== 0) {
            writer.uint32(16).int32(message.similarGameId);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(26).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSimilarGameMap();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.gameId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.similarGameId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            gameId: isSet(object.gameId) ? globalThis.Number(object.gameId) : 0,
            similarGameId: isSet(object.similarGameId) ? globalThis.Number(object.similarGameId) : 0,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.gameId !== 0) {
            obj.gameId = Math.round(message.gameId);
        }
        if (message.similarGameId !== 0) {
            obj.similarGameId = Math.round(message.similarGameId);
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        return obj;
    },
    create(base) {
        return SimilarGameMap.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSimilarGameMap();
        message.gameId = object.gameId ?? 0;
        message.similarGameId = object.similarGameId ?? 0;
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        return message;
    },
};
function createBaseNewSimilarGameMap() {
    return { gameId: 0, similarGameId: 0, createdAt: undefined, updatedAt: undefined };
}
export const NewSimilarGameMap = {
    encode(message, writer = new BinaryWriter()) {
        if (message.gameId !== 0) {
            writer.uint32(8).int32(message.gameId);
        }
        if (message.similarGameId !== 0) {
            writer.uint32(16).int32(message.similarGameId);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(26).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNewSimilarGameMap();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.gameId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.similarGameId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            gameId: isSet(object.gameId) ? globalThis.Number(object.gameId) : 0,
            similarGameId: isSet(object.similarGameId) ? globalThis.Number(object.similarGameId) : 0,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.gameId !== 0) {
            obj.gameId = Math.round(message.gameId);
        }
        if (message.similarGameId !== 0) {
            obj.similarGameId = Math.round(message.similarGameId);
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        return obj;
    },
    create(base) {
        return NewSimilarGameMap.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseNewSimilarGameMap();
        message.gameId = object.gameId ?? 0;
        message.similarGameId = object.similarGameId ?? 0;
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        return message;
    },
};
function createBaseUpdatedSimilarGameMap() {
    return { gameId: 0, similarGameId: 0, createdAt: undefined, updatedAt: undefined };
}
export const UpdatedSimilarGameMap = {
    encode(message, writer = new BinaryWriter()) {
        if (message.gameId !== 0) {
            writer.uint32(8).int32(message.gameId);
        }
        if (message.similarGameId !== 0) {
            writer.uint32(16).int32(message.similarGameId);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(26).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdatedSimilarGameMap();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.gameId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.similarGameId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            gameId: isSet(object.gameId) ? globalThis.Number(object.gameId) : 0,
            similarGameId: isSet(object.similarGameId) ? globalThis.Number(object.similarGameId) : 0,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.gameId !== 0) {
            obj.gameId = Math.round(message.gameId);
        }
        if (message.similarGameId !== 0) {
            obj.similarGameId = Math.round(message.similarGameId);
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        return obj;
    },
    create(base) {
        return UpdatedSimilarGameMap.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdatedSimilarGameMap();
        message.gameId = object.gameId ?? 0;
        message.similarGameId = object.similarGameId ?? 0;
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        return message;
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1_000);
    const nanos = (date.getTime() % 1_000) * 1_000_000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1_000;
    millis += (t.nanos || 0) / 1_000_000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return toTimestamp(o);
    }
    else if (typeof o === "string") {
        return toTimestamp(new globalThis.Date(o));
    }
    else {
        return Timestamp.fromJSON(o);
    }
}
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
