// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: retrom/models/emulators.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../google/protobuf/timestamp";
export const protobufPackage = "retrom";
export const SaveStrategy = { SINGLE_FILE: 0, FILE_SYSTEM_DIRECTORY: 1, DISK_IMAGE: 2, UNRECOGNIZED: -1 };
export function saveStrategyFromJSON(object) {
    switch (object) {
        case 0:
        case "SINGLE_FILE":
            return SaveStrategy.SINGLE_FILE;
        case 1:
        case "FILE_SYSTEM_DIRECTORY":
            return SaveStrategy.FILE_SYSTEM_DIRECTORY;
        case 2:
        case "DISK_IMAGE":
            return SaveStrategy.DISK_IMAGE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return SaveStrategy.UNRECOGNIZED;
    }
}
export function saveStrategyToJSON(object) {
    switch (object) {
        case SaveStrategy.SINGLE_FILE:
            return "SINGLE_FILE";
        case SaveStrategy.FILE_SYSTEM_DIRECTORY:
            return "FILE_SYSTEM_DIRECTORY";
        case SaveStrategy.DISK_IMAGE:
            return "DISK_IMAGE";
        case SaveStrategy.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseEmulator() {
    return { id: 0, supportedPlatforms: [], name: "", saveStrategy: 0, createdAt: undefined, updatedAt: undefined };
}
export const Emulator = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        writer.uint32(18).fork();
        for (const v of message.supportedPlatforms) {
            writer.int32(v);
        }
        writer.join();
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.saveStrategy !== 0) {
            writer.uint32(32).int32(message.saveStrategy);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(42).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEmulator();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.supportedPlatforms.push(reader.int32());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.supportedPlatforms.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.saveStrategy = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            supportedPlatforms: globalThis.Array.isArray(object?.supportedPlatforms)
                ? object.supportedPlatforms.map((e) => globalThis.Number(e))
                : [],
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            saveStrategy: isSet(object.saveStrategy) ? saveStrategyFromJSON(object.saveStrategy) : 0,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.supportedPlatforms?.length) {
            obj.supportedPlatforms = message.supportedPlatforms.map((e) => Math.round(e));
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.saveStrategy !== 0) {
            obj.saveStrategy = saveStrategyToJSON(message.saveStrategy);
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        return obj;
    },
    create(base) {
        return Emulator.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEmulator();
        message.id = object.id ?? 0;
        message.supportedPlatforms = object.supportedPlatforms?.map((e) => e) || [];
        message.name = object.name ?? "";
        message.saveStrategy = object.saveStrategy ?? 0;
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        return message;
    },
};
function createBaseNewEmulator() {
    return { supportedPlatforms: [], name: "", saveStrategy: 0, createdAt: undefined, updatedAt: undefined };
}
export const NewEmulator = {
    encode(message, writer = new BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.supportedPlatforms) {
            writer.int32(v);
        }
        writer.join();
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.saveStrategy !== 0) {
            writer.uint32(24).int32(message.saveStrategy);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(34).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNewEmulator();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.supportedPlatforms.push(reader.int32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.supportedPlatforms.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.saveStrategy = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            supportedPlatforms: globalThis.Array.isArray(object?.supportedPlatforms)
                ? object.supportedPlatforms.map((e) => globalThis.Number(e))
                : [],
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            saveStrategy: isSet(object.saveStrategy) ? saveStrategyFromJSON(object.saveStrategy) : 0,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.supportedPlatforms?.length) {
            obj.supportedPlatforms = message.supportedPlatforms.map((e) => Math.round(e));
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.saveStrategy !== 0) {
            obj.saveStrategy = saveStrategyToJSON(message.saveStrategy);
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        return obj;
    },
    create(base) {
        return NewEmulator.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseNewEmulator();
        message.supportedPlatforms = object.supportedPlatforms?.map((e) => e) || [];
        message.name = object.name ?? "";
        message.saveStrategy = object.saveStrategy ?? 0;
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        return message;
    },
};
function createBaseUpdatedEmulator() {
    return {
        id: 0,
        supportedPlatforms: [],
        name: undefined,
        saveStrategy: undefined,
        createdAt: undefined,
        updatedAt: undefined,
    };
}
export const UpdatedEmulator = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        writer.uint32(18).fork();
        for (const v of message.supportedPlatforms) {
            writer.int32(v);
        }
        writer.join();
        if (message.name !== undefined) {
            writer.uint32(26).string(message.name);
        }
        if (message.saveStrategy !== undefined) {
            writer.uint32(32).int32(message.saveStrategy);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(42).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdatedEmulator();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.supportedPlatforms.push(reader.int32());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.supportedPlatforms.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.saveStrategy = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            supportedPlatforms: globalThis.Array.isArray(object?.supportedPlatforms)
                ? object.supportedPlatforms.map((e) => globalThis.Number(e))
                : [],
            name: isSet(object.name) ? globalThis.String(object.name) : undefined,
            saveStrategy: isSet(object.saveStrategy) ? saveStrategyFromJSON(object.saveStrategy) : undefined,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.supportedPlatforms?.length) {
            obj.supportedPlatforms = message.supportedPlatforms.map((e) => Math.round(e));
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if (message.saveStrategy !== undefined) {
            obj.saveStrategy = saveStrategyToJSON(message.saveStrategy);
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        return obj;
    },
    create(base) {
        return UpdatedEmulator.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdatedEmulator();
        message.id = object.id ?? 0;
        message.supportedPlatforms = object.supportedPlatforms?.map((e) => e) || [];
        message.name = object.name ?? undefined;
        message.saveStrategy = object.saveStrategy ?? undefined;
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        return message;
    },
};
function createBaseEmulatorProfile() {
    return {
        id: 0,
        emulatorId: 0,
        name: "",
        supportedExtensions: [],
        customArgs: [],
        createdAt: undefined,
        updatedAt: undefined,
        builtIn: false,
    };
}
export const EmulatorProfile = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.emulatorId !== 0) {
            writer.uint32(16).int32(message.emulatorId);
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        for (const v of message.supportedExtensions) {
            writer.uint32(34).string(v);
        }
        for (const v of message.customArgs) {
            writer.uint32(42).string(v);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(50).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(58).fork()).join();
        }
        if (message.builtIn !== false) {
            writer.uint32(64).bool(message.builtIn);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEmulatorProfile();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.emulatorId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.supportedExtensions.push(reader.string());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.customArgs.push(reader.string());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.builtIn = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            emulatorId: isSet(object.emulatorId) ? globalThis.Number(object.emulatorId) : 0,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            supportedExtensions: globalThis.Array.isArray(object?.supportedExtensions)
                ? object.supportedExtensions.map((e) => globalThis.String(e))
                : [],
            customArgs: globalThis.Array.isArray(object?.customArgs)
                ? object.customArgs.map((e) => globalThis.String(e))
                : [],
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
            builtIn: isSet(object.builtIn) ? globalThis.Boolean(object.builtIn) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.emulatorId !== 0) {
            obj.emulatorId = Math.round(message.emulatorId);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.supportedExtensions?.length) {
            obj.supportedExtensions = message.supportedExtensions;
        }
        if (message.customArgs?.length) {
            obj.customArgs = message.customArgs;
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        if (message.builtIn !== false) {
            obj.builtIn = message.builtIn;
        }
        return obj;
    },
    create(base) {
        return EmulatorProfile.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEmulatorProfile();
        message.id = object.id ?? 0;
        message.emulatorId = object.emulatorId ?? 0;
        message.name = object.name ?? "";
        message.supportedExtensions = object.supportedExtensions?.map((e) => e) || [];
        message.customArgs = object.customArgs?.map((e) => e) || [];
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        message.builtIn = object.builtIn ?? false;
        return message;
    },
};
function createBaseNewEmulatorProfile() {
    return {
        emulatorId: 0,
        name: "",
        supportedExtensions: [],
        customArgs: [],
        createdAt: undefined,
        updatedAt: undefined,
        builtIn: undefined,
    };
}
export const NewEmulatorProfile = {
    encode(message, writer = new BinaryWriter()) {
        if (message.emulatorId !== 0) {
            writer.uint32(8).int32(message.emulatorId);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        for (const v of message.supportedExtensions) {
            writer.uint32(26).string(v);
        }
        for (const v of message.customArgs) {
            writer.uint32(34).string(v);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(42).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(50).fork()).join();
        }
        if (message.builtIn !== undefined) {
            writer.uint32(56).bool(message.builtIn);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNewEmulatorProfile();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.emulatorId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.supportedExtensions.push(reader.string());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.customArgs.push(reader.string());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.builtIn = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            emulatorId: isSet(object.emulatorId) ? globalThis.Number(object.emulatorId) : 0,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            supportedExtensions: globalThis.Array.isArray(object?.supportedExtensions)
                ? object.supportedExtensions.map((e) => globalThis.String(e))
                : [],
            customArgs: globalThis.Array.isArray(object?.customArgs)
                ? object.customArgs.map((e) => globalThis.String(e))
                : [],
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
            builtIn: isSet(object.builtIn) ? globalThis.Boolean(object.builtIn) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.emulatorId !== 0) {
            obj.emulatorId = Math.round(message.emulatorId);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.supportedExtensions?.length) {
            obj.supportedExtensions = message.supportedExtensions;
        }
        if (message.customArgs?.length) {
            obj.customArgs = message.customArgs;
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        if (message.builtIn !== undefined) {
            obj.builtIn = message.builtIn;
        }
        return obj;
    },
    create(base) {
        return NewEmulatorProfile.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseNewEmulatorProfile();
        message.emulatorId = object.emulatorId ?? 0;
        message.name = object.name ?? "";
        message.supportedExtensions = object.supportedExtensions?.map((e) => e) || [];
        message.customArgs = object.customArgs?.map((e) => e) || [];
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        message.builtIn = object.builtIn ?? undefined;
        return message;
    },
};
function createBaseUpdatedEmulatorProfile() {
    return {
        id: 0,
        emulatorId: undefined,
        name: undefined,
        supportedExtensions: [],
        customArgs: [],
        createdAt: undefined,
        updatedAt: undefined,
        builtIn: undefined,
    };
}
export const UpdatedEmulatorProfile = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.emulatorId !== undefined) {
            writer.uint32(16).int32(message.emulatorId);
        }
        if (message.name !== undefined) {
            writer.uint32(26).string(message.name);
        }
        for (const v of message.supportedExtensions) {
            writer.uint32(34).string(v);
        }
        for (const v of message.customArgs) {
            writer.uint32(42).string(v);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(50).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(58).fork()).join();
        }
        if (message.builtIn !== undefined) {
            writer.uint32(64).bool(message.builtIn);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdatedEmulatorProfile();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.emulatorId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.supportedExtensions.push(reader.string());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.customArgs.push(reader.string());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.builtIn = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            emulatorId: isSet(object.emulatorId) ? globalThis.Number(object.emulatorId) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : undefined,
            supportedExtensions: globalThis.Array.isArray(object?.supportedExtensions)
                ? object.supportedExtensions.map((e) => globalThis.String(e))
                : [],
            customArgs: globalThis.Array.isArray(object?.customArgs)
                ? object.customArgs.map((e) => globalThis.String(e))
                : [],
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
            builtIn: isSet(object.builtIn) ? globalThis.Boolean(object.builtIn) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.emulatorId !== undefined) {
            obj.emulatorId = Math.round(message.emulatorId);
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if (message.supportedExtensions?.length) {
            obj.supportedExtensions = message.supportedExtensions;
        }
        if (message.customArgs?.length) {
            obj.customArgs = message.customArgs;
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        if (message.builtIn !== undefined) {
            obj.builtIn = message.builtIn;
        }
        return obj;
    },
    create(base) {
        return UpdatedEmulatorProfile.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdatedEmulatorProfile();
        message.id = object.id ?? 0;
        message.emulatorId = object.emulatorId ?? undefined;
        message.name = object.name ?? undefined;
        message.supportedExtensions = object.supportedExtensions?.map((e) => e) || [];
        message.customArgs = object.customArgs?.map((e) => e) || [];
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        message.builtIn = object.builtIn ?? undefined;
        return message;
    },
};
function createBaseDefaultEmulatorProfile() {
    return { platformId: 0, emulatorProfileId: 0, createdAt: undefined, updatedAt: undefined, clientId: 0 };
}
export const DefaultEmulatorProfile = {
    encode(message, writer = new BinaryWriter()) {
        if (message.platformId !== 0) {
            writer.uint32(8).int32(message.platformId);
        }
        if (message.emulatorProfileId !== 0) {
            writer.uint32(16).int32(message.emulatorProfileId);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(26).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(34).fork()).join();
        }
        if (message.clientId !== 0) {
            writer.uint32(40).int32(message.clientId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDefaultEmulatorProfile();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.platformId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.emulatorProfileId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.clientId = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            platformId: isSet(object.platformId) ? globalThis.Number(object.platformId) : 0,
            emulatorProfileId: isSet(object.emulatorProfileId) ? globalThis.Number(object.emulatorProfileId) : 0,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
            clientId: isSet(object.clientId) ? globalThis.Number(object.clientId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.platformId !== 0) {
            obj.platformId = Math.round(message.platformId);
        }
        if (message.emulatorProfileId !== 0) {
            obj.emulatorProfileId = Math.round(message.emulatorProfileId);
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        if (message.clientId !== 0) {
            obj.clientId = Math.round(message.clientId);
        }
        return obj;
    },
    create(base) {
        return DefaultEmulatorProfile.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDefaultEmulatorProfile();
        message.platformId = object.platformId ?? 0;
        message.emulatorProfileId = object.emulatorProfileId ?? 0;
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        message.clientId = object.clientId ?? 0;
        return message;
    },
};
function createBaseNewDefaultEmulatorProfile() {
    return { platformId: 0, emulatorProfileId: 0, createdAt: undefined, updatedAt: undefined, clientId: undefined };
}
export const NewDefaultEmulatorProfile = {
    encode(message, writer = new BinaryWriter()) {
        if (message.platformId !== 0) {
            writer.uint32(8).int32(message.platformId);
        }
        if (message.emulatorProfileId !== 0) {
            writer.uint32(16).int32(message.emulatorProfileId);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(26).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(34).fork()).join();
        }
        if (message.clientId !== undefined) {
            writer.uint32(40).int32(message.clientId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNewDefaultEmulatorProfile();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.platformId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.emulatorProfileId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.clientId = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            platformId: isSet(object.platformId) ? globalThis.Number(object.platformId) : 0,
            emulatorProfileId: isSet(object.emulatorProfileId) ? globalThis.Number(object.emulatorProfileId) : 0,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
            clientId: isSet(object.clientId) ? globalThis.Number(object.clientId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.platformId !== 0) {
            obj.platformId = Math.round(message.platformId);
        }
        if (message.emulatorProfileId !== 0) {
            obj.emulatorProfileId = Math.round(message.emulatorProfileId);
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        if (message.clientId !== undefined) {
            obj.clientId = Math.round(message.clientId);
        }
        return obj;
    },
    create(base) {
        return NewDefaultEmulatorProfile.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseNewDefaultEmulatorProfile();
        message.platformId = object.platformId ?? 0;
        message.emulatorProfileId = object.emulatorProfileId ?? 0;
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        message.clientId = object.clientId ?? undefined;
        return message;
    },
};
function createBaseUpdatedDefaultEmulatorProfile() {
    return { platformId: 0, emulatorProfileId: 0, createdAt: undefined, updatedAt: undefined, clientId: undefined };
}
export const UpdatedDefaultEmulatorProfile = {
    encode(message, writer = new BinaryWriter()) {
        if (message.platformId !== 0) {
            writer.uint32(8).int32(message.platformId);
        }
        if (message.emulatorProfileId !== 0) {
            writer.uint32(16).int32(message.emulatorProfileId);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(26).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(34).fork()).join();
        }
        if (message.clientId !== undefined) {
            writer.uint32(40).int32(message.clientId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdatedDefaultEmulatorProfile();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.platformId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.emulatorProfileId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.clientId = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            platformId: isSet(object.platformId) ? globalThis.Number(object.platformId) : 0,
            emulatorProfileId: isSet(object.emulatorProfileId) ? globalThis.Number(object.emulatorProfileId) : 0,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
            clientId: isSet(object.clientId) ? globalThis.Number(object.clientId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.platformId !== 0) {
            obj.platformId = Math.round(message.platformId);
        }
        if (message.emulatorProfileId !== 0) {
            obj.emulatorProfileId = Math.round(message.emulatorProfileId);
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        if (message.clientId !== undefined) {
            obj.clientId = Math.round(message.clientId);
        }
        return obj;
    },
    create(base) {
        return UpdatedDefaultEmulatorProfile.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdatedDefaultEmulatorProfile();
        message.platformId = object.platformId ?? 0;
        message.emulatorProfileId = object.emulatorProfileId ?? 0;
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        message.clientId = object.clientId ?? undefined;
        return message;
    },
};
function createBaseLocalEmulatorConfig() {
    return {
        id: 0,
        emulatorId: 0,
        clientId: 0,
        createdAt: undefined,
        updatedAt: undefined,
        executablePath: "",
        nickname: undefined,
    };
}
export const LocalEmulatorConfig = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.emulatorId !== 0) {
            writer.uint32(16).int32(message.emulatorId);
        }
        if (message.clientId !== 0) {
            writer.uint32(24).int32(message.clientId);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(34).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(42).fork()).join();
        }
        if (message.executablePath !== "") {
            writer.uint32(50).string(message.executablePath);
        }
        if (message.nickname !== undefined) {
            writer.uint32(58).string(message.nickname);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLocalEmulatorConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.emulatorId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.clientId = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.executablePath = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.nickname = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            emulatorId: isSet(object.emulatorId) ? globalThis.Number(object.emulatorId) : 0,
            clientId: isSet(object.clientId) ? globalThis.Number(object.clientId) : 0,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
            executablePath: isSet(object.executablePath) ? globalThis.String(object.executablePath) : "",
            nickname: isSet(object.nickname) ? globalThis.String(object.nickname) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.emulatorId !== 0) {
            obj.emulatorId = Math.round(message.emulatorId);
        }
        if (message.clientId !== 0) {
            obj.clientId = Math.round(message.clientId);
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        if (message.executablePath !== "") {
            obj.executablePath = message.executablePath;
        }
        if (message.nickname !== undefined) {
            obj.nickname = message.nickname;
        }
        return obj;
    },
    create(base) {
        return LocalEmulatorConfig.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLocalEmulatorConfig();
        message.id = object.id ?? 0;
        message.emulatorId = object.emulatorId ?? 0;
        message.clientId = object.clientId ?? 0;
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        message.executablePath = object.executablePath ?? "";
        message.nickname = object.nickname ?? undefined;
        return message;
    },
};
function createBaseNewLocalEmulatorConfig() {
    return {
        emulatorId: 0,
        clientId: 0,
        createdAt: undefined,
        updatedAt: undefined,
        executablePath: "",
        nickname: undefined,
    };
}
export const NewLocalEmulatorConfig = {
    encode(message, writer = new BinaryWriter()) {
        if (message.emulatorId !== 0) {
            writer.uint32(8).int32(message.emulatorId);
        }
        if (message.clientId !== 0) {
            writer.uint32(16).int32(message.clientId);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(26).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(34).fork()).join();
        }
        if (message.executablePath !== "") {
            writer.uint32(42).string(message.executablePath);
        }
        if (message.nickname !== undefined) {
            writer.uint32(50).string(message.nickname);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNewLocalEmulatorConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.emulatorId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.clientId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.executablePath = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.nickname = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            emulatorId: isSet(object.emulatorId) ? globalThis.Number(object.emulatorId) : 0,
            clientId: isSet(object.clientId) ? globalThis.Number(object.clientId) : 0,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
            executablePath: isSet(object.executablePath) ? globalThis.String(object.executablePath) : "",
            nickname: isSet(object.nickname) ? globalThis.String(object.nickname) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.emulatorId !== 0) {
            obj.emulatorId = Math.round(message.emulatorId);
        }
        if (message.clientId !== 0) {
            obj.clientId = Math.round(message.clientId);
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        if (message.executablePath !== "") {
            obj.executablePath = message.executablePath;
        }
        if (message.nickname !== undefined) {
            obj.nickname = message.nickname;
        }
        return obj;
    },
    create(base) {
        return NewLocalEmulatorConfig.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseNewLocalEmulatorConfig();
        message.emulatorId = object.emulatorId ?? 0;
        message.clientId = object.clientId ?? 0;
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        message.executablePath = object.executablePath ?? "";
        message.nickname = object.nickname ?? undefined;
        return message;
    },
};
function createBaseUpdatedLocalEmulatorConfig() {
    return {
        id: 0,
        emulatorId: undefined,
        clientId: undefined,
        createdAt: undefined,
        updatedAt: undefined,
        executablePath: undefined,
        nickname: undefined,
    };
}
export const UpdatedLocalEmulatorConfig = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.emulatorId !== undefined) {
            writer.uint32(16).int32(message.emulatorId);
        }
        if (message.clientId !== undefined) {
            writer.uint32(24).int32(message.clientId);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(34).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(42).fork()).join();
        }
        if (message.executablePath !== undefined) {
            writer.uint32(50).string(message.executablePath);
        }
        if (message.nickname !== undefined) {
            writer.uint32(58).string(message.nickname);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdatedLocalEmulatorConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.emulatorId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.clientId = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.executablePath = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.nickname = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            emulatorId: isSet(object.emulatorId) ? globalThis.Number(object.emulatorId) : undefined,
            clientId: isSet(object.clientId) ? globalThis.Number(object.clientId) : undefined,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
            executablePath: isSet(object.executablePath) ? globalThis.String(object.executablePath) : undefined,
            nickname: isSet(object.nickname) ? globalThis.String(object.nickname) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.emulatorId !== undefined) {
            obj.emulatorId = Math.round(message.emulatorId);
        }
        if (message.clientId !== undefined) {
            obj.clientId = Math.round(message.clientId);
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        if (message.executablePath !== undefined) {
            obj.executablePath = message.executablePath;
        }
        if (message.nickname !== undefined) {
            obj.nickname = message.nickname;
        }
        return obj;
    },
    create(base) {
        return UpdatedLocalEmulatorConfig.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdatedLocalEmulatorConfig();
        message.id = object.id ?? 0;
        message.emulatorId = object.emulatorId ?? undefined;
        message.clientId = object.clientId ?? undefined;
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        message.executablePath = object.executablePath ?? undefined;
        message.nickname = object.nickname ?? undefined;
        return message;
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1_000);
    const nanos = (date.getTime() % 1_000) * 1_000_000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1_000;
    millis += (t.nanos || 0) / 1_000_000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return toTimestamp(o);
    }
    else if (typeof o === "string") {
        return toTimestamp(new globalThis.Date(o));
    }
    else {
        return Timestamp.fromJSON(o);
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
