// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: retrom/models/platforms.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../google/protobuf/timestamp";
export const protobufPackage = "retrom";
function createBasePlatform() {
    return {
        id: 0,
        path: "",
        createdAt: undefined,
        updatedAt: undefined,
        deletedAt: undefined,
        isDeleted: false,
        thirdParty: false,
    };
}
export const Platform = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.path !== "") {
            writer.uint32(18).string(message.path);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(26).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(34).fork()).join();
        }
        if (message.deletedAt !== undefined) {
            Timestamp.encode(message.deletedAt, writer.uint32(42).fork()).join();
        }
        if (message.isDeleted !== false) {
            writer.uint32(48).bool(message.isDeleted);
        }
        if (message.thirdParty !== false) {
            writer.uint32(56).bool(message.thirdParty);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlatform();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.deletedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.isDeleted = reader.bool();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.thirdParty = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            path: isSet(object.path) ? globalThis.String(object.path) : "",
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
            deletedAt: isSet(object.deletedAt) ? fromJsonTimestamp(object.deletedAt) : undefined,
            isDeleted: isSet(object.isDeleted) ? globalThis.Boolean(object.isDeleted) : false,
            thirdParty: isSet(object.thirdParty) ? globalThis.Boolean(object.thirdParty) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.path !== "") {
            obj.path = message.path;
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        if (message.deletedAt !== undefined) {
            obj.deletedAt = fromTimestamp(message.deletedAt).toISOString();
        }
        if (message.isDeleted !== false) {
            obj.isDeleted = message.isDeleted;
        }
        if (message.thirdParty !== false) {
            obj.thirdParty = message.thirdParty;
        }
        return obj;
    },
    create(base) {
        return Platform.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePlatform();
        message.id = object.id ?? 0;
        message.path = object.path ?? "";
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        message.deletedAt = (object.deletedAt !== undefined && object.deletedAt !== null)
            ? Timestamp.fromPartial(object.deletedAt)
            : undefined;
        message.isDeleted = object.isDeleted ?? false;
        message.thirdParty = object.thirdParty ?? false;
        return message;
    },
};
function createBaseNewPlatform() {
    return {
        path: "",
        createdAt: undefined,
        updatedAt: undefined,
        deletedAt: undefined,
        isDeleted: false,
        thirdParty: false,
    };
}
export const NewPlatform = {
    encode(message, writer = new BinaryWriter()) {
        if (message.path !== "") {
            writer.uint32(10).string(message.path);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(18).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(26).fork()).join();
        }
        if (message.deletedAt !== undefined) {
            Timestamp.encode(message.deletedAt, writer.uint32(34).fork()).join();
        }
        if (message.isDeleted !== false) {
            writer.uint32(40).bool(message.isDeleted);
        }
        if (message.thirdParty !== false) {
            writer.uint32(48).bool(message.thirdParty);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNewPlatform();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.deletedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.isDeleted = reader.bool();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.thirdParty = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            path: isSet(object.path) ? globalThis.String(object.path) : "",
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
            deletedAt: isSet(object.deletedAt) ? fromJsonTimestamp(object.deletedAt) : undefined,
            isDeleted: isSet(object.isDeleted) ? globalThis.Boolean(object.isDeleted) : false,
            thirdParty: isSet(object.thirdParty) ? globalThis.Boolean(object.thirdParty) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.path !== "") {
            obj.path = message.path;
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        if (message.deletedAt !== undefined) {
            obj.deletedAt = fromTimestamp(message.deletedAt).toISOString();
        }
        if (message.isDeleted !== false) {
            obj.isDeleted = message.isDeleted;
        }
        if (message.thirdParty !== false) {
            obj.thirdParty = message.thirdParty;
        }
        return obj;
    },
    create(base) {
        return NewPlatform.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseNewPlatform();
        message.path = object.path ?? "";
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        message.deletedAt = (object.deletedAt !== undefined && object.deletedAt !== null)
            ? Timestamp.fromPartial(object.deletedAt)
            : undefined;
        message.isDeleted = object.isDeleted ?? false;
        message.thirdParty = object.thirdParty ?? false;
        return message;
    },
};
function createBaseUpdatedPlatform() {
    return {
        id: 0,
        path: undefined,
        createdAt: undefined,
        updatedAt: undefined,
        deletedAt: undefined,
        isDeleted: undefined,
        thirdParty: undefined,
    };
}
export const UpdatedPlatform = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.path !== undefined) {
            writer.uint32(18).string(message.path);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(26).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(34).fork()).join();
        }
        if (message.deletedAt !== undefined) {
            Timestamp.encode(message.deletedAt, writer.uint32(42).fork()).join();
        }
        if (message.isDeleted !== undefined) {
            writer.uint32(48).bool(message.isDeleted);
        }
        if (message.thirdParty !== undefined) {
            writer.uint32(56).bool(message.thirdParty);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdatedPlatform();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.deletedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.isDeleted = reader.bool();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.thirdParty = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            path: isSet(object.path) ? globalThis.String(object.path) : undefined,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
            deletedAt: isSet(object.deletedAt) ? fromJsonTimestamp(object.deletedAt) : undefined,
            isDeleted: isSet(object.isDeleted) ? globalThis.Boolean(object.isDeleted) : undefined,
            thirdParty: isSet(object.thirdParty) ? globalThis.Boolean(object.thirdParty) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.path !== undefined) {
            obj.path = message.path;
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        if (message.deletedAt !== undefined) {
            obj.deletedAt = fromTimestamp(message.deletedAt).toISOString();
        }
        if (message.isDeleted !== undefined) {
            obj.isDeleted = message.isDeleted;
        }
        if (message.thirdParty !== undefined) {
            obj.thirdParty = message.thirdParty;
        }
        return obj;
    },
    create(base) {
        return UpdatedPlatform.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdatedPlatform();
        message.id = object.id ?? 0;
        message.path = object.path ?? undefined;
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        message.deletedAt = (object.deletedAt !== undefined && object.deletedAt !== null)
            ? Timestamp.fromPartial(object.deletedAt)
            : undefined;
        message.isDeleted = object.isDeleted ?? undefined;
        message.thirdParty = object.thirdParty ?? undefined;
        return message;
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1_000);
    const nanos = (date.getTime() % 1_000) * 1_000_000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1_000;
    millis += (t.nanos || 0) / 1_000_000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return toTimestamp(o);
    }
    else if (typeof o === "string") {
        return toTimestamp(new globalThis.Date(o));
    }
    else {
        return Timestamp.fromJSON(o);
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
