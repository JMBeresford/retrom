// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: retrom/models/clients.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../google/protobuf/timestamp";
export const protobufPackage = "retrom";
function createBaseClient() {
    return { id: 0, name: "", createdAt: undefined, updatedAt: undefined };
}
export const Client = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(26).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClient();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        return obj;
    },
    create(base) {
        return Client.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseClient();
        message.id = object.id ?? 0;
        message.name = object.name ?? "";
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        return message;
    },
};
function createBaseNewClient() {
    return { name: "", createdAt: undefined, updatedAt: undefined };
}
export const NewClient = {
    encode(message, writer = new BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(18).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNewClient();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        return obj;
    },
    create(base) {
        return NewClient.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseNewClient();
        message.name = object.name ?? "";
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        return message;
    },
};
function createBaseUpdatedClient() {
    return { id: 0, name: undefined, createdAt: undefined, updatedAt: undefined };
}
export const UpdatedClient = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.name !== undefined) {
            writer.uint32(18).string(message.name);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(message.createdAt, writer.uint32(26).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(message.updatedAt, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdatedClient();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.createdAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.updatedAt = Timestamp.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            name: isSet(object.name) ? globalThis.String(object.name) : undefined,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = fromTimestamp(message.createdAt).toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
        }
        return obj;
    },
    create(base) {
        return UpdatedClient.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdatedClient();
        message.id = object.id ?? 0;
        message.name = object.name ?? undefined;
        message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
            ? Timestamp.fromPartial(object.createdAt)
            : undefined;
        message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
            ? Timestamp.fromPartial(object.updatedAt)
            : undefined;
        return message;
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1_000);
    const nanos = (date.getTime() % 1_000) * 1_000_000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1_000;
    millis += (t.nanos || 0) / 1_000_000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return toTimestamp(o);
    }
    else if (typeof o === "string") {
        return toTimestamp(new globalThis.Date(o));
    }
    else {
        return Timestamp.fromJSON(o);
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
