// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: retrom/providers/igdb.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export const protobufPackage = "retrom";
export const IgdbFilters_FilterOperator = {
    EQUAL: 0,
    NOT_EQUAL: 1,
    GREATER_THAN: 2,
    GREATER_THAN_OR_EQUAL: 3,
    LESS_THAN: 4,
    LESS_THAN_OR_EQUAL: 5,
    PREFIX_MATCH: 6,
    SUFFIX_MATCH: 7,
    INFIX_MATCH: 8,
    ANY: 9,
    ALL: 10,
    NONE: 11,
    NOT_ALL: 12,
    EXACT: 13,
    UNRECOGNIZED: -1,
};
export function igdbFilters_FilterOperatorFromJSON(object) {
    switch (object) {
        case 0:
        case "EQUAL":
            return IgdbFilters_FilterOperator.EQUAL;
        case 1:
        case "NOT_EQUAL":
            return IgdbFilters_FilterOperator.NOT_EQUAL;
        case 2:
        case "GREATER_THAN":
            return IgdbFilters_FilterOperator.GREATER_THAN;
        case 3:
        case "GREATER_THAN_OR_EQUAL":
            return IgdbFilters_FilterOperator.GREATER_THAN_OR_EQUAL;
        case 4:
        case "LESS_THAN":
            return IgdbFilters_FilterOperator.LESS_THAN;
        case 5:
        case "LESS_THAN_OR_EQUAL":
            return IgdbFilters_FilterOperator.LESS_THAN_OR_EQUAL;
        case 6:
        case "PREFIX_MATCH":
            return IgdbFilters_FilterOperator.PREFIX_MATCH;
        case 7:
        case "SUFFIX_MATCH":
            return IgdbFilters_FilterOperator.SUFFIX_MATCH;
        case 8:
        case "INFIX_MATCH":
            return IgdbFilters_FilterOperator.INFIX_MATCH;
        case 9:
        case "ANY":
            return IgdbFilters_FilterOperator.ANY;
        case 10:
        case "ALL":
            return IgdbFilters_FilterOperator.ALL;
        case 11:
        case "NONE":
            return IgdbFilters_FilterOperator.NONE;
        case 12:
        case "NOT_ALL":
            return IgdbFilters_FilterOperator.NOT_ALL;
        case 13:
        case "EXACT":
            return IgdbFilters_FilterOperator.EXACT;
        case -1:
        case "UNRECOGNIZED":
        default:
            return IgdbFilters_FilterOperator.UNRECOGNIZED;
    }
}
export function igdbFilters_FilterOperatorToJSON(object) {
    switch (object) {
        case IgdbFilters_FilterOperator.EQUAL:
            return "EQUAL";
        case IgdbFilters_FilterOperator.NOT_EQUAL:
            return "NOT_EQUAL";
        case IgdbFilters_FilterOperator.GREATER_THAN:
            return "GREATER_THAN";
        case IgdbFilters_FilterOperator.GREATER_THAN_OR_EQUAL:
            return "GREATER_THAN_OR_EQUAL";
        case IgdbFilters_FilterOperator.LESS_THAN:
            return "LESS_THAN";
        case IgdbFilters_FilterOperator.LESS_THAN_OR_EQUAL:
            return "LESS_THAN_OR_EQUAL";
        case IgdbFilters_FilterOperator.PREFIX_MATCH:
            return "PREFIX_MATCH";
        case IgdbFilters_FilterOperator.SUFFIX_MATCH:
            return "SUFFIX_MATCH";
        case IgdbFilters_FilterOperator.INFIX_MATCH:
            return "INFIX_MATCH";
        case IgdbFilters_FilterOperator.ANY:
            return "ANY";
        case IgdbFilters_FilterOperator.ALL:
            return "ALL";
        case IgdbFilters_FilterOperator.NONE:
            return "NONE";
        case IgdbFilters_FilterOperator.NOT_ALL:
            return "NOT_ALL";
        case IgdbFilters_FilterOperator.EXACT:
            return "EXACT";
        case IgdbFilters_FilterOperator.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseIgdbSearch() {
    return { value: "" };
}
export const IgdbSearch = {
    encode(message, writer = new BinaryWriter()) {
        if (message.value !== "") {
            writer.uint32(10).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIgdbSearch();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { value: isSet(object.value) ? globalThis.String(object.value) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return IgdbSearch.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseIgdbSearch();
        message.value = object.value ?? "";
        return message;
    },
};
function createBaseIgdbPagination() {
    return { limit: undefined, offset: undefined };
}
export const IgdbPagination = {
    encode(message, writer = new BinaryWriter()) {
        if (message.limit !== undefined) {
            writer.uint32(8).int32(message.limit);
        }
        if (message.offset !== undefined) {
            writer.uint32(16).int32(message.offset);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIgdbPagination();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.limit = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.offset = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            limit: isSet(object.limit) ? globalThis.Number(object.limit) : undefined,
            offset: isSet(object.offset) ? globalThis.Number(object.offset) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.limit !== undefined) {
            obj.limit = Math.round(message.limit);
        }
        if (message.offset !== undefined) {
            obj.offset = Math.round(message.offset);
        }
        return obj;
    },
    create(base) {
        return IgdbPagination.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseIgdbPagination();
        message.limit = object.limit ?? undefined;
        message.offset = object.offset ?? undefined;
        return message;
    },
};
function createBaseIgdbFilters() {
    return { filters: new Map() };
}
export const IgdbFilters = {
    encode(message, writer = new BinaryWriter()) {
        message.filters.forEach((value, key) => {
            IgdbFilters_FiltersEntry.encode({ key: key, value }, writer.uint32(10).fork()).join();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIgdbFilters();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = IgdbFilters_FiltersEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.filters.set(entry1.key, entry1.value);
                    }
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            filters: isObject(object.filters)
                ? Object.entries(object.filters).reduce((acc, [key, value]) => {
                    acc.set(key, IgdbFilters_FilterValue.fromJSON(value));
                    return acc;
                }, new Map())
                : new Map(),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.filters?.size) {
            obj.filters = {};
            message.filters.forEach((v, k) => {
                obj.filters[k] = IgdbFilters_FilterValue.toJSON(v);
            });
        }
        return obj;
    },
    create(base) {
        return IgdbFilters.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseIgdbFilters();
        message.filters = (() => {
            const m = new Map();
            (object.filters ?? new Map()).forEach((value, key) => {
                if (value !== undefined) {
                    m.set(key, IgdbFilters_FilterValue.fromPartial(value));
                }
            });
            return m;
        })();
        return message;
    },
};
function createBaseIgdbFilters_FilterValue() {
    return { value: "", operator: undefined };
}
export const IgdbFilters_FilterValue = {
    encode(message, writer = new BinaryWriter()) {
        if (message.value !== "") {
            writer.uint32(10).string(message.value);
        }
        if (message.operator !== undefined) {
            writer.uint32(16).int32(message.operator);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIgdbFilters_FilterValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.operator = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            value: isSet(object.value) ? globalThis.String(object.value) : "",
            operator: isSet(object.operator) ? igdbFilters_FilterOperatorFromJSON(object.operator) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.value !== "") {
            obj.value = message.value;
        }
        if (message.operator !== undefined) {
            obj.operator = igdbFilters_FilterOperatorToJSON(message.operator);
        }
        return obj;
    },
    create(base) {
        return IgdbFilters_FilterValue.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseIgdbFilters_FilterValue();
        message.value = object.value ?? "";
        message.operator = object.operator ?? undefined;
        return message;
    },
};
function createBaseIgdbFilters_FiltersEntry() {
    return { key: "", value: undefined };
}
export const IgdbFilters_FiltersEntry = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            IgdbFilters_FilterValue.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIgdbFilters_FiltersEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = IgdbFilters_FilterValue.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? IgdbFilters_FilterValue.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = IgdbFilters_FilterValue.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return IgdbFilters_FiltersEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseIgdbFilters_FiltersEntry();
        message.key = object.key ?? "";
        message.value = (object.value !== undefined && object.value !== null)
            ? IgdbFilters_FilterValue.fromPartial(object.value)
            : undefined;
        return message;
    },
};
function createBaseIgdbFields() {
    return { selector: undefined };
}
export const IgdbFields = {
    encode(message, writer = new BinaryWriter()) {
        switch (message.selector?.$case) {
            case "include":
                IgdbFields_IncludeFields.encode(message.selector.include, writer.uint32(10).fork()).join();
                break;
            case "exclude":
                IgdbFields_ExcludeFields.encode(message.selector.exclude, writer.uint32(18).fork()).join();
                break;
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIgdbFields();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.selector = { $case: "include", include: IgdbFields_IncludeFields.decode(reader, reader.uint32()) };
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.selector = { $case: "exclude", exclude: IgdbFields_ExcludeFields.decode(reader, reader.uint32()) };
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            selector: isSet(object.include)
                ? { $case: "include", include: IgdbFields_IncludeFields.fromJSON(object.include) }
                : isSet(object.exclude)
                    ? { $case: "exclude", exclude: IgdbFields_ExcludeFields.fromJSON(object.exclude) }
                    : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.selector?.$case === "include") {
            obj.include = IgdbFields_IncludeFields.toJSON(message.selector.include);
        }
        else if (message.selector?.$case === "exclude") {
            obj.exclude = IgdbFields_ExcludeFields.toJSON(message.selector.exclude);
        }
        return obj;
    },
    create(base) {
        return IgdbFields.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseIgdbFields();
        switch (object.selector?.$case) {
            case "include": {
                if (object.selector?.include !== undefined && object.selector?.include !== null) {
                    message.selector = {
                        $case: "include",
                        include: IgdbFields_IncludeFields.fromPartial(object.selector.include),
                    };
                }
                break;
            }
            case "exclude": {
                if (object.selector?.exclude !== undefined && object.selector?.exclude !== null) {
                    message.selector = {
                        $case: "exclude",
                        exclude: IgdbFields_ExcludeFields.fromPartial(object.selector.exclude),
                    };
                }
                break;
            }
        }
        return message;
    },
};
function createBaseIgdbFields_IncludeFields() {
    return { value: [] };
}
export const IgdbFields_IncludeFields = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.value) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIgdbFields_IncludeFields();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.value.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { value: globalThis.Array.isArray(object?.value) ? object.value.map((e) => globalThis.String(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.value?.length) {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return IgdbFields_IncludeFields.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseIgdbFields_IncludeFields();
        message.value = object.value?.map((e) => e) || [];
        return message;
    },
};
function createBaseIgdbFields_ExcludeFields() {
    return { value: [] };
}
export const IgdbFields_ExcludeFields = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.value) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIgdbFields_ExcludeFields();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.value.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { value: globalThis.Array.isArray(object?.value) ? object.value.map((e) => globalThis.String(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.value?.length) {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return IgdbFields_ExcludeFields.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseIgdbFields_ExcludeFields();
        message.value = object.value?.map((e) => e) || [];
        return message;
    },
};
function createBaseIgdbGameSearchQuery() {
    return { gameId: 0, search: undefined, fields: undefined, pagination: undefined };
}
export const IgdbGameSearchQuery = {
    encode(message, writer = new BinaryWriter()) {
        if (message.gameId !== 0) {
            writer.uint32(8).int32(message.gameId);
        }
        if (message.search !== undefined) {
            IgdbSearch.encode(message.search, writer.uint32(18).fork()).join();
        }
        if (message.fields !== undefined) {
            IgdbGameSearchQuery_Fields.encode(message.fields, writer.uint32(26).fork()).join();
        }
        if (message.pagination !== undefined) {
            IgdbPagination.encode(message.pagination, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIgdbGameSearchQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.gameId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.search = IgdbSearch.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.fields = IgdbGameSearchQuery_Fields.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.pagination = IgdbPagination.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            gameId: isSet(object.gameId) ? globalThis.Number(object.gameId) : 0,
            search: isSet(object.search) ? IgdbSearch.fromJSON(object.search) : undefined,
            fields: isSet(object.fields) ? IgdbGameSearchQuery_Fields.fromJSON(object.fields) : undefined,
            pagination: isSet(object.pagination) ? IgdbPagination.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.gameId !== 0) {
            obj.gameId = Math.round(message.gameId);
        }
        if (message.search !== undefined) {
            obj.search = IgdbSearch.toJSON(message.search);
        }
        if (message.fields !== undefined) {
            obj.fields = IgdbGameSearchQuery_Fields.toJSON(message.fields);
        }
        if (message.pagination !== undefined) {
            obj.pagination = IgdbPagination.toJSON(message.pagination);
        }
        return obj;
    },
    create(base) {
        return IgdbGameSearchQuery.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseIgdbGameSearchQuery();
        message.gameId = object.gameId ?? 0;
        message.search = (object.search !== undefined && object.search !== null)
            ? IgdbSearch.fromPartial(object.search)
            : undefined;
        message.fields = (object.fields !== undefined && object.fields !== null)
            ? IgdbGameSearchQuery_Fields.fromPartial(object.fields)
            : undefined;
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? IgdbPagination.fromPartial(object.pagination)
            : undefined;
        return message;
    },
};
function createBaseIgdbGameSearchQuery_Fields() {
    return { id: undefined, title: undefined, platform: undefined };
}
export const IgdbGameSearchQuery_Fields = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== undefined) {
            writer.uint32(8).uint64(message.id);
        }
        if (message.title !== undefined) {
            writer.uint32(18).string(message.title);
        }
        if (message.platform !== undefined) {
            writer.uint32(24).uint64(message.platform);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIgdbGameSearchQuery_Fields();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = longToNumber(reader.uint64());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.platform = longToNumber(reader.uint64());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : undefined,
            title: isSet(object.title) ? globalThis.String(object.title) : undefined,
            platform: isSet(object.platform) ? globalThis.Number(object.platform) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = Math.round(message.id);
        }
        if (message.title !== undefined) {
            obj.title = message.title;
        }
        if (message.platform !== undefined) {
            obj.platform = Math.round(message.platform);
        }
        return obj;
    },
    create(base) {
        return IgdbGameSearchQuery_Fields.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseIgdbGameSearchQuery_Fields();
        message.id = object.id ?? undefined;
        message.title = object.title ?? undefined;
        message.platform = object.platform ?? undefined;
        return message;
    },
};
function createBaseIgdbPlatformSearchQuery() {
    return { platformId: 0, search: undefined, fields: undefined, pagination: undefined };
}
export const IgdbPlatformSearchQuery = {
    encode(message, writer = new BinaryWriter()) {
        if (message.platformId !== 0) {
            writer.uint32(8).int32(message.platformId);
        }
        if (message.search !== undefined) {
            IgdbSearch.encode(message.search, writer.uint32(18).fork()).join();
        }
        if (message.fields !== undefined) {
            IgdbPlatformSearchQuery_Fields.encode(message.fields, writer.uint32(26).fork()).join();
        }
        if (message.pagination !== undefined) {
            IgdbPagination.encode(message.pagination, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIgdbPlatformSearchQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.platformId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.search = IgdbSearch.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.fields = IgdbPlatformSearchQuery_Fields.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.pagination = IgdbPagination.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            platformId: isSet(object.platformId) ? globalThis.Number(object.platformId) : 0,
            search: isSet(object.search) ? IgdbSearch.fromJSON(object.search) : undefined,
            fields: isSet(object.fields) ? IgdbPlatformSearchQuery_Fields.fromJSON(object.fields) : undefined,
            pagination: isSet(object.pagination) ? IgdbPagination.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.platformId !== 0) {
            obj.platformId = Math.round(message.platformId);
        }
        if (message.search !== undefined) {
            obj.search = IgdbSearch.toJSON(message.search);
        }
        if (message.fields !== undefined) {
            obj.fields = IgdbPlatformSearchQuery_Fields.toJSON(message.fields);
        }
        if (message.pagination !== undefined) {
            obj.pagination = IgdbPagination.toJSON(message.pagination);
        }
        return obj;
    },
    create(base) {
        return IgdbPlatformSearchQuery.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseIgdbPlatformSearchQuery();
        message.platformId = object.platformId ?? 0;
        message.search = (object.search !== undefined && object.search !== null)
            ? IgdbSearch.fromPartial(object.search)
            : undefined;
        message.fields = (object.fields !== undefined && object.fields !== null)
            ? IgdbPlatformSearchQuery_Fields.fromPartial(object.fields)
            : undefined;
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? IgdbPagination.fromPartial(object.pagination)
            : undefined;
        return message;
    },
};
function createBaseIgdbPlatformSearchQuery_Fields() {
    return { id: undefined, name: undefined };
}
export const IgdbPlatformSearchQuery_Fields = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== undefined) {
            writer.uint32(8).uint64(message.id);
        }
        if (message.name !== undefined) {
            writer.uint32(18).string(message.name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIgdbPlatformSearchQuery_Fields();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = longToNumber(reader.uint64());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = Math.round(message.id);
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        return obj;
    },
    create(base) {
        return IgdbPlatformSearchQuery_Fields.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseIgdbPlatformSearchQuery_Fields();
        message.id = object.id ?? undefined;
        message.name = object.name ?? undefined;
        return message;
    },
};
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
