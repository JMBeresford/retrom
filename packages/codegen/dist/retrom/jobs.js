// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: retrom/jobs.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export const protobufPackage = "retrom";
export const JobStatus = { Running: 0, Success: 1, Failure: 2, Idle: 3, UNRECOGNIZED: -1 };
export function jobStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "Running":
            return JobStatus.Running;
        case 1:
        case "Success":
            return JobStatus.Success;
        case 2:
        case "Failure":
            return JobStatus.Failure;
        case 3:
        case "Idle":
            return JobStatus.Idle;
        case -1:
        case "UNRECOGNIZED":
        default:
            return JobStatus.UNRECOGNIZED;
    }
}
export function jobStatusToJSON(object) {
    switch (object) {
        case JobStatus.Running:
            return "Running";
        case JobStatus.Success:
            return "Success";
        case JobStatus.Failure:
            return "Failure";
        case JobStatus.Idle:
            return "Idle";
        case JobStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseJobProgress() {
    return { percent: 0, status: 0, name: "" };
}
export const JobProgress = {
    encode(message, writer = new BinaryWriter()) {
        if (message.percent !== 0) {
            writer.uint32(8).uint32(message.percent);
        }
        if (message.status !== 0) {
            writer.uint32(16).int32(message.status);
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseJobProgress();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.percent = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            percent: isSet(object.percent) ? globalThis.Number(object.percent) : 0,
            status: isSet(object.status) ? jobStatusFromJSON(object.status) : 0,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.percent !== 0) {
            obj.percent = Math.round(message.percent);
        }
        if (message.status !== 0) {
            obj.status = jobStatusToJSON(message.status);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        return obj;
    },
    create(base) {
        return JobProgress.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseJobProgress();
        message.percent = object.percent ?? 0;
        message.status = object.status ?? 0;
        message.name = object.name ?? "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
