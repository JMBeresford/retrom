// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: retrom/utils.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export const protobufPackage = "retrom";
function createBaseVersionAnnouncement() {
    return { versions: [], level: "", message: "", url: undefined };
}
export const VersionAnnouncement = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.versions) {
            writer.uint32(10).string(v);
        }
        if (message.level !== "") {
            writer.uint32(18).string(message.level);
        }
        if (message.message !== "") {
            writer.uint32(26).string(message.message);
        }
        if (message.url !== undefined) {
            writer.uint32(34).string(message.url);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVersionAnnouncement();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.versions.push(reader.string());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.level = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            versions: globalThis.Array.isArray(object?.versions) ? object.versions.map((e) => globalThis.String(e)) : [],
            level: isSet(object.level) ? globalThis.String(object.level) : "",
            message: isSet(object.message) ? globalThis.String(object.message) : "",
            url: isSet(object.url) ? globalThis.String(object.url) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.versions?.length) {
            obj.versions = message.versions;
        }
        if (message.level !== "") {
            obj.level = message.level;
        }
        if (message.message !== "") {
            obj.message = message.message;
        }
        if (message.url !== undefined) {
            obj.url = message.url;
        }
        return obj;
    },
    create(base) {
        return VersionAnnouncement.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVersionAnnouncement();
        message.versions = object.versions?.map((e) => e) || [];
        message.level = object.level ?? "";
        message.message = object.message ?? "";
        message.url = object.url ?? undefined;
        return message;
    },
};
function createBaseVersionAnnouncementsPayload() {
    return { announcements: [] };
}
export const VersionAnnouncementsPayload = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.announcements) {
            VersionAnnouncement.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVersionAnnouncementsPayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.announcements.push(VersionAnnouncement.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            announcements: globalThis.Array.isArray(object?.announcements)
                ? object.announcements.map((e) => VersionAnnouncement.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.announcements?.length) {
            obj.announcements = message.announcements.map((e) => VersionAnnouncement.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return VersionAnnouncementsPayload.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVersionAnnouncementsPayload();
        message.announcements = object.announcements?.map((e) => VersionAnnouncement.fromPartial(e)) || [];
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
