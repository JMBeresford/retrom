// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: retrom/server/server-info.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export const protobufPackage = "retrom";
function createBaseServerInfo() {
    return { version: undefined };
}
export const ServerInfo = {
    encode(message, writer = new BinaryWriter()) {
        if (message.version !== undefined) {
            Version.encode(message.version, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServerInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.version = Version.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { version: isSet(object.version) ? Version.fromJSON(object.version) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.version !== undefined) {
            obj.version = Version.toJSON(message.version);
        }
        return obj;
    },
    create(base) {
        return ServerInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseServerInfo();
        message.version = (object.version !== undefined && object.version !== null)
            ? Version.fromPartial(object.version)
            : undefined;
        return message;
    },
};
function createBaseVersion() {
    return { major: 0, minor: 0, patch: 0, pre: undefined };
}
export const Version = {
    encode(message, writer = new BinaryWriter()) {
        if (message.major !== 0) {
            writer.uint32(8).int32(message.major);
        }
        if (message.minor !== 0) {
            writer.uint32(16).int32(message.minor);
        }
        if (message.patch !== 0) {
            writer.uint32(24).int32(message.patch);
        }
        if (message.pre !== undefined) {
            Version_Pre.encode(message.pre, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVersion();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.major = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.minor = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.patch = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.pre = Version_Pre.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            major: isSet(object.major) ? globalThis.Number(object.major) : 0,
            minor: isSet(object.minor) ? globalThis.Number(object.minor) : 0,
            patch: isSet(object.patch) ? globalThis.Number(object.patch) : 0,
            pre: isSet(object.pre) ? Version_Pre.fromJSON(object.pre) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.major !== 0) {
            obj.major = Math.round(message.major);
        }
        if (message.minor !== 0) {
            obj.minor = Math.round(message.minor);
        }
        if (message.patch !== 0) {
            obj.patch = Math.round(message.patch);
        }
        if (message.pre !== undefined) {
            obj.pre = Version_Pre.toJSON(message.pre);
        }
        return obj;
    },
    create(base) {
        return Version.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVersion();
        message.major = object.major ?? 0;
        message.minor = object.minor ?? 0;
        message.patch = object.patch ?? 0;
        message.pre = (object.pre !== undefined && object.pre !== null) ? Version_Pre.fromPartial(object.pre) : undefined;
        return message;
    },
};
function createBaseVersion_Pre() {
    return { name: "", number: 0 };
}
export const Version_Pre = {
    encode(message, writer = new BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.number !== 0) {
            writer.uint32(16).int32(message.number);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVersion_Pre();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.number = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            number: isSet(object.number) ? globalThis.Number(object.number) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.number !== 0) {
            obj.number = Math.round(message.number);
        }
        return obj;
    },
    create(base) {
        return Version_Pre.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVersion_Pre();
        message.name = object.name ?? "";
        message.number = object.number ?? 0;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
