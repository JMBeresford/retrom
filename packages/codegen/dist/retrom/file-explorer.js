// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: retrom/file-explorer.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export const protobufPackage = "retrom";
export const FilesystemNodeType = { DIRECTORY: 0, FILE: 1, UNRECOGNIZED: -1 };
export function filesystemNodeTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "DIRECTORY":
            return FilesystemNodeType.DIRECTORY;
        case 1:
        case "FILE":
            return FilesystemNodeType.FILE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return FilesystemNodeType.UNRECOGNIZED;
    }
}
export function filesystemNodeTypeToJSON(object) {
    switch (object) {
        case FilesystemNodeType.DIRECTORY:
            return "DIRECTORY";
        case FilesystemNodeType.FILE:
            return "FILE";
        case FilesystemNodeType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseFilesystemNode() {
    return { path: "", name: "", nodeType: 0 };
}
export const FilesystemNode = {
    encode(message, writer = new BinaryWriter()) {
        if (message.path !== "") {
            writer.uint32(10).string(message.path);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.nodeType !== 0) {
            writer.uint32(24).int32(message.nodeType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFilesystemNode();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.nodeType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            path: isSet(object.path) ? globalThis.String(object.path) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            nodeType: isSet(object.nodeType) ? filesystemNodeTypeFromJSON(object.nodeType) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.path !== "") {
            obj.path = message.path;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.nodeType !== 0) {
            obj.nodeType = filesystemNodeTypeToJSON(message.nodeType);
        }
        return obj;
    },
    create(base) {
        return FilesystemNode.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFilesystemNode();
        message.path = object.path ?? "";
        message.name = object.name ?? "";
        message.nodeType = object.nodeType ?? 0;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
