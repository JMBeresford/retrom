/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as FullscreenLayoutImport } from './routes/_fullscreenLayout'
import { Route as IndexImport } from './routes/index'
import { Route as windowedLayoutImport } from './routes/(windowed)/_layout'
import { Route as PlayGameIdLayoutImport } from './routes/play/$gameId/_layout'
import { Route as PlayGameIdLayoutIndexImport } from './routes/play/$gameId/_layout/index'
import { Route as windowedLayoutGamesGameIdIndexImport } from './routes/(windowed)/_layout/games/$gameId/index'

// Create Virtual Routes

const windowedImport = createFileRoute('/(windowed)')()
const PlayGameIdImport = createFileRoute('/play/$gameId')()
const FullscreenLayoutFullscreenIndexLazyImport = createFileRoute(
  '/_fullscreenLayout/fullscreen/',
)()
const windowedLayoutHomeLazyImport = createFileRoute(
  '/(windowed)/_layout/home',
)()
const FullscreenLayoutFullscreenGamesIndexLazyImport = createFileRoute(
  '/_fullscreenLayout/fullscreen/games/',
)()
const PlayGameIdLayoutFrameLazyImport = createFileRoute(
  '/play/$gameId/_layout/frame',
)()
const FullscreenLayoutFullscreenGamesGameIdLazyImport = createFileRoute(
  '/_fullscreenLayout/fullscreen/games/$gameId',
)()

// Create/Update Routes

const windowedRoute = windowedImport.update({
  id: '/(windowed)',
  getParentRoute: () => rootRoute,
} as any)

const FullscreenLayoutRoute = FullscreenLayoutImport.update({
  id: '/_fullscreenLayout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PlayGameIdRoute = PlayGameIdImport.update({
  id: '/play/$gameId',
  path: '/play/$gameId',
  getParentRoute: () => rootRoute,
} as any)

const windowedLayoutRoute = windowedLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => windowedRoute,
} as any)

const FullscreenLayoutFullscreenIndexLazyRoute =
  FullscreenLayoutFullscreenIndexLazyImport.update({
    id: '/fullscreen/',
    path: '/fullscreen/',
    getParentRoute: () => FullscreenLayoutRoute,
  } as any).lazy(() =>
    import('./routes/_fullscreenLayout/fullscreen/index.lazy').then(
      (d) => d.Route,
    ),
  )

const windowedLayoutHomeLazyRoute = windowedLayoutHomeLazyImport
  .update({
    id: '/home',
    path: '/home',
    getParentRoute: () => windowedLayoutRoute,
  } as any)
  .lazy(() =>
    import('./routes/(windowed)/_layout/home.lazy').then((d) => d.Route),
  )

const PlayGameIdLayoutRoute = PlayGameIdLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => PlayGameIdRoute,
} as any)

const FullscreenLayoutFullscreenGamesIndexLazyRoute =
  FullscreenLayoutFullscreenGamesIndexLazyImport.update({
    id: '/fullscreen/games/',
    path: '/fullscreen/games/',
    getParentRoute: () => FullscreenLayoutRoute,
  } as any).lazy(() =>
    import('./routes/_fullscreenLayout/fullscreen/games/index.lazy').then(
      (d) => d.Route,
    ),
  )

const PlayGameIdLayoutIndexRoute = PlayGameIdLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PlayGameIdLayoutRoute,
} as any)

const PlayGameIdLayoutFrameLazyRoute = PlayGameIdLayoutFrameLazyImport.update({
  id: '/frame',
  path: '/frame',
  getParentRoute: () => PlayGameIdLayoutRoute,
} as any).lazy(() =>
  import('./routes/play/$gameId/_layout/frame.lazy').then((d) => d.Route),
)

const FullscreenLayoutFullscreenGamesGameIdLazyRoute =
  FullscreenLayoutFullscreenGamesGameIdLazyImport.update({
    id: '/fullscreen/games/$gameId',
    path: '/fullscreen/games/$gameId',
    getParentRoute: () => FullscreenLayoutRoute,
  } as any).lazy(() =>
    import('./routes/_fullscreenLayout/fullscreen/games/$gameId.lazy').then(
      (d) => d.Route,
    ),
  )

const windowedLayoutGamesGameIdIndexRoute =
  windowedLayoutGamesGameIdIndexImport.update({
    id: '/games/$gameId/',
    path: '/games/$gameId/',
    getParentRoute: () => windowedLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_fullscreenLayout': {
      id: '/_fullscreenLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof FullscreenLayoutImport
      parentRoute: typeof rootRoute
    }
    '/(windowed)': {
      id: '/(windowed)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof windowedImport
      parentRoute: typeof rootRoute
    }
    '/(windowed)/_layout': {
      id: '/(windowed)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof windowedLayoutImport
      parentRoute: typeof windowedRoute
    }
    '/play/$gameId': {
      id: '/play/$gameId'
      path: '/play/$gameId'
      fullPath: '/play/$gameId'
      preLoaderRoute: typeof PlayGameIdImport
      parentRoute: typeof rootRoute
    }
    '/play/$gameId/_layout': {
      id: '/play/$gameId/_layout'
      path: '/play/$gameId'
      fullPath: '/play/$gameId'
      preLoaderRoute: typeof PlayGameIdLayoutImport
      parentRoute: typeof PlayGameIdRoute
    }
    '/(windowed)/_layout/home': {
      id: '/(windowed)/_layout/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof windowedLayoutHomeLazyImport
      parentRoute: typeof windowedLayoutImport
    }
    '/_fullscreenLayout/fullscreen/': {
      id: '/_fullscreenLayout/fullscreen/'
      path: '/fullscreen'
      fullPath: '/fullscreen'
      preLoaderRoute: typeof FullscreenLayoutFullscreenIndexLazyImport
      parentRoute: typeof FullscreenLayoutImport
    }
    '/_fullscreenLayout/fullscreen/games/$gameId': {
      id: '/_fullscreenLayout/fullscreen/games/$gameId'
      path: '/fullscreen/games/$gameId'
      fullPath: '/fullscreen/games/$gameId'
      preLoaderRoute: typeof FullscreenLayoutFullscreenGamesGameIdLazyImport
      parentRoute: typeof FullscreenLayoutImport
    }
    '/play/$gameId/_layout/frame': {
      id: '/play/$gameId/_layout/frame'
      path: '/frame'
      fullPath: '/play/$gameId/frame'
      preLoaderRoute: typeof PlayGameIdLayoutFrameLazyImport
      parentRoute: typeof PlayGameIdLayoutImport
    }
    '/play/$gameId/_layout/': {
      id: '/play/$gameId/_layout/'
      path: '/'
      fullPath: '/play/$gameId/'
      preLoaderRoute: typeof PlayGameIdLayoutIndexImport
      parentRoute: typeof PlayGameIdLayoutImport
    }
    '/_fullscreenLayout/fullscreen/games/': {
      id: '/_fullscreenLayout/fullscreen/games/'
      path: '/fullscreen/games'
      fullPath: '/fullscreen/games'
      preLoaderRoute: typeof FullscreenLayoutFullscreenGamesIndexLazyImport
      parentRoute: typeof FullscreenLayoutImport
    }
    '/(windowed)/_layout/games/$gameId/': {
      id: '/(windowed)/_layout/games/$gameId/'
      path: '/games/$gameId'
      fullPath: '/games/$gameId'
      preLoaderRoute: typeof windowedLayoutGamesGameIdIndexImport
      parentRoute: typeof windowedLayoutImport
    }
  }
}

// Create and export the route tree

interface FullscreenLayoutRouteChildren {
  FullscreenLayoutFullscreenIndexLazyRoute: typeof FullscreenLayoutFullscreenIndexLazyRoute
  FullscreenLayoutFullscreenGamesGameIdLazyRoute: typeof FullscreenLayoutFullscreenGamesGameIdLazyRoute
  FullscreenLayoutFullscreenGamesIndexLazyRoute: typeof FullscreenLayoutFullscreenGamesIndexLazyRoute
}

const FullscreenLayoutRouteChildren: FullscreenLayoutRouteChildren = {
  FullscreenLayoutFullscreenIndexLazyRoute:
    FullscreenLayoutFullscreenIndexLazyRoute,
  FullscreenLayoutFullscreenGamesGameIdLazyRoute:
    FullscreenLayoutFullscreenGamesGameIdLazyRoute,
  FullscreenLayoutFullscreenGamesIndexLazyRoute:
    FullscreenLayoutFullscreenGamesIndexLazyRoute,
}

const FullscreenLayoutRouteWithChildren =
  FullscreenLayoutRoute._addFileChildren(FullscreenLayoutRouteChildren)

interface windowedLayoutRouteChildren {
  windowedLayoutHomeLazyRoute: typeof windowedLayoutHomeLazyRoute
  windowedLayoutGamesGameIdIndexRoute: typeof windowedLayoutGamesGameIdIndexRoute
}

const windowedLayoutRouteChildren: windowedLayoutRouteChildren = {
  windowedLayoutHomeLazyRoute: windowedLayoutHomeLazyRoute,
  windowedLayoutGamesGameIdIndexRoute: windowedLayoutGamesGameIdIndexRoute,
}

const windowedLayoutRouteWithChildren = windowedLayoutRoute._addFileChildren(
  windowedLayoutRouteChildren,
)

interface windowedRouteChildren {
  windowedLayoutRoute: typeof windowedLayoutRouteWithChildren
}

const windowedRouteChildren: windowedRouteChildren = {
  windowedLayoutRoute: windowedLayoutRouteWithChildren,
}

const windowedRouteWithChildren = windowedRoute._addFileChildren(
  windowedRouteChildren,
)

interface PlayGameIdLayoutRouteChildren {
  PlayGameIdLayoutFrameLazyRoute: typeof PlayGameIdLayoutFrameLazyRoute
  PlayGameIdLayoutIndexRoute: typeof PlayGameIdLayoutIndexRoute
}

const PlayGameIdLayoutRouteChildren: PlayGameIdLayoutRouteChildren = {
  PlayGameIdLayoutFrameLazyRoute: PlayGameIdLayoutFrameLazyRoute,
  PlayGameIdLayoutIndexRoute: PlayGameIdLayoutIndexRoute,
}

const PlayGameIdLayoutRouteWithChildren =
  PlayGameIdLayoutRoute._addFileChildren(PlayGameIdLayoutRouteChildren)

interface PlayGameIdRouteChildren {
  PlayGameIdLayoutRoute: typeof PlayGameIdLayoutRouteWithChildren
}

const PlayGameIdRouteChildren: PlayGameIdRouteChildren = {
  PlayGameIdLayoutRoute: PlayGameIdLayoutRouteWithChildren,
}

const PlayGameIdRouteWithChildren = PlayGameIdRoute._addFileChildren(
  PlayGameIdRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof windowedLayoutRouteWithChildren
  '': typeof FullscreenLayoutRouteWithChildren
  '/play/$gameId': typeof PlayGameIdLayoutRouteWithChildren
  '/home': typeof windowedLayoutHomeLazyRoute
  '/fullscreen': typeof FullscreenLayoutFullscreenIndexLazyRoute
  '/fullscreen/games/$gameId': typeof FullscreenLayoutFullscreenGamesGameIdLazyRoute
  '/play/$gameId/frame': typeof PlayGameIdLayoutFrameLazyRoute
  '/play/$gameId/': typeof PlayGameIdLayoutIndexRoute
  '/fullscreen/games': typeof FullscreenLayoutFullscreenGamesIndexLazyRoute
  '/games/$gameId': typeof windowedLayoutGamesGameIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof windowedLayoutRouteWithChildren
  '': typeof FullscreenLayoutRouteWithChildren
  '/play/$gameId': typeof PlayGameIdLayoutIndexRoute
  '/home': typeof windowedLayoutHomeLazyRoute
  '/fullscreen': typeof FullscreenLayoutFullscreenIndexLazyRoute
  '/fullscreen/games/$gameId': typeof FullscreenLayoutFullscreenGamesGameIdLazyRoute
  '/play/$gameId/frame': typeof PlayGameIdLayoutFrameLazyRoute
  '/fullscreen/games': typeof FullscreenLayoutFullscreenGamesIndexLazyRoute
  '/games/$gameId': typeof windowedLayoutGamesGameIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_fullscreenLayout': typeof FullscreenLayoutRouteWithChildren
  '/(windowed)': typeof windowedRouteWithChildren
  '/(windowed)/_layout': typeof windowedLayoutRouteWithChildren
  '/play/$gameId': typeof PlayGameIdRouteWithChildren
  '/play/$gameId/_layout': typeof PlayGameIdLayoutRouteWithChildren
  '/(windowed)/_layout/home': typeof windowedLayoutHomeLazyRoute
  '/_fullscreenLayout/fullscreen/': typeof FullscreenLayoutFullscreenIndexLazyRoute
  '/_fullscreenLayout/fullscreen/games/$gameId': typeof FullscreenLayoutFullscreenGamesGameIdLazyRoute
  '/play/$gameId/_layout/frame': typeof PlayGameIdLayoutFrameLazyRoute
  '/play/$gameId/_layout/': typeof PlayGameIdLayoutIndexRoute
  '/_fullscreenLayout/fullscreen/games/': typeof FullscreenLayoutFullscreenGamesIndexLazyRoute
  '/(windowed)/_layout/games/$gameId/': typeof windowedLayoutGamesGameIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/play/$gameId'
    | '/home'
    | '/fullscreen'
    | '/fullscreen/games/$gameId'
    | '/play/$gameId/frame'
    | '/play/$gameId/'
    | '/fullscreen/games'
    | '/games/$gameId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/play/$gameId'
    | '/home'
    | '/fullscreen'
    | '/fullscreen/games/$gameId'
    | '/play/$gameId/frame'
    | '/fullscreen/games'
    | '/games/$gameId'
  id:
    | '__root__'
    | '/'
    | '/_fullscreenLayout'
    | '/(windowed)'
    | '/(windowed)/_layout'
    | '/play/$gameId'
    | '/play/$gameId/_layout'
    | '/(windowed)/_layout/home'
    | '/_fullscreenLayout/fullscreen/'
    | '/_fullscreenLayout/fullscreen/games/$gameId'
    | '/play/$gameId/_layout/frame'
    | '/play/$gameId/_layout/'
    | '/_fullscreenLayout/fullscreen/games/'
    | '/(windowed)/_layout/games/$gameId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FullscreenLayoutRoute: typeof FullscreenLayoutRouteWithChildren
  windowedRoute: typeof windowedRouteWithChildren
  PlayGameIdRoute: typeof PlayGameIdRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FullscreenLayoutRoute: FullscreenLayoutRouteWithChildren,
  windowedRoute: windowedRouteWithChildren,
  PlayGameIdRoute: PlayGameIdRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_fullscreenLayout",
        "/(windowed)",
        "/play/$gameId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_fullscreenLayout": {
      "filePath": "_fullscreenLayout.tsx",
      "children": [
        "/_fullscreenLayout/fullscreen/",
        "/_fullscreenLayout/fullscreen/games/$gameId",
        "/_fullscreenLayout/fullscreen/games/"
      ]
    },
    "/(windowed)": {
      "filePath": "(windowed)",
      "children": [
        "/(windowed)/_layout"
      ]
    },
    "/(windowed)/_layout": {
      "filePath": "(windowed)/_layout.tsx",
      "parent": "/(windowed)",
      "children": [
        "/(windowed)/_layout/home",
        "/(windowed)/_layout/games/$gameId/"
      ]
    },
    "/play/$gameId": {
      "filePath": "play/$gameId",
      "children": [
        "/play/$gameId/_layout"
      ]
    },
    "/play/$gameId/_layout": {
      "filePath": "play/$gameId/_layout.tsx",
      "parent": "/play/$gameId",
      "children": [
        "/play/$gameId/_layout/frame",
        "/play/$gameId/_layout/"
      ]
    },
    "/(windowed)/_layout/home": {
      "filePath": "(windowed)/_layout/home.lazy.tsx",
      "parent": "/(windowed)/_layout"
    },
    "/_fullscreenLayout/fullscreen/": {
      "filePath": "_fullscreenLayout/fullscreen/index.lazy.tsx",
      "parent": "/_fullscreenLayout"
    },
    "/_fullscreenLayout/fullscreen/games/$gameId": {
      "filePath": "_fullscreenLayout/fullscreen/games/$gameId.lazy.tsx",
      "parent": "/_fullscreenLayout"
    },
    "/play/$gameId/_layout/frame": {
      "filePath": "play/$gameId/_layout/frame.lazy.tsx",
      "parent": "/play/$gameId/_layout"
    },
    "/play/$gameId/_layout/": {
      "filePath": "play/$gameId/_layout/index.tsx",
      "parent": "/play/$gameId/_layout"
    },
    "/_fullscreenLayout/fullscreen/games/": {
      "filePath": "_fullscreenLayout/fullscreen/games/index.lazy.tsx",
      "parent": "/_fullscreenLayout"
    },
    "/(windowed)/_layout/games/$gameId/": {
      "filePath": "(windowed)/_layout/games/$gameId/index.tsx",
      "parent": "/(windowed)/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
