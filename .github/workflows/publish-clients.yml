name: Publish Clients Applications

on:
  workflow_dispatch:
    inputs:
      title:
        description: The name for this draft release. Used for both tag name and release name.
        required: true
        type: string

  release:
    types: [published]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  build-desktop-clients:
    name: Build Desktop Clients (x64 - Windows, Linux, MacOS; ARM - MacOS)
    env:
      PQ_LIB_STATIC: 1
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            config: "--config tauri.build.conf.json"
            target: "--target aarch64-apple-darwin"
            # rustflags: "-L/usr/local/opt/libpq/lib"
          - platform: "macos-latest" # for Intel based macs.
            config: "--config tauri.build.conf.json"
            target: "--target x86_64-apple-darwin"
            # rustflags: "-L/usr/local/opt/libpq/lib"
          - platform: "ubuntu-24.04"
            config: "--config tauri.build.conf.json"
          - platform: "windows-latest"
            config: "--config tauri.build.conf.json"
            # rustflags: "-LC:\\Program\ Files\\PostgreSQL\\17\\lib"

    runs-on: ${{ matrix.platform }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - name: setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: install Rust stable
        id: rust
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Cache rust build artifacts
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: install dependencies (ubuntu 24 only)
        if: matrix.platform == 'ubuntu-24.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libwebkit2gtk-4.1-0=2.44.0-2 \
            libwebkit2gtk-4.1-dev=2.44.0-2 \
            libjavascriptcoregtk-4.1-0=2.44.0-2 \
            libjavascriptcoregtk-4.1-dev=2.44.0-2 \
            gir1.2-javascriptcoregtk-4.1=2.44.0-2 \
            gir1.2-webkit2-4.1=2.44.0-2

      - name: install dependencies (windows only)
        if: matrix.platform == 'windows-latest' # This must match the platform value defined above.
        run: |
          choco install -y postgresql

      - name: install dependencies (macos m1 only)
        if: matrix.target == '--target aarch64-apple-darwin' # This must match the value defined above.
        run: |
          brew install postgresql@17

      - name: install dependencies (macos intel only)
        if: matrix.target == '--target x86_64-apple-darwin' # This must match the value defined above.
        run: |
          arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          arch -x86_64 /usr/local/bin/brew install postgresql@17

      - name: install frontend dependencies
        run: pnpm install && pnpm exec buf generate

      - name: build release binary
        if: ${{ github.event_name == 'release' }}
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ""
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          VITE_IS_DESKTOP: true
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          RUSTFLAGS: ${{ matrix.rustflags }}
        with:
          includeDebug: ${{ github.event.release.prerelease }}
          includeRelease: ${{ !github.event.release.prerelease }}
          prerelease: ${{ github.event.release.prerelease }}
          projectPath: packages/client
          tauriScript: pnpm tauri
          releaseId: ${{ github.event.release.id }}
          releaseBody: ${{ github.event.release.body }}
          tagName: ${{ github.event.release.tag_name }}
          args: ${{ matrix.config }} ${{ matrix.target }}
          updaterJsonPreferNsis: true

      - name: build draft release binary
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VITE_IS_DESKTOP: true
          RUSTFLAGS: ${{ matrix.rustflags }}
        with:
          includeDebug: true
          includeRelease: false
          projectPath: packages/client
          tauriScript: pnpm tauri
          args: ${{ matrix.target }}
          prerelease: true
          releaseDraft: true
          releaseName: ${{ inputs.title }}
          tagName: ${{ inputs.title }}-pre.${{ github.sha }}

  build-desktop-clients_arm:
    name: Build Desktop Clients (ARM Linux)
    runs-on: ubuntu-24.04
    if: ${{ github.event_name == 'release' }}

    env:
      PQ_LIB_STATIC: 1
      BUILD_FLAGS: ${{ github.event.release.prerelease && '--debug' || '' }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        arch: [aarch64, armv7l]
        include:
          - arch: aarch64
            cpu: cortex-a72
            base_image: https://dietpi.com/downloads/images/DietPi_RPi-ARMv8-Bookworm.img.xz
            deb: arm64
            rpm: aarch64
            appimage: aarch64
          - arch: armv7l
            cpu: cortex-a53
            deb: armhfp
            rpm: arm
            appimage: armhf
            base_image: https://dietpi.com/downloads/images/DietPi_RPi-ARMv7-Bookworm.img.xz

    steps:
      - uses: actions/checkout@v3

      - name: Cache rust build artifacts
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Build binary
        uses: pguyot/arm-runner-action@v2.6.5
        with:
          base_image: ${{ matrix.base_image }}
          cpu: ${{ matrix.cpu }}
          bind_mount_repository: true
          image_additional_mb: 10240
          optimize_image: no
          commands: |
            # Prevent Rust from complaining about $HOME not matching eid home
            export HOME=/root

            # Workaround to CI worker being stuck on Updating crates.io index
            export CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse

            # Install setup prerequisites
            apt-get update -y --allow-releaseinfo-change
            apt-get autoremove -y
            apt-get install -y --no-install-recommends --no-install-suggests \
              build-essential \
              curl \
              libwebkit2gtk-4.1-0=2.44.0-2 \
              libwebkit2gtk-4.1-dev=2.44.0-2 \
              libjavascriptcoregtk-4.1-0=2.44.0-2 \
              libjavascriptcoregtk-4.1-dev=2.44.0-2 \
              gir1.2-javascriptcoregtk-4.1=2.44.0-2 \
              gir1.2-webkit2-4.1=2.44.0-2
              libpq-dev \
              libssl-dev \
              libgtk-3-dev \
              libayatana-appindicator3-dev \
              librsvg2-dev \
              patchelf \
              libfuse2 \
              file

            curl https://sh.rustup.rs -sSf | sh -s -- -y
            . "$HOME/.cargo/env"
            curl -fsSL https://deb.nodesource.com/setup_lts.x | bash
            apt-get install -y nodejs
            npm i -g pnpm

            # Install frontend dependencies
            pnpm install && pnpm exec buf generate

            # Build the application
            pnpm --filter retrom-client build --verbose --config packages/client/tauri.build.conf.json ${{ env.BUILD_FLAGS }}

      - name: Get app version
        run: echo "APP_VERSION=$(cat Cargo.toml | grep "^version =" | sed 's/^version =//')" >> $GITHUB_ENV

      - name: Upload deb bundle
        uses: actions/upload-artifact@v3
        with:
          name: Debian Bundle
          path: ${{ github.workspace }}/target/release/bundle/deb/Retrom_${{ env.APP_VERSION }}_${{ matrix.deb }}.deb

      - name: Upload rpm bundle
        uses: actions/upload-artifact@v3
        with:
          name: RPM Bundle
          path: ${{ github.workspace }}/target/release/bundle/rpm/Retrom-${{ env.APP_VERSION }}-1.${{ matrix.rpm }}.rpm

      - name: Upload appimage bundle
        uses: actions/upload-artifact@v3
        with:
          name: AppImage Bundle
          path: ${{ github.workspace }}/target/release/bundle/appimage/Retrom_${{ env.APP_VERSION }}_${{ matrix.appimage }}.AppImage
