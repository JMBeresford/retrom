name: Verify

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  verify:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: install Rust stable
        id: rust
        uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install frontend dependencies
        run: pnpm install && pnpm exec buf generate

      - name: run tests
        run: cargo test

      - name: run linter
        run: cargo check && pnpm --filter=web lint

      - name: build service
        run: cargo build --package retrom-service

  build-clients:
    permissions:
      contents: write
    strategy:
      fail-fast: true
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
            rustflags: "-L/opt/homebrew/opt/libpq/lib"
          - platform: "macos-latest" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
            rustflags: "-L/opt/homebrew/opt/libpq/lib"
          - platform: "ubuntu-22.04" # for Tauri v1 you could replace this with ubuntu-20.04.
          - platform: "windows-latest"

    runs-on: ${{ matrix.platform }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - name: setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: install Rust stable
        id: rust
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - uses: Swatinem/rust-cache@v2

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install dependencies (windows only)
        if: matrix.platform == 'windows-latest' # This must match the platform value defined above.
        run: |
          choco install -y postgresql

      - name: install dependencies (macos only)
        if: matrix.platform == 'macos-latest' # This must match the platform value defined above.
        run: |
          brew install postgresql@16 libpq && brew link --force libpq

      - name: install frontend dependencies
        run: pnpm install && pnpm exec buf generate

      - name: Set Perl environment variables
        if: matrix.platform == 'windows-latest'
        shell: cmd
        run: |
          echo "PERL=$((where.exe perl)[0])" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          echo "OPENSSL_SRC_PERL=$((where.exe perl)[0])" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

      - name: build client
        run: cd packages/client && pnpm exec tauri build ${{ matrix.args }}
